// Code generated by stanc v2.33.0
#include <stan/model/model_header.hpp>
namespace model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 112> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 37, column 4 to column 46)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 38, column 4 to column 57)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 39, column 4 to column 51)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 40, column 4 to column 49)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 41, column 4 to column 40)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 43, column 4 to column 51)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 45, column 4 to column 72)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 46, column 4 to column 70)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 57, column 4 to column 51)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 58, column 4 to column 62)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 59, column 4 to column 54)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 60, column 4 to column 56)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 63, column 4 to column 54)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 64, column 4 to column 76)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 69, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 69, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 69, column 4 to column 66)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 70, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 70, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 70, column 4 to column 77)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 71, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 71, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 71, column 4 to column 68)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 72, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 72, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 72, column 4 to column 66)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 74, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 74, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 74, column 4 to column 62)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 75, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 75, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 75, column 4 to column 60)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 79, column 8 to column 91)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 80, column 8 to column 113)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 81, column 8 to column 137)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 82, column 8 to column 135)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 83, column 8 to column 84)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 84, column 8 to column 80)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 85, column 8 to column 135)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 86, column 8 to column 129)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 87, column 8 to column 40)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 89, column 15 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 89, column 8 to column 46)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 90, column 15 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 90, column 8 to column 44)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 91, column 15 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 91, column 8 to column 37)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 92, column 15 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 92, column 8 to column 35)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 94, column 12 to column 93)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 95, column 12 to column 89)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 93, column 29 to line 96, column 9)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 93, column 8 to line 96, column 9)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 100, column 12 to column 120)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 101, column 12 to column 112)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 103, column 16 to column 41)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 102, column 38 to line 104, column 13)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 102, column 12 to line 104, column 13)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 106, column 16 to column 39)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 105, column 36 to line 107, column 13)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 105, column 12 to line 107, column 13)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 109, column 12 to column 64)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 110, column 12 to column 60)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 98, column 29 to line 111, column 9)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 98, column 8 to line 111, column 9)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 78, column 28 to line 112, column 5)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 78, column 4 to line 112, column 5)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 2, column 4 to column 25)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 3, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 3, column 4 to column 45)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 4, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 4, column 4 to column 43)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 5, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 5, column 4 to column 50)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 8, column 4 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 10, column 4 to column 28)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 13, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 13, column 4 to column 40)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 15, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 15, column 35 to column 45)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 15, column 46 to column 52)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 15, column 4 to column 68)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 16, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 16, column 18 to column 28)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 16, column 4 to column 64)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 17, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 17, column 18 to column 28)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 17, column 4 to column 64)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 18, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 18, column 18 to column 28)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 18, column 4 to column 56)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 19, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 19, column 18 to column 28)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 19, column 4 to column 54)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 24, column 4 to column 24)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 25, column 4 to column 26)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 26, column 4 to column 31)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 28, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 28, column 4 to column 56)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 29, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 29, column 4 to column 54)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 31, column 8 to column 89)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 32, column 8 to column 85)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 30, column 28 to line 33, column 5)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 30, column 4 to line 33, column 5)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 41, column 11 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 43, column 11 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 45, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 45, column 26 to column 36)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 46, column 10 to column 17)",
  " (in '/Users/dcs0spb/Software/iticse2023_wg6/model/model.stan', line 46, column 26 to column 36)"};
class model_model final : public model_base_crtp<model_model> {
 private:
  int COHORTS;
  std::vector<int> cohort_women;
  std::vector<int> cohort_men;
  std::vector<double> mu_modules_taken;
  int TOPICS;
  int MAXMODULES;
  std::vector<int> MODULES;
  std::vector<Eigen::Matrix<double,-1,-1>> module_topics;
  std::vector<std::vector<double>> module_min_students;
  std::vector<std::vector<double>> module_max_students;
  std::vector<std::vector<int>> module_women;
  std::vector<std::vector<int>> module_men;
  int ideal_mu;
  int ideal_sigma;
  double epsilon_sigma;
  std::vector<double> expected_modules_women;
  std::vector<double> expected_modules_men;
 public:
  ~model_model() {}
  model_model(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_model_namespace::model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 68;
      context__.validate_dims("data initialization", "COHORTS", "int",
        std::vector<size_t>{});
      COHORTS = std::numeric_limits<int>::min();
      current_statement__ = 68;
      COHORTS = context__.vals_i("COHORTS")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "COHORTS", COHORTS, 1);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("cohort_women", "COHORTS",
        COHORTS);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "cohort_women", "int",
        std::vector<size_t>{static_cast<size_t>(COHORTS)});
      cohort_women = std::vector<int>(COHORTS,
                       std::numeric_limits<int>::min());
      current_statement__ = 70;
      cohort_women = context__.vals_i("cohort_women");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "cohort_women",
        cohort_women, 0);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("cohort_men", "COHORTS",
        COHORTS);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "cohort_men", "int",
        std::vector<size_t>{static_cast<size_t>(COHORTS)});
      cohort_men = std::vector<int>(COHORTS, std::numeric_limits<int>::min());
      current_statement__ = 72;
      cohort_men = context__.vals_i("cohort_men");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "cohort_men",
        cohort_men, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("mu_modules_taken", "COHORTS",
        COHORTS);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "mu_modules_taken",
        "double", std::vector<size_t>{static_cast<size_t>(COHORTS)});
      mu_modules_taken = std::vector<double>(COHORTS,
                           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 74;
      mu_modules_taken = context__.vals_r("mu_modules_taken");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "mu_modules_taken",
        mu_modules_taken, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "TOPICS", "int",
        std::vector<size_t>{});
      TOPICS = std::numeric_limits<int>::min();
      current_statement__ = 75;
      TOPICS = context__.vals_i("TOPICS")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "TOPICS", TOPICS, 1);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "MAXMODULES", "int",
        std::vector<size_t>{});
      MAXMODULES = std::numeric_limits<int>::min();
      current_statement__ = 76;
      MAXMODULES = context__.vals_i("MAXMODULES")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "MAXMODULES",
        MAXMODULES, 1);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("MODULES", "COHORTS", COHORTS);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "MODULES", "int",
        std::vector<size_t>{static_cast<size_t>(COHORTS)});
      MODULES = std::vector<int>(COHORTS, std::numeric_limits<int>::min());
      current_statement__ = 78;
      MODULES = context__.vals_i("MODULES");
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "MODULES", MODULES, 0);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("module_topics", "COHORTS",
        COHORTS);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("module_topics", "MAXMODULES",
        MAXMODULES);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("module_topics", "TOPICS",
        TOPICS);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "module_topics",
        "double",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES), static_cast<size_t>(TOPICS)});
      module_topics = std::vector<Eigen::Matrix<double,-1,-1>>(COHORTS,
                        Eigen::Matrix<double,-1,-1>::Constant(MAXMODULES,
                          TOPICS, std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> module_topics_flat__;
        current_statement__ = 82;
        module_topics_flat__ = context__.vals_r("module_topics");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= MAXMODULES; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= COHORTS; ++sym3__) {
              stan::model::assign(module_topics, module_topics_flat__[(pos__
                - 1)], "assigning variable module_topics",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "module_topics",
        module_topics, 0);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("module_min_students",
        "COHORTS", COHORTS);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("module_min_students",
        "MAXMODULES", MAXMODULES);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "module_min_students",
        "double",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      module_min_students = std::vector<std::vector<double>>(COHORTS,
                              std::vector<double>(MAXMODULES,
                                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> module_min_students_flat__;
        current_statement__ = 85;
        module_min_students_flat__ = context__.vals_r("module_min_students");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(module_min_students,
              module_min_students_flat__[(pos__ - 1)],
              "assigning variable module_min_students",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "module_min_students",
        module_min_students, 0);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("module_max_students",
        "COHORTS", COHORTS);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("module_max_students",
        "MAXMODULES", MAXMODULES);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "module_max_students",
        "double",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      module_max_students = std::vector<std::vector<double>>(COHORTS,
                              std::vector<double>(MAXMODULES,
                                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> module_max_students_flat__;
        current_statement__ = 88;
        module_max_students_flat__ = context__.vals_r("module_max_students");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(module_max_students,
              module_max_students_flat__[(pos__ - 1)],
              "assigning variable module_max_students",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "module_max_students",
        module_max_students, 0);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("module_women", "COHORTS",
        COHORTS);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("module_women", "MAXMODULES",
        MAXMODULES);
      current_statement__ = 91;
      context__.validate_dims("data initialization", "module_women", "int",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      module_women = std::vector<std::vector<int>>(COHORTS,
                       std::vector<int>(MAXMODULES,
                         std::numeric_limits<int>::min()));
      {
        std::vector<int> module_women_flat__;
        current_statement__ = 91;
        module_women_flat__ = context__.vals_i("module_women");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(module_women, module_women_flat__[(pos__ -
              1)], "assigning variable module_women",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 91;
      stan::math::check_greater_or_equal(function__, "module_women",
        module_women, 0);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("module_men", "COHORTS",
        COHORTS);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("module_men", "MAXMODULES",
        MAXMODULES);
      current_statement__ = 94;
      context__.validate_dims("data initialization", "module_men", "int",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      module_men = std::vector<std::vector<int>>(COHORTS,
                     std::vector<int>(MAXMODULES,
                       std::numeric_limits<int>::min()));
      {
        std::vector<int> module_men_flat__;
        current_statement__ = 94;
        module_men_flat__ = context__.vals_i("module_men");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(module_men, module_men_flat__[(pos__ - 1)],
              "assigning variable module_men",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "module_men",
        module_men, 0);
      current_statement__ = 95;
      ideal_mu = std::numeric_limits<int>::min();
      current_statement__ = 95;
      ideal_mu = 1000;
      current_statement__ = 96;
      ideal_sigma = std::numeric_limits<int>::min();
      current_statement__ = 96;
      ideal_sigma = 200;
      current_statement__ = 97;
      epsilon_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 97;
      epsilon_sigma = 0.001;
      current_statement__ = 98;
      stan::math::validate_non_negative_index("expected_modules_women",
        "COHORTS", COHORTS);
      current_statement__ = 99;
      expected_modules_women = std::vector<double>(COHORTS,
                                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 100;
      stan::math::validate_non_negative_index("expected_modules_men",
        "COHORTS", COHORTS);
      current_statement__ = 101;
      expected_modules_men = std::vector<double>(COHORTS,
                               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 105;
      for (int cohort = 1; cohort <= COHORTS; ++cohort) {
        current_statement__ = 102;
        stan::model::assign(expected_modules_women,
          (stan::model::rvalue(mu_modules_taken, "mu_modules_taken",
             stan::model::index_uni(cohort)) *
          stan::model::rvalue(cohort_women, "cohort_women",
            stan::model::index_uni(cohort))),
          "assigning variable expected_modules_women",
          stan::model::index_uni(cohort));
        current_statement__ = 103;
        stan::model::assign(expected_modules_men,
          (stan::model::rvalue(mu_modules_taken, "mu_modules_taken",
             stan::model::index_uni(cohort)) *
          stan::model::rvalue(cohort_men, "cohort_men",
            stan::model::index_uni(cohort))),
          "assigning variable expected_modules_men",
          stan::model::index_uni(cohort));
      }
      current_statement__ = 99;
      stan::math::check_greater_or_equal(function__,
        "expected_modules_women", expected_modules_women, 0);
      current_statement__ = 101;
      stan::math::check_greater_or_equal(function__, "expected_modules_men",
        expected_modules_men, 0);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("popularity_topic_all",
        "TOPICS", TOPICS);
      current_statement__ = 107;
      stan::math::validate_non_negative_index(
        "popularity_topic_women_men_diff", "TOPICS", TOPICS);
      current_statement__ = 108;
      stan::math::validate_non_negative_index(
        "popularity_module_non_topic_women", "COHORTS", COHORTS);
      current_statement__ = 109;
      stan::math::validate_non_negative_index(
        "popularity_module_non_topic_women", "MAXMODULES", MAXMODULES);
      current_statement__ = 110;
      stan::math::validate_non_negative_index(
        "popularity_module_non_topic_men", "COHORTS", COHORTS);
      current_statement__ = 111;
      stan::math::validate_non_negative_index(
        "popularity_module_non_topic_men", "MAXMODULES", MAXMODULES);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + TOPICS + TOPICS + (COHORTS * MAXMODULES)
      + (COHORTS * MAXMODULES);
  }
  inline std::string model_name() const final {
    return "model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.0",
             "stancflags = "};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma_topic_all = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_topic_all = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(epsilon_sigma, lp__);
      local_scalar_t__ sigma_topic_women_men_diff = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_topic_women_men_diff = in__.template read_constrain_lb<
                                     local_scalar_t__,
                                     jacobian__>(epsilon_sigma, lp__);
      local_scalar_t__ sigma_nontopic_women = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_nontopic_women = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(epsilon_sigma,
                               lp__);
      local_scalar_t__ sigma_nontopic_men = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_nontopic_men = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(epsilon_sigma, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_all =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 5;
      popularity_topic_all = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_women_men_diff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 6;
      popularity_topic_women_men_diff = in__.template read<
                                          Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_women =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 7;
      popularity_module_non_topic_women = in__.template read<
                                            std::vector<
                                              Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                            MAXMODULES);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_men =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 8;
      popularity_module_non_topic_men = in__.template read<
                                          std::vector<
                                            Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                          MAXMODULES);
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_topic_all, (1.0 / ideal_sigma)));
        current_statement__ = 10;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_topic_women_men_diff, (1.0 / ideal_sigma)));
        current_statement__ = 11;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_nontopic_men, (1.0 / ideal_sigma)));
        current_statement__ = 12;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_nontopic_women, (1.0 / ideal_sigma)));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         popularity_topic_all, 0, sigma_topic_all));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         popularity_topic_women_men_diff, 0,
                         sigma_topic_women_men_diff));
        current_statement__ = 15;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_all", "COHORTS", COHORTS);
        current_statement__ = 16;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_all", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_all =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 18;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women_men_diff", "COHORTS", COHORTS);
        current_statement__ = 19;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women_men_diff", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_women_men_diff =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 21;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women", "COHORTS", COHORTS);
        current_statement__ = 22;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_women =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 24;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_men", "COHORTS", COHORTS);
        current_statement__ = 25;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_men", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_men =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 27;
        stan::math::validate_non_negative_index("popularity_module_women",
          "COHORTS", COHORTS);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("popularity_module_women",
          "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_women =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 30;
        stan::math::validate_non_negative_index("popularity_module_men",
          "COHORTS", COHORTS);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("popularity_module_men",
          "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_men =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 67;
        for (int cohort = 1; cohort <= COHORTS; ++cohort) {
          current_statement__ = 33;
          stan::model::assign(popularity_module_topic_all,
            stan::math::multiply(
              stan::model::rvalue(module_topics, "module_topics",
                stan::model::index_uni(cohort)), popularity_topic_all),
            "assigning variable popularity_module_topic_all",
            stan::model::index_uni(cohort));
          current_statement__ = 34;
          stan::model::assign(popularity_module_topic_women_men_diff,
            stan::math::multiply(
              stan::model::rvalue(module_topics, "module_topics",
                stan::model::index_uni(cohort)),
              popularity_topic_women_men_diff),
            "assigning variable popularity_module_topic_women_men_diff",
            stan::model::index_uni(cohort));
          current_statement__ = 35;
          stan::model::assign(popularity_module_topic_women,
            stan::math::add(
              stan::model::rvalue(popularity_module_topic_all,
                "popularity_module_topic_all", stan::model::index_uni(cohort)),
              stan::math::multiply(0.5,
                stan::model::rvalue(popularity_module_topic_women_men_diff,
                  "popularity_module_topic_women_men_diff",
                  stan::model::index_uni(cohort)))),
            "assigning variable popularity_module_topic_women",
            stan::model::index_uni(cohort));
          current_statement__ = 36;
          stan::model::assign(popularity_module_topic_men,
            stan::math::subtract(
              stan::model::rvalue(popularity_module_topic_all,
                "popularity_module_topic_all", stan::model::index_uni(cohort)),
              stan::math::multiply(0.5,
                stan::model::rvalue(popularity_module_topic_women_men_diff,
                  "popularity_module_topic_women_men_diff",
                  stan::model::index_uni(cohort)))),
            "assigning variable popularity_module_topic_men",
            stan::model::index_uni(cohort));
          current_statement__ = 37;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             popularity_module_non_topic_women,
                             "popularity_module_non_topic_women",
                             stan::model::index_uni(cohort)), 0,
                           sigma_nontopic_women));
          current_statement__ = 38;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             popularity_module_non_topic_men,
                             "popularity_module_non_topic_men",
                             stan::model::index_uni(cohort)), 0,
                           sigma_nontopic_men));
          current_statement__ = 39;
          stan::model::assign(popularity_module_women,
            stan::math::add(
              stan::math::add(ideal_mu,
                stan::model::rvalue(popularity_module_topic_women,
                  "popularity_module_topic_women",
                  stan::model::index_uni(cohort))),
              stan::model::rvalue(popularity_module_non_topic_women,
                "popularity_module_non_topic_women",
                stan::model::index_uni(cohort))),
            "assigning variable popularity_module_women",
            stan::model::index_uni(cohort));
          current_statement__ = 40;
          stan::model::assign(popularity_module_men,
            stan::math::add(
              stan::math::add(ideal_mu,
                stan::model::rvalue(popularity_module_topic_men,
                  "popularity_module_topic_men",
                  stan::model::index_uni(cohort))),
              stan::model::rvalue(popularity_module_non_topic_men,
                "popularity_module_non_topic_men",
                stan::model::index_uni(cohort))),
            "assigning variable popularity_module_men",
            stan::model::index_uni(cohort));
          int n_modules = std::numeric_limits<int>::min();
          current_statement__ = 41;
          n_modules = stan::model::rvalue(MODULES, "MODULES",
                        stan::model::index_uni(cohort));
          current_statement__ = 42;
          stan::math::validate_non_negative_index("rate_women_relative",
            "n_modules", n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_women_relative =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 44;
          stan::math::validate_non_negative_index("rate_men_relative",
            "n_modules", n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_men_relative =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 46;
          stan::math::validate_non_negative_index("rate_women", "n_modules",
            n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_women =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 48;
          stan::math::validate_non_negative_index("rate_men", "n_modules",
            n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_men =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 53;
          for (int m = 1; m <= n_modules; ++m) {
            current_statement__ = 50;
            stan::model::assign(rate_women_relative,
              stan::math::pow(10,
                (stan::model::rvalue(
                   stan::model::rvalue(popularity_module_women,
                     "popularity_module_women",
                     stan::model::index_uni(cohort)),
                   "popularity_module_women[cohort]",
                   stan::model::index_uni(m)) * (-(1.0) / 400))),
              "assigning variable rate_women_relative",
              stan::model::index_uni(m));
            current_statement__ = 51;
            stan::model::assign(rate_men_relative,
              stan::math::pow(10,
                (stan::model::rvalue(
                   stan::model::rvalue(popularity_module_men,
                     "popularity_module_men", stan::model::index_uni(cohort)),
                   "popularity_module_men[cohort]", stan::model::index_uni(m))
                * (-(1.0) / 400))), "assigning variable rate_men_relative",
              stan::model::index_uni(m));
          }
          current_statement__ = 65;
          for (int m = 1; m <= n_modules; ++m) {
            current_statement__ = 54;
            stan::model::assign(rate_women, (((1.0 /
              stan::math::norm1(rate_women_relative)) *
              stan::model::rvalue(rate_women_relative, "rate_women_relative",
                stan::model::index_uni(m))) *
              stan::model::rvalue(expected_modules_women,
                "expected_modules_women", stan::model::index_uni(cohort))),
              "assigning variable rate_women", stan::model::index_uni(m));
            current_statement__ = 55;
            stan::model::assign(rate_men, (((1.0 /
              stan::math::norm1(rate_men_relative)) *
              stan::model::rvalue(rate_men_relative, "rate_men_relative",
                stan::model::index_uni(m))) *
              stan::model::rvalue(expected_modules_men,
                "expected_modules_men", stan::model::index_uni(cohort))),
              "assigning variable rate_men", stan::model::index_uni(m));
            current_statement__ = 58;
            if (stan::math::logical_lt(
                  stan::model::rvalue(rate_women, "rate_women",
                    stan::model::index_uni(m)), 0.000001)) {
              current_statement__ = 56;
              stan::model::assign(rate_women, 0.000001,
                "assigning variable rate_women", stan::model::index_uni(m));
            }
            current_statement__ = 61;
            if (stan::math::logical_lt(
                  stan::model::rvalue(rate_men, "rate_men",
                    stan::model::index_uni(m)), 0.000001)) {
              current_statement__ = 59;
              stan::model::assign(rate_men, 0.000001,
                "assigning variable rate_men", stan::model::index_uni(m));
            }
            current_statement__ = 62;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(module_women,
                               "module_women",
                               stan::model::index_uni(cohort),
                               stan::model::index_uni(m)), (1.0 /
                             stan::model::rvalue(rate_women, "rate_women",
                               stan::model::index_uni(m)))));
            current_statement__ = 63;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(module_men, "module_men",
                               stan::model::index_uni(cohort),
                               stan::model::index_uni(m)), (1.0 /
                             stan::model::rvalue(rate_men, "rate_men",
                               stan::model::index_uni(m)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma_topic_all = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_topic_all = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(epsilon_sigma, lp__);
      local_scalar_t__ sigma_topic_women_men_diff = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_topic_women_men_diff = in__.template read_constrain_lb<
                                     local_scalar_t__,
                                     jacobian__>(epsilon_sigma, lp__);
      local_scalar_t__ sigma_nontopic_women = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_nontopic_women = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(epsilon_sigma,
                               lp__);
      local_scalar_t__ sigma_nontopic_men = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_nontopic_men = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(epsilon_sigma, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_all =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 5;
      popularity_topic_all = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_women_men_diff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 6;
      popularity_topic_women_men_diff = in__.template read<
                                          Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_women =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 7;
      popularity_module_non_topic_women = in__.template read<
                                            std::vector<
                                              Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                            MAXMODULES);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_men =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 8;
      popularity_module_non_topic_men = in__.template read<
                                          std::vector<
                                            Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                          MAXMODULES);
      {
        current_statement__ = 9;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_topic_all, (1.0 / ideal_sigma)));
        current_statement__ = 10;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_topic_women_men_diff, (1.0 / ideal_sigma)));
        current_statement__ = 11;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_nontopic_men, (1.0 / ideal_sigma)));
        current_statement__ = 12;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                         sigma_nontopic_women, (1.0 / ideal_sigma)));
        current_statement__ = 13;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         popularity_topic_all, 0, sigma_topic_all));
        current_statement__ = 14;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         popularity_topic_women_men_diff, 0,
                         sigma_topic_women_men_diff));
        current_statement__ = 15;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_all", "COHORTS", COHORTS);
        current_statement__ = 16;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_all", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_all =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 18;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women_men_diff", "COHORTS", COHORTS);
        current_statement__ = 19;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women_men_diff", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_women_men_diff =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 21;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women", "COHORTS", COHORTS);
        current_statement__ = 22;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_women", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_women =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 24;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_men", "COHORTS", COHORTS);
        current_statement__ = 25;
        stan::math::validate_non_negative_index(
          "popularity_module_topic_men", "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_topic_men =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 27;
        stan::math::validate_non_negative_index("popularity_module_women",
          "COHORTS", COHORTS);
        current_statement__ = 28;
        stan::math::validate_non_negative_index("popularity_module_women",
          "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_women =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 30;
        stan::math::validate_non_negative_index("popularity_module_men",
          "COHORTS", COHORTS);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("popularity_module_men",
          "MAXMODULES", MAXMODULES);
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          popularity_module_men =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
              DUMMY_VAR__));
        current_statement__ = 67;
        for (int cohort = 1; cohort <= COHORTS; ++cohort) {
          current_statement__ = 33;
          stan::model::assign(popularity_module_topic_all,
            stan::math::multiply(
              stan::model::rvalue(module_topics, "module_topics",
                stan::model::index_uni(cohort)), popularity_topic_all),
            "assigning variable popularity_module_topic_all",
            stan::model::index_uni(cohort));
          current_statement__ = 34;
          stan::model::assign(popularity_module_topic_women_men_diff,
            stan::math::multiply(
              stan::model::rvalue(module_topics, "module_topics",
                stan::model::index_uni(cohort)),
              popularity_topic_women_men_diff),
            "assigning variable popularity_module_topic_women_men_diff",
            stan::model::index_uni(cohort));
          current_statement__ = 35;
          stan::model::assign(popularity_module_topic_women,
            stan::math::add(
              stan::model::rvalue(popularity_module_topic_all,
                "popularity_module_topic_all", stan::model::index_uni(cohort)),
              stan::math::multiply(0.5,
                stan::model::rvalue(popularity_module_topic_women_men_diff,
                  "popularity_module_topic_women_men_diff",
                  stan::model::index_uni(cohort)))),
            "assigning variable popularity_module_topic_women",
            stan::model::index_uni(cohort));
          current_statement__ = 36;
          stan::model::assign(popularity_module_topic_men,
            stan::math::subtract(
              stan::model::rvalue(popularity_module_topic_all,
                "popularity_module_topic_all", stan::model::index_uni(cohort)),
              stan::math::multiply(0.5,
                stan::model::rvalue(popularity_module_topic_women_men_diff,
                  "popularity_module_topic_women_men_diff",
                  stan::model::index_uni(cohort)))),
            "assigning variable popularity_module_topic_men",
            stan::model::index_uni(cohort));
          current_statement__ = 37;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             popularity_module_non_topic_women,
                             "popularity_module_non_topic_women",
                             stan::model::index_uni(cohort)), 0,
                           sigma_nontopic_women));
          current_statement__ = 38;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(
                             popularity_module_non_topic_men,
                             "popularity_module_non_topic_men",
                             stan::model::index_uni(cohort)), 0,
                           sigma_nontopic_men));
          current_statement__ = 39;
          stan::model::assign(popularity_module_women,
            stan::math::add(
              stan::math::add(ideal_mu,
                stan::model::rvalue(popularity_module_topic_women,
                  "popularity_module_topic_women",
                  stan::model::index_uni(cohort))),
              stan::model::rvalue(popularity_module_non_topic_women,
                "popularity_module_non_topic_women",
                stan::model::index_uni(cohort))),
            "assigning variable popularity_module_women",
            stan::model::index_uni(cohort));
          current_statement__ = 40;
          stan::model::assign(popularity_module_men,
            stan::math::add(
              stan::math::add(ideal_mu,
                stan::model::rvalue(popularity_module_topic_men,
                  "popularity_module_topic_men",
                  stan::model::index_uni(cohort))),
              stan::model::rvalue(popularity_module_non_topic_men,
                "popularity_module_non_topic_men",
                stan::model::index_uni(cohort))),
            "assigning variable popularity_module_men",
            stan::model::index_uni(cohort));
          int n_modules = std::numeric_limits<int>::min();
          current_statement__ = 41;
          n_modules = stan::model::rvalue(MODULES, "MODULES",
                        stan::model::index_uni(cohort));
          current_statement__ = 42;
          stan::math::validate_non_negative_index("rate_women_relative",
            "n_modules", n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_women_relative =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 44;
          stan::math::validate_non_negative_index("rate_men_relative",
            "n_modules", n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_men_relative =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 46;
          stan::math::validate_non_negative_index("rate_women", "n_modules",
            n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_women =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 48;
          stan::math::validate_non_negative_index("rate_men", "n_modules",
            n_modules);
          Eigen::Matrix<local_scalar_t__,-1,1> rate_men =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_modules,
              DUMMY_VAR__);
          current_statement__ = 53;
          for (int m = 1; m <= n_modules; ++m) {
            current_statement__ = 50;
            stan::model::assign(rate_women_relative,
              stan::math::pow(10,
                (stan::model::rvalue(
                   stan::model::rvalue(popularity_module_women,
                     "popularity_module_women",
                     stan::model::index_uni(cohort)),
                   "popularity_module_women[cohort]",
                   stan::model::index_uni(m)) * (-(1.0) / 400))),
              "assigning variable rate_women_relative",
              stan::model::index_uni(m));
            current_statement__ = 51;
            stan::model::assign(rate_men_relative,
              stan::math::pow(10,
                (stan::model::rvalue(
                   stan::model::rvalue(popularity_module_men,
                     "popularity_module_men", stan::model::index_uni(cohort)),
                   "popularity_module_men[cohort]", stan::model::index_uni(m))
                * (-(1.0) / 400))), "assigning variable rate_men_relative",
              stan::model::index_uni(m));
          }
          current_statement__ = 65;
          for (int m = 1; m <= n_modules; ++m) {
            current_statement__ = 54;
            stan::model::assign(rate_women, (((1.0 /
              stan::math::norm1(rate_women_relative)) *
              stan::model::rvalue(rate_women_relative, "rate_women_relative",
                stan::model::index_uni(m))) *
              stan::model::rvalue(expected_modules_women,
                "expected_modules_women", stan::model::index_uni(cohort))),
              "assigning variable rate_women", stan::model::index_uni(m));
            current_statement__ = 55;
            stan::model::assign(rate_men, (((1.0 /
              stan::math::norm1(rate_men_relative)) *
              stan::model::rvalue(rate_men_relative, "rate_men_relative",
                stan::model::index_uni(m))) *
              stan::model::rvalue(expected_modules_men,
                "expected_modules_men", stan::model::index_uni(cohort))),
              "assigning variable rate_men", stan::model::index_uni(m));
            current_statement__ = 58;
            if (stan::math::logical_lt(
                  stan::model::rvalue(rate_women, "rate_women",
                    stan::model::index_uni(m)), 0.000001)) {
              current_statement__ = 56;
              stan::model::assign(rate_women, 0.000001,
                "assigning variable rate_women", stan::model::index_uni(m));
            }
            current_statement__ = 61;
            if (stan::math::logical_lt(
                  stan::model::rvalue(rate_men, "rate_men",
                    stan::model::index_uni(m)), 0.000001)) {
              current_statement__ = 59;
              stan::model::assign(rate_men, 0.000001,
                "assigning variable rate_men", stan::model::index_uni(m));
            }
            current_statement__ = 62;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(module_women,
                               "module_women",
                               stan::model::index_uni(cohort),
                               stan::model::index_uni(m)), (1.0 /
                             stan::model::rvalue(rate_women, "rate_women",
                               stan::model::index_uni(m)))));
            current_statement__ = 63;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(module_men, "module_men",
                               stan::model::index_uni(cohort),
                               stan::model::index_uni(m)), (1.0 /
                             stan::model::rvalue(rate_men, "rate_men",
                               stan::model::index_uni(m)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma_topic_all = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma_topic_all = in__.template read_constrain_lb<local_scalar_t__,
                          jacobian__>(epsilon_sigma, lp__);
      double sigma_topic_women_men_diff =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_topic_women_men_diff = in__.template read_constrain_lb<
                                     local_scalar_t__,
                                     jacobian__>(epsilon_sigma, lp__);
      double sigma_nontopic_women = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_nontopic_women = in__.template read_constrain_lb<
                               local_scalar_t__, jacobian__>(epsilon_sigma,
                               lp__);
      double sigma_nontopic_men = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma_nontopic_men = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(epsilon_sigma, lp__);
      Eigen::Matrix<double,-1,1> popularity_topic_all =
        Eigen::Matrix<double,-1,1>::Constant(TOPICS,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      popularity_topic_all = in__.template read<
                               Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      Eigen::Matrix<double,-1,1> popularity_topic_women_men_diff =
        Eigen::Matrix<double,-1,1>::Constant(TOPICS,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      popularity_topic_women_men_diff = in__.template read<
                                          Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS);
      std::vector<Eigen::Matrix<double,-1,1>>
        popularity_module_non_topic_women =
        std::vector<Eigen::Matrix<double,-1,1>>(COHORTS,
          Eigen::Matrix<double,-1,1>::Constant(MAXMODULES,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 7;
      popularity_module_non_topic_women = in__.template read<
                                            std::vector<
                                              Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                            MAXMODULES);
      std::vector<Eigen::Matrix<double,-1,1>>
        popularity_module_non_topic_men =
        std::vector<Eigen::Matrix<double,-1,1>>(COHORTS,
          Eigen::Matrix<double,-1,1>::Constant(MAXMODULES,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 8;
      popularity_module_non_topic_men = in__.template read<
                                          std::vector<
                                            Eigen::Matrix<local_scalar_t__,-1,1>>>(COHORTS,
                                          MAXMODULES);
      out__.write(sigma_topic_all);
      out__.write(sigma_topic_women_men_diff);
      out__.write(sigma_nontopic_women);
      out__.write(sigma_nontopic_men);
      out__.write(popularity_topic_all);
      out__.write(popularity_topic_women_men_diff);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
          out__.write(popularity_module_non_topic_women[(sym2__ - 1)][(sym1__
            - 1)]);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
          out__.write(popularity_module_non_topic_men[(sym2__ - 1)][(sym1__ -
            1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ sigma_topic_all = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_topic_all = in__.read<local_scalar_t__>();
      out__.write_free_lb(epsilon_sigma, sigma_topic_all);
      local_scalar_t__ sigma_topic_women_men_diff = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_topic_women_men_diff = in__.read<local_scalar_t__>();
      out__.write_free_lb(epsilon_sigma, sigma_topic_women_men_diff);
      local_scalar_t__ sigma_nontopic_women = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_nontopic_women = in__.read<local_scalar_t__>();
      out__.write_free_lb(epsilon_sigma, sigma_nontopic_women);
      local_scalar_t__ sigma_nontopic_men = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_nontopic_men = in__.read<local_scalar_t__>();
      out__.write_free_lb(epsilon_sigma, sigma_nontopic_men);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_all =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(popularity_topic_all,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS),
        "assigning variable popularity_topic_all");
      out__.write(popularity_topic_all);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_women_men_diff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(popularity_topic_women_men_diff,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(TOPICS),
        "assigning variable popularity_topic_women_men_diff");
      out__.write(popularity_topic_women_men_diff);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_women =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(popularity_module_non_topic_women,
            in__.read<local_scalar_t__>(),
            "assigning variable popularity_module_non_topic_women",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(popularity_module_non_topic_women);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_men =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
          current_statement__ = 8;
          stan::model::assign(popularity_module_non_topic_men,
            in__.read<local_scalar_t__>(),
            "assigning variable popularity_module_non_topic_men",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(popularity_module_non_topic_men);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma_topic_all",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization",
        "sigma_topic_women_men_diff", "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization",
        "sigma_nontopic_women", "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "sigma_nontopic_men", "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "popularity_topic_all", "double",
        std::vector<size_t>{static_cast<size_t>(TOPICS)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "popularity_topic_women_men_diff", "double",
        std::vector<size_t>{static_cast<size_t>(TOPICS)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "popularity_module_non_topic_women", "double",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization",
        "popularity_module_non_topic_men", "double",
        std::vector<size_t>{static_cast<size_t>(COHORTS),
          static_cast<size_t>(MAXMODULES)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma_topic_all = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_topic_all = context__.vals_r("sigma_topic_all")[(1 - 1)];
      out__.write_free_lb(epsilon_sigma, sigma_topic_all);
      local_scalar_t__ sigma_topic_women_men_diff = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_topic_women_men_diff = context__.vals_r("sigma_topic_women_men_diff")[(1
        - 1)];
      out__.write_free_lb(epsilon_sigma, sigma_topic_women_men_diff);
      local_scalar_t__ sigma_nontopic_women = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_nontopic_women = context__.vals_r("sigma_nontopic_women")[(1 -
        1)];
      out__.write_free_lb(epsilon_sigma, sigma_nontopic_women);
      local_scalar_t__ sigma_nontopic_men = DUMMY_VAR__;
      current_statement__ = 4;
      sigma_nontopic_men = context__.vals_r("sigma_nontopic_men")[(1 - 1)];
      out__.write_free_lb(epsilon_sigma, sigma_nontopic_men);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_all =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> popularity_topic_all_flat__;
        current_statement__ = 5;
        popularity_topic_all_flat__ = context__.vals_r("popularity_topic_all");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
          stan::model::assign(popularity_topic_all,
            popularity_topic_all_flat__[(pos__ - 1)],
            "assigning variable popularity_topic_all",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(popularity_topic_all);
      Eigen::Matrix<local_scalar_t__,-1,1> popularity_topic_women_men_diff =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(TOPICS, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> popularity_topic_women_men_diff_flat__;
        current_statement__ = 6;
        popularity_topic_women_men_diff_flat__ = context__.vals_r("popularity_topic_women_men_diff");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
          stan::model::assign(popularity_topic_women_men_diff,
            popularity_topic_women_men_diff_flat__[(pos__ - 1)],
            "assigning variable popularity_topic_women_men_diff",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(popularity_topic_women_men_diff);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_women =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> popularity_module_non_topic_women_flat__;
        current_statement__ = 7;
        popularity_module_non_topic_women_flat__ = context__.vals_r("popularity_module_non_topic_women");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(popularity_module_non_topic_women,
              popularity_module_non_topic_women_flat__[(pos__ - 1)],
              "assigning variable popularity_module_non_topic_women",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(popularity_module_non_topic_women);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        popularity_module_non_topic_men =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(COHORTS,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(MAXMODULES,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> popularity_module_non_topic_men_flat__;
        current_statement__ = 8;
        popularity_module_non_topic_men_flat__ = context__.vals_r("popularity_module_non_topic_men");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
            stan::model::assign(popularity_module_non_topic_men,
              popularity_module_non_topic_men_flat__[(pos__ - 1)],
              "assigning variable popularity_module_non_topic_men",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(popularity_module_non_topic_men);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma_topic_all",
                "sigma_topic_women_men_diff", "sigma_nontopic_women",
                "sigma_nontopic_men", "popularity_topic_all",
                "popularity_topic_women_men_diff",
                "popularity_module_non_topic_women",
                "popularity_module_non_topic_men"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(TOPICS)},
                std::vector<size_t>{static_cast<size_t>(TOPICS)},
                std::vector<size_t>{static_cast<size_t>(COHORTS),
                  static_cast<size_t>(MAXMODULES)},
                std::vector<size_t>{static_cast<size_t>(COHORTS),
                  static_cast<size_t>(MAXMODULES)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_topic_all");
    param_names__.emplace_back(std::string() + "sigma_topic_women_men_diff");
    param_names__.emplace_back(std::string() + "sigma_nontopic_women");
    param_names__.emplace_back(std::string() + "sigma_nontopic_men");
    for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
      param_names__.emplace_back(std::string() + "popularity_topic_all" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "popularity_topic_women_men_diff" + '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "popularity_module_non_topic_women" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "popularity_module_non_topic_men" + '.' + std::to_string(sym2__) +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_topic_all");
    param_names__.emplace_back(std::string() + "sigma_topic_women_men_diff");
    param_names__.emplace_back(std::string() + "sigma_nontopic_women");
    param_names__.emplace_back(std::string() + "sigma_nontopic_men");
    for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
      param_names__.emplace_back(std::string() + "popularity_topic_all" + '.'
        + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= TOPICS; ++sym1__) {
      param_names__.emplace_back(std::string() +
        "popularity_topic_women_men_diff" + '.' + std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "popularity_module_non_topic_women" + '.' + std::to_string(sym2__)
          + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= MAXMODULES; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= COHORTS; ++sym2__) {
        param_names__.emplace_back(std::string() +
          "popularity_module_non_topic_men" + '.' + std::to_string(sym2__) +
          '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_topic_all\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_topic_women_men_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_nontopic_women\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_nontopic_men\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"popularity_topic_all\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TOPICS) + "},\"block\":\"parameters\"},{\"name\":\"popularity_topic_women_men_diff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TOPICS) + "},\"block\":\"parameters\"},{\"name\":\"popularity_module_non_topic_women\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(COHORTS) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(MAXMODULES) + "}},\"block\":\"parameters\"},{\"name\":\"popularity_module_non_topic_men\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(COHORTS) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(MAXMODULES) + "}},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_topic_all\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_topic_women_men_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_nontopic_women\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_nontopic_men\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"popularity_topic_all\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TOPICS) + "},\"block\":\"parameters\"},{\"name\":\"popularity_topic_women_men_diff\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(TOPICS) + "},\"block\":\"parameters\"},{\"name\":\"popularity_module_non_topic_women\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(COHORTS) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(MAXMODULES) + "}},\"block\":\"parameters\"},{\"name\":\"popularity_module_non_topic_men\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(COHORTS) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(MAXMODULES) + "}},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + 1) + TOPICS) + TOPICS) +
      (COHORTS * MAXMODULES)) + (COHORTS * MAXMODULES));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + 1) + 1) + TOPICS) + TOPICS) +
      (COHORTS * MAXMODULES)) + (COHORTS * MAXMODULES));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_model_namespace::model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_model_namespace::profiles__;
}
#endif