institution,elective,overview,title,summary,content,ilo
Durham_England,COMP3421,"<h2>Durham_England COMP3421</h2><h2>title</h2>COMP3421: 
COMPUTER SCIENCE INTO SCHOOLS<h2>summary</h2>
			<li>To develop a range of key skills in the student and to offer an early taste of teaching to those interested in pursuing it as a career or for other career pathways where public understanding of science is required.</li>
			<li>To help students gain confidence in communicating Computer Science, develop strong organisational and interpersonal skills, and understand how to address the needs of individuals.</li>
			<li>To learn to devise and develop Computer Science projects and teaching methods appropriate to engage the relevant age group they are working with.</li>
			<li>To help inspire a new generation of Computer Scientists as prospective undergraduates by providing role models for school pupils.</li>
			<li>To help teachers convey the excitement of their subject to pupils by showing them the long-term applications of school studies, especially the cross disciplinary relationships of Computer Science.</li>
			<li>To help teachers by providing an assistant who can work with and support pupils at any point on the ability spectrum.</li>
		<h2>content</h2>
			<li>A competitive interview system will be used to match students with appropriate schools and a specific teacher in the local area, and each student selected will be given a chance to visit the school they will be working in before commencement of the placement.  </li>
			<li>One day training course on working in schools and with pupils.  </li>
			<li>Series of lectures on key transferable skills.  </li>
			<li>The student will be required to spend half a day (approx 4hrs) a week in the school every week for at least 10 weeks.  </li>
			<li>Tutorials which will provide an opportunity for students to share their experiences.  </li>
			<li>The students will be involved in the following activities in support of their learning and teaching:  </li>
			<li>Classroom observation and assistance: Initial contact with the teacher and pupils will be as a classroom assistant, watching how the teacher handles the class, observing the level being taught and the structure of the lesson, and offering practical support to the teacher.  </li>
			<li>Teaching assistance: The teacher will assign the student with actual teaching tasks, which will vary dependent on specific needs and the student's own ability as it develops over the term. This could include for example offering problem-solving coaching to a smaller group of higher ability pupils, or taking the last ten minutes of the lesson for the whole class. The student will have to demonstrate an understanding of how the level of the knowledge of the pupils they are teaching fits in to their overall learning context in other subjects.  </li>
			<li>Whole class teaching: Students will typically be offered, in collaboration with their teachers, at least one opportunity to undertake whole class teaching, albeit that it may be only for a small part of the lesson.  </li>
			<li>University awareness: Students will represent and promote their academic discipline as a potential university choice to pupils across the social and academic range represented at their partner schools.  </li>
			<li>Special projects: The student will devise a special Computer Science project on the basis of discussion with the teacher and module co-ordinator and their own assessment of what will interest the particular pupils they are working with. The student will implement the special project and evaluate it. The student will be required to show that they can analyse a specific teaching problem and devise and prepare appropriately targeted teaching materials, practical demonstrations and basis 'tests' where appropriate.  </li>
			<li>Extra-curricular projects: The student may be supervised by the teacher in helping to run an out-of-timetable activity, such as a lunchtime club or special coaching periods for higher ability pupils. The student will have to demonstrate an ability to think laterally in order to formulate interesting ways to illustrate more difficult scientific concepts.  </li>
			<li>Written reports: The student will keep a journal of their own progress in working in the classroom environment, and they will be asked to prepare a written report on the special project.  </li>
			<li>The teachers will act as the main source of guidance in the schools but, in addition, the students will also be able to discuss progress with the module co-ordinator or a member of the Science Outreach and Engagement Team whenever necessary.</li>
			<li>Solutional methods for computational problems.</li>
		<h2>ilo</h2>
				<li>On successful completion of this module students: </li>
				<li>Will be able to assess and devise appropriate ways to communicate a difficult principle or concept.</li>
				<li>Will have gained a broad understanding of many of the key aspects of teaching in schools.</li>
				<li>Will have an advanced understanding of Computer Science through having to explain to others.</li>
				<li>Will have an advanced understanding of the problems of public perception of science.  </li>
			","COMP3421: 
COMPUTER SCIENCE INTO SCHOOLS","
			<li>To develop a range of key skills in the student and to offer an early taste of teaching to those interested in pursuing it as a career or for other career pathways where public understanding of science is required.</li>
			<li>To help students gain confidence in communicating Computer Science, develop strong organisational and interpersonal skills, and understand how to address the needs of individuals.</li>
			<li>To learn to devise and develop Computer Science projects and teaching methods appropriate to engage the relevant age group they are working with.</li>
			<li>To help inspire a new generation of Computer Scientists as prospective undergraduates by providing role models for school pupils.</li>
			<li>To help teachers convey the excitement of their subject to pupils by showing them the long-term applications of school studies, especially the cross disciplinary relationships of Computer Science.</li>
			<li>To help teachers by providing an assistant who can work with and support pupils at any point on the ability spectrum.</li>
		","
			<li>A competitive interview system will be used to match students with appropriate schools and a specific teacher in the local area, and each student selected will be given a chance to visit the school they will be working in before commencement of the placement.  </li>
			<li>One day training course on working in schools and with pupils.  </li>
			<li>Series of lectures on key transferable skills.  </li>
			<li>The student will be required to spend half a day (approx 4hrs) a week in the school every week for at least 10 weeks.  </li>
			<li>Tutorials which will provide an opportunity for students to share their experiences.  </li>
			<li>The students will be involved in the following activities in support of their learning and teaching:  </li>
			<li>Classroom observation and assistance: Initial contact with the teacher and pupils will be as a classroom assistant, watching how the teacher handles the class, observing the level being taught and the structure of the lesson, and offering practical support to the teacher.  </li>
			<li>Teaching assistance: The teacher will assign the student with actual teaching tasks, which will vary dependent on specific needs and the student's own ability as it develops over the term. This could include for example offering problem-solving coaching to a smaller group of higher ability pupils, or taking the last ten minutes of the lesson for the whole class. The student will have to demonstrate an understanding of how the level of the knowledge of the pupils they are teaching fits in to their overall learning context in other subjects.  </li>
			<li>Whole class teaching: Students will typically be offered, in collaboration with their teachers, at least one opportunity to undertake whole class teaching, albeit that it may be only for a small part of the lesson.  </li>
			<li>University awareness: Students will represent and promote their academic discipline as a potential university choice to pupils across the social and academic range represented at their partner schools.  </li>
			<li>Special projects: The student will devise a special Computer Science project on the basis of discussion with the teacher and module co-ordinator and their own assessment of what will interest the particular pupils they are working with. The student will implement the special project and evaluate it. The student will be required to show that they can analyse a specific teaching problem and devise and prepare appropriately targeted teaching materials, practical demonstrations and basis 'tests' where appropriate.  </li>
			<li>Extra-curricular projects: The student may be supervised by the teacher in helping to run an out-of-timetable activity, such as a lunchtime club or special coaching periods for higher ability pupils. The student will have to demonstrate an ability to think laterally in order to formulate interesting ways to illustrate more difficult scientific concepts.  </li>
			<li>Written reports: The student will keep a journal of their own progress in working in the classroom environment, and they will be asked to prepare a written report on the special project.  </li>
			<li>The teachers will act as the main source of guidance in the schools but, in addition, the students will also be able to discuss progress with the module co-ordinator or a member of the Science Outreach and Engagement Team whenever necessary.</li>
			<li>Solutional methods for computational problems.</li>
		","
				<li>On successful completion of this module students: </li>
				<li>Will be able to assess and devise appropriate ways to communicate a difficult principle or concept.</li>
				<li>Will have gained a broad understanding of many of the key aspects of teaching in schools.</li>
				<li>Will have an advanced understanding of Computer Science through having to explain to others.</li>
				<li>Will have an advanced understanding of the problems of public perception of science.  </li>
			"
Durham_England,COMP3477,"<h2>Durham_England COMP3477</h2><h2>title</h2>COMP3477: 
ALGORITHMIC GAME THEORY<h2>summary</h2>
			<li> The aim of the module is to introduce the student to the notion of a game, relevant concepts, and other basic notions and tools of game theory, as well as the main applications where such concepts are used and applied. </li>
		<h2>content</h2>
			<li>Introduction to Game Theory: what is a game? Strategy, preferences, payoffs. </li>
			<li>Bimatrix games: strategies and payoffs; Nash equilibria.  </li>
			<li>Extensive games with Perfect Information.  </li>
			<li>Mathematical and algorithmic foundations of market equilibria.  </li>
			<li>Routing Games on Networks; Congestion Games.  </li>
			<li>Mechanism design and Combinatorial Auctions.  </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>An understanding of key game theoretic notions and ideas, and their connections to computer science and economics. </li>
				<li>An understanding of the impact of game theory and mechanism design on contemporary applications.  </li>
			","COMP3477: 
ALGORITHMIC GAME THEORY","
			<li> The aim of the module is to introduce the student to the notion of a game, relevant concepts, and other basic notions and tools of game theory, as well as the main applications where such concepts are used and applied. </li>
		","
			<li>Introduction to Game Theory: what is a game? Strategy, preferences, payoffs. </li>
			<li>Bimatrix games: strategies and payoffs; Nash equilibria.  </li>
			<li>Extensive games with Perfect Information.  </li>
			<li>Mathematical and algorithmic foundations of market equilibria.  </li>
			<li>Routing Games on Networks; Congestion Games.  </li>
			<li>Mechanism design and Combinatorial Auctions.  </li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>An understanding of key game theoretic notions and ideas, and their connections to computer science and economics. </li>
				<li>An understanding of the impact of game theory and mechanism design on contemporary applications.  </li>
			"
Durham_England,COMP3487,"<h2>Durham_England COMP3487</h2><h2>title</h2>COMP3487: 
BIOINFORMATICS<h2>summary</h2>
			<li>To introduce students to applications of Computer Science in Biology.</li>
			<li>To introduce students to some important Statistical methods and algorithms.</li>
		<h2>content</h2>
			<li>Dynamic programming algorithms for sequence alignment.</li>
			<li>Efficient heuristic algorithms for sequence alignment.</li>
			<li>Markov Chains and Hidden Markov Models (HMM). </li>
			<li>Expectation-Maximisation algorithm with an application to parameter-estimation in HMM. </li>
			<li>Phylogenetic Trees as a model of Evolution.  </li>
			<li>Maximum parsimony and character-based techniques for tree reconstruction.  </li>
			<li>Distance-based tree reconstruction via neighbour-joining techniques.  </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the basic computational problems in Biology. </li>
				<li>an understanding of some fundamental statistical techniques.  </li>
				<li>an understanding of basic tree-reconstruction algorithms.  </li>
			","COMP3487: 
BIOINFORMATICS","
			<li>To introduce students to applications of Computer Science in Biology.</li>
			<li>To introduce students to some important Statistical methods and algorithms.</li>
		","
			<li>Dynamic programming algorithms for sequence alignment.</li>
			<li>Efficient heuristic algorithms for sequence alignment.</li>
			<li>Markov Chains and Hidden Markov Models (HMM). </li>
			<li>Expectation-Maximisation algorithm with an application to parameter-estimation in HMM. </li>
			<li>Phylogenetic Trees as a model of Evolution.  </li>
			<li>Maximum parsimony and character-based techniques for tree reconstruction.  </li>
			<li>Distance-based tree reconstruction via neighbour-joining techniques.  </li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the basic computational problems in Biology. </li>
				<li>an understanding of some fundamental statistical techniques.  </li>
				<li>an understanding of basic tree-reconstruction algorithms.  </li>
			"
Durham_England,COMP3467,"<h2>Durham_England COMP3467</h2><h2>title</h2>COMP3467: 
ADVANCED COMPUTER SYSTEMS<h2>summary</h2>
			<li> To provide understanding of the relationship between hardware and software, and the design, implementation and verification of hardware and software in these situations.  </li>
			<li>To provide understanding of how performance and security of computer systems are affected by their architecture.</li>
		<h2>content</h2>
			<li> Computer Architecture including current processor characteristics and designs</li>
			<li>instruction set design</li>
			<li>memory systems: cache design and performance</li>
			<li>processor architecture and security</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li> The relationship between Computer Instruction Sets and High Level Programming Languages;  </li>
				<li> Complex performance issues of current computers, and the selection of processors for specific applications;  </li>
			","COMP3467: 
ADVANCED COMPUTER SYSTEMS","
			<li> To provide understanding of the relationship between hardware and software, and the design, implementation and verification of hardware and software in these situations.  </li>
			<li>To provide understanding of how performance and security of computer systems are affected by their architecture.</li>
		","
			<li> Computer Architecture including current processor characteristics and designs</li>
			<li>instruction set design</li>
			<li>memory systems: cache design and performance</li>
			<li>processor architecture and security</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li> The relationship between Computer Instruction Sets and High Level Programming Languages;  </li>
				<li> Complex performance issues of current computers, and the selection of processors for specific applications;  </li>
			"
Durham_England,COMP3491,"<h2>Durham_England COMP3491</h2><h2>title</h2>COMP3491: 
CODES AND CRYPTOGRAPHY<h2>summary</h2>
			<li>To give an introduction to the fundamental steps of a digital communication system: compression/decompression, encryption/decryption, error control coding/decoding </li>
			<li>To give an introduction to the theoretical limitations of those steps via information theory understand the information theoretic limitations of the three domains above  </li>
		<h2>content</h2>
			<li>Data compression: lossless compression such as Huffman and Lempel-Ziv, lossy compression such as transform coding and wavelet compression </li>
			<li>Cryptography: block ciphers, hash functions, public key cryptography, signature schemes, lattice-based cryptography  </li>
			<li>Error-correcting codes: linear codes including Hamming codes, BCH and Reed-Solomon codes, code-based cryptography</li>
			<li>Information Theory: Entropy, channel capacity, data compression, information-theoretic cryptography </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the theory and practice of data compression, cryptography, and error-correcting codes </li>
				<li>an understanding of the main results of information theory  </li>
			","COMP3491: 
CODES AND CRYPTOGRAPHY","
			<li>To give an introduction to the fundamental steps of a digital communication system: compression/decompression, encryption/decryption, error control coding/decoding </li>
			<li>To give an introduction to the theoretical limitations of those steps via information theory understand the information theoretic limitations of the three domains above  </li>
		","
			<li>Data compression: lossless compression such as Huffman and Lempel-Ziv, lossy compression such as transform coding and wavelet compression </li>
			<li>Cryptography: block ciphers, hash functions, public key cryptography, signature schemes, lattice-based cryptography  </li>
			<li>Error-correcting codes: linear codes including Hamming codes, BCH and Reed-Solomon codes, code-based cryptography</li>
			<li>Information Theory: Entropy, channel capacity, data compression, information-theoretic cryptography </li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the theory and practice of data compression, cryptography, and error-correcting codes </li>
				<li>an understanding of the main results of information theory  </li>
			"
Durham_England,COMP3507,"<h2>Durham_England COMP3507</h2><h2>title</h2>COMP3507: 
COMPUTATIONAL COMPLEXITY<h2>summary</h2>
			<li>The aim of the module is to equip students with the ability to ability to formalise and reason about the complexity of computational problems as well as to identify barriers to efficient computations.</li>
		<h2>content</h2>
			<li>The content will be chosen from the following topics:</li>
			<li>Time complexity and space complexity of computational problems</li>
			<li>Complexity of optimisation and approximation</li>
			<li>Parameterised complexity</li>
			<li>Circuit complexity</li>
			<li>Complexity and cryptography</li>
			<li>Complexity of randomised computation</li>
			<li>Descriptive complexity</li>
		<h2>ilo</h2>
				<li>On completion of this module, students will be able to demonstrate:</li>
				<li>an understanding of the inherent limitations of computation through appreciation of the topic areas;</li>
				<li>an appreciation of different ways to measure and reason about the complexity of computation;</li>
				<li>a knowledge about various important problem solving paradigms in the broad area of algorithms and complexity.</li>
			","COMP3507: 
COMPUTATIONAL COMPLEXITY","
			<li>The aim of the module is to equip students with the ability to ability to formalise and reason about the complexity of computational problems as well as to identify barriers to efficient computations.</li>
		","
			<li>The content will be chosen from the following topics:</li>
			<li>Time complexity and space complexity of computational problems</li>
			<li>Complexity of optimisation and approximation</li>
			<li>Parameterised complexity</li>
			<li>Circuit complexity</li>
			<li>Complexity and cryptography</li>
			<li>Complexity of randomised computation</li>
			<li>Descriptive complexity</li>
		","
				<li>On completion of this module, students will be able to demonstrate:</li>
				<li>an understanding of the inherent limitations of computation through appreciation of the topic areas;</li>
				<li>an appreciation of different ways to measure and reason about the complexity of computation;</li>
				<li>a knowledge about various important problem solving paradigms in the broad area of algorithms and complexity.</li>
			"
Durham_England,COMP3517,"<h2>Durham_England COMP3517</h2><h2>title</h2>COMP3517: 
COMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES<h2>summary</h2>
			<li>To enable students to understand and critically evaluate the application of computational modelling&nbsp;to problems in the humanities and social sciences.</li>
			<li>To introduce students to algorithms and approaches relevant to the modelling of humanities and social science data.</li>
		<h2>content</h2>
			<li>Computational models of text and language</li>
			<li>Text and data mining</li>
			<li>Critical evaluation of computational models</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of how computational modelling can be applied to humanities and social science research</li>
				<li>an understanding of computational approaches to modelling text</li>
				<li>an understanding of data mining techniques.</li>
			","COMP3517: 
COMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES","
			<li>To enable students to understand and critically evaluate the application of computational modelling&nbsp;to problems in the humanities and social sciences.</li>
			<li>To introduce students to algorithms and approaches relevant to the modelling of humanities and social science data.</li>
		","
			<li>Computational models of text and language</li>
			<li>Text and data mining</li>
			<li>Critical evaluation of computational models</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of how computational modelling can be applied to humanities and social science research</li>
				<li>an understanding of computational approaches to modelling text</li>
				<li>an understanding of data mining techniques.</li>
			"
Durham_England,COMP3527,"<h2>Durham_England COMP3527</h2><h2>title</h2>COMP3527: 
COMPUTER VISION<h2>summary</h2>
			<li>To enable students to critically evaluate the development of computer vision solutions across existing and emerging technology areas. </li>
			<li>To enable students to understand and evaluate general image and video understanding themes across relevant application areas, focusing on relevant case studies.</li>
			<li>To understand and apply the fundamental principles of applied computer vision solutions to a range of real world problems.</li>
		<h2>content</h2>
			<li>Themes will be chosen from contemporary areas of computer vision including the following:</li>
			<li>edge features, contours and shape fitting. </li>
			<li>feature points for object detection and classification. </li>
			<li>stereo vision (3D point clouds and depth images). </li>
			<li>object classification using distributions of gradient information. </li>
			<li>background modelling and object tracking. </li>
			<li>end-to-end image classification and real-time object detection via deep machine learning. </li>
			<li>image and video mosaicking and 3D scene reconstruction. </li>
			<li>visual odometry for autonomous navigation. </li>
		<h2>ilo</h2>
				<li>On completion of this module, students will be able to demonstrate an in-depth knowledge of the contemporary computer vision topics presented,
					how these are applicable to relevant industrial problems and have future potential for emerging needs in both a research and industrial setting.
				</li>
			","COMP3527: 
COMPUTER VISION","
			<li>To enable students to critically evaluate the development of computer vision solutions across existing and emerging technology areas. </li>
			<li>To enable students to understand and evaluate general image and video understanding themes across relevant application areas, focusing on relevant case studies.</li>
			<li>To understand and apply the fundamental principles of applied computer vision solutions to a range of real world problems.</li>
		","
			<li>Themes will be chosen from contemporary areas of computer vision including the following:</li>
			<li>edge features, contours and shape fitting. </li>
			<li>feature points for object detection and classification. </li>
			<li>stereo vision (3D point clouds and depth images). </li>
			<li>object classification using distributions of gradient information. </li>
			<li>background modelling and object tracking. </li>
			<li>end-to-end image classification and real-time object detection via deep machine learning. </li>
			<li>image and video mosaicking and 3D scene reconstruction. </li>
			<li>visual odometry for autonomous navigation. </li>
		","
				<li>On completion of this module, students will be able to demonstrate an in-depth knowledge of the contemporary computer vision topics presented,
					how these are applicable to relevant industrial problems and have future potential for emerging needs in both a research and industrial setting.
				</li>
			"
Durham_England,COMP3547,"<h2>Durham_England COMP3547</h2><h2>title</h2>COMP3547: 
DEEP LEARNING<h2>summary</h2>
			<li>To enable students to be able to approach complex ill-defined problems that require deep layers of learning, and understand how this relates to learning in nature.</li>
			<li>To equip students with the ability to use modern deep learning libraries in order to effectively design, train, and test neural networks in different applications.</li>
		<h2>content</h2>
			<li>Foundations of deep learning and learning in nature</li>
			<li>PyTorch programming</li>
			<li>Designing deep neural network architectures</li>
			<li>Adversarial models</li>
			<li>Energy-based models and Flow models</li>
			<li>Sequential models and Transformers</li>
			<li>Implicit representations</li>
			<li>Generalisation theory</li>
			<li>Meta and manifold learning</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate:</li>
				<li>an understanding of state-of-the-art deep neural network architectures and neural network architecture components.</li>
				<li>an understanding of statistical learning theory with deep learning approaches.</li>
				<li>an understanding of the algorithms and approaches to design and evaluate deep neural networks.</li>
			","COMP3547: 
DEEP LEARNING","
			<li>To enable students to be able to approach complex ill-defined problems that require deep layers of learning, and understand how this relates to learning in nature.</li>
			<li>To equip students with the ability to use modern deep learning libraries in order to effectively design, train, and test neural networks in different applications.</li>
		","
			<li>Foundations of deep learning and learning in nature</li>
			<li>PyTorch programming</li>
			<li>Designing deep neural network architectures</li>
			<li>Adversarial models</li>
			<li>Energy-based models and Flow models</li>
			<li>Sequential models and Transformers</li>
			<li>Implicit representations</li>
			<li>Generalisation theory</li>
			<li>Meta and manifold learning</li>
		","
				<li>On completion of the module, students will be able to demonstrate:</li>
				<li>an understanding of state-of-the-art deep neural network architectures and neural network architecture components.</li>
				<li>an understanding of statistical learning theory with deep learning approaches.</li>
				<li>an understanding of the algorithms and approaches to design and evaluate deep neural networks.</li>
			"
Durham_England,COMP3557,"<h2>Durham_England COMP3557</h2><h2>title</h2>COMP3557: 
DESIGN OF ALGORITHMS AND DATA STRUCTURES<h2>summary</h2>
			<li>The aim of the module is to equip students with the ability to design and analyse efficient algorithms and data structures.</li>
		<h2>content</h2>
			<li> To be chosen from the following: </li>
			<li> hashing (universal, perfect, Cuckoo, Bloom filters) </li>
			<li> treaps </li>
			<li> skip lists </li>
			<li> splay trees </li>
			<li> basic models and algorithms for sub-linear space (streaming) </li>
			<li> basic models and algorithms for sub-linear time (e.g., property testing) </li>
			<li> basic PRAM (shared-memory parallel) algorithms and techniques </li>
		<h2>ilo</h2>
				<li> On completion of the module, students will be able to demonstrate: </li>
				<li> a knowledge about various important problem solving paradigms in the broad area of algorithmic design. </li>
				<li> an understanding of how to measure, transfer and handle data </li>
				<li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems; </li>
				<li> an ability to conduct review and self-study to further their knowledge beyond the taught material. </li>
			","COMP3557: 
DESIGN OF ALGORITHMS AND DATA STRUCTURES","
			<li>The aim of the module is to equip students with the ability to design and analyse efficient algorithms and data structures.</li>
		","
			<li> To be chosen from the following: </li>
			<li> hashing (universal, perfect, Cuckoo, Bloom filters) </li>
			<li> treaps </li>
			<li> skip lists </li>
			<li> splay trees </li>
			<li> basic models and algorithms for sub-linear space (streaming) </li>
			<li> basic models and algorithms for sub-linear time (e.g., property testing) </li>
			<li> basic PRAM (shared-memory parallel) algorithms and techniques </li>
		","
				<li> On completion of the module, students will be able to demonstrate: </li>
				<li> a knowledge about various important problem solving paradigms in the broad area of algorithmic design. </li>
				<li> an understanding of how to measure, transfer and handle data </li>
				<li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems; </li>
				<li> an ability to conduct review and self-study to further their knowledge beyond the taught material. </li>
			"
Durham_England,COMP3567,"<h2>Durham_England COMP3567</h2><h2>title</h2>COMP3567: 
MULTIMEDIA AND GAME DEVELOPMENT<h2>summary</h2>
			<li>To introduce students to the methods and techniques of effective game development and the principles and practices of modern multimedia technologies.</li>
		<h2>content</h2>
			<li>Game design and mechanics.</li>
			<li>Game engine and programming.</li>
			<li>Game physics and autonomous object motions.</li>
			<li>Visual and audial media representations.</li>
			<li>Media compression, quality optimisation and assessment.</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the technologies used in developing different types of games.</li>
				<li>an understanding of using suitable programming tools to implement games.</li>
				<li>an understanding of the technologies used in representing, processing and optimizing multimedia contents.</li>
			","COMP3567: 
MULTIMEDIA AND GAME DEVELOPMENT","
			<li>To introduce students to the methods and techniques of effective game development and the principles and practices of modern multimedia technologies.</li>
		","
			<li>Game design and mechanics.</li>
			<li>Game engine and programming.</li>
			<li>Game physics and autonomous object motions.</li>
			<li>Visual and audial media representations.</li>
			<li>Media compression, quality optimisation and assessment.</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the technologies used in developing different types of games.</li>
				<li>an understanding of using suitable programming tools to implement games.</li>
				<li>an understanding of the technologies used in representing, processing and optimizing multimedia contents.</li>
			"
Durham_England,COMP3577,"<h2>Durham_England COMP3577</h2><h2>title</h2>COMP3577: 
PARALLEL SCIENTIFIC COMPUTING I<h2>summary</h2>
			<li>Introduce scientific computing techniques for the numerical solution of problems in science and engineering</li>
			<li>Introduce and familiarise students with parallel programming approaches in scientific computing</li>
		<h2>content</h2>
			<li>Fundamentals of numerical algorithms for ordinary differential equations.</li>
			<li>Explicit time discretion techniques for ordinary differential equations.</li>
			<li>Notions of error and stability analysis.</li>
			<li>Approaches to programming for multiple processing units using shared memory.</li>
			<li>Data parallel programming paradigms</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of typical approaches to the numerical solution of problems in science and engineering.</li>
				<li>a knowledge and appreciation of some of the research challenges in scientific computing </li>
				<li>understanding of basic parallelisation strategies and when to apply them</li>
			","COMP3577: 
PARALLEL SCIENTIFIC COMPUTING I","
			<li>Introduce scientific computing techniques for the numerical solution of problems in science and engineering</li>
			<li>Introduce and familiarise students with parallel programming approaches in scientific computing</li>
		","
			<li>Fundamentals of numerical algorithms for ordinary differential equations.</li>
			<li>Explicit time discretion techniques for ordinary differential equations.</li>
			<li>Notions of error and stability analysis.</li>
			<li>Approaches to programming for multiple processing units using shared memory.</li>
			<li>Data parallel programming paradigms</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of typical approaches to the numerical solution of problems in science and engineering.</li>
				<li>a knowledge and appreciation of some of the research challenges in scientific computing </li>
				<li>understanding of basic parallelisation strategies and when to apply them</li>
			"
Durham_England,COMP3587,"<h2>Durham_England COMP3587</h2><h2>title</h2>COMP3587: 
PROJECT MANAGEMENT<h2>summary</h2>
			<li>To understand and practice well established project management techniques required for the development of a significant piece of software within a team environment</li>
		<h2>content</h2>
			<li>Project management frameworks and application</li>
			<li>Leadership and innovation</li>
			<li>Managing change</li>
			<li>Practical management skills</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to: </li>
				<li>Compose a project management plan</li>
				<li>Assess project management frameworks and evaluate their appropriateness</li>
				<li>Evaluate leadership success</li>
				<li>
			</li>","COMP3587: 
PROJECT MANAGEMENT","
			<li>To understand and practice well established project management techniques required for the development of a significant piece of software within a team environment</li>
		","
			<li>Project management frameworks and application</li>
			<li>Leadership and innovation</li>
			<li>Managing change</li>
			<li>Practical management skills</li>
		","
				<li>On completion of the module, students will be able to: </li>
				<li>Compose a project management plan</li>
				<li>Assess project management frameworks and evaluate their appropriateness</li>
				<li>Evaluate leadership success</li>
				<li>
			</li>"
Durham_England,COMP3607,"<h2>Durham_England COMP3607</h2><h2>title</h2>COMP3607: 
RECOMMENDER SYSTEMS<h2>summary</h2>
			<li>Have you ever wondered how Netflix, YouTube, Amazon or Spotify make suggestions for which content next to view? </li>
			<li>In this module, we will look at the inner workings of recommender systems;</li>
			<li>explore developing user profiles based on demographics, preferences, context, etc.;</li>
			<li>and put to practice approaches to predict the ""best"" content to recommend to an individual user.</li>
		<h2>content</h2>
			<li>Non-personalised recommenders</li>
			<li>Content-based filtering</li>
			<li>Collaborative filtering</li>
			<li>Context-aware recommenders</li>
			<li>Other RS types, e.g.: hybrid and group</li>
			<li>Evaluation methods</li>
			<li>Ethical issues in recommender systems</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the different types of recommender systems, their purpose and domains of application</li>
				<li>an understanding of recommender system users: usage behaviour, demographics, preferences, contextual information</li>
				<li>an in-depth knowledge of recommender system algorithms, specifically non-personalised, content-based and collaborative filtering, hybrid techniques and context-aware recommenders</li>
				<li>an understanding of recommender system evaluation methods.</li>
			","COMP3607: 
RECOMMENDER SYSTEMS","
			<li>Have you ever wondered how Netflix, YouTube, Amazon or Spotify make suggestions for which content next to view? </li>
			<li>In this module, we will look at the inner workings of recommender systems;</li>
			<li>explore developing user profiles based on demographics, preferences, context, etc.;</li>
			<li>and put to practice approaches to predict the ""best"" content to recommend to an individual user.</li>
		","
			<li>Non-personalised recommenders</li>
			<li>Content-based filtering</li>
			<li>Collaborative filtering</li>
			<li>Context-aware recommenders</li>
			<li>Other RS types, e.g.: hybrid and group</li>
			<li>Evaluation methods</li>
			<li>Ethical issues in recommender systems</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the different types of recommender systems, their purpose and domains of application</li>
				<li>an understanding of recommender system users: usage behaviour, demographics, preferences, contextual information</li>
				<li>an in-depth knowledge of recommender system algorithms, specifically non-personalised, content-based and collaborative filtering, hybrid techniques and context-aware recommenders</li>
				<li>an understanding of recommender system evaluation methods.</li>
			"
Durham_England,COMP3617,"<h2>Durham_England COMP3617</h2><h2>title</h2>COMP3617: 
VIRTUAL AND AUGMENTED REALITY<h2>summary</h2>
			<li>This course will introduce the principles of Virtual and Augmented Reality (VR/AR) technologies including optics, displays, rendering techniques, visual perception, tracking, interaction, current challenges, applications and major hardware and software platforms.</li>
		<h2>content</h2>
			<li>Introduction: history of VR/AR development, overview of computer graphics, the graphics pipeline, applications in education, communication, medical, entertainment, manufacturing, shopping.</li>
			<li>VR/AR hardware: displays, physics of light, optics, electronics, microcontrollers, VR head-mounted displays, CAVEs, controllers, interfaces, major hardware platforms.</li>
			<li>VR/AR software: stereo rendering for VR/AR, lens distortion shaders, auditory rendering, major software platforms.</li>
			<li>Human perception: visual, auditory, vestibular, tactile.</li>
			<li>Tracking: head-tracking, inertial measurement units, gyros, accelerometers, magnetometers, sensor fusion, complementary filter, etc.</li>
			<li>Interaction and moving in VR: ergonomics, comfort, 3D interaction design, 3DUIs, perceptual requirements, affordances in VR, user input, physical navigation, redirected walking.</li>
			<li>Presence: virtual embodiment.</li>
			<li>Challenges in VR: simulator sickness, visual discomfort, realism, content, navigation, haptic feedback.</li>
			<li>AR specific topics: object tracking, geolocation.</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>An in-depth knowledge of theory and techniques driving the design of Virtual and Augmented Reality hardware and software. </li>
			","COMP3617: 
VIRTUAL AND AUGMENTED REALITY","
			<li>This course will introduce the principles of Virtual and Augmented Reality (VR/AR) technologies including optics, displays, rendering techniques, visual perception, tracking, interaction, current challenges, applications and major hardware and software platforms.</li>
		","
			<li>Introduction: history of VR/AR development, overview of computer graphics, the graphics pipeline, applications in education, communication, medical, entertainment, manufacturing, shopping.</li>
			<li>VR/AR hardware: displays, physics of light, optics, electronics, microcontrollers, VR head-mounted displays, CAVEs, controllers, interfaces, major hardware platforms.</li>
			<li>VR/AR software: stereo rendering for VR/AR, lens distortion shaders, auditory rendering, major software platforms.</li>
			<li>Human perception: visual, auditory, vestibular, tactile.</li>
			<li>Tracking: head-tracking, inertial measurement units, gyros, accelerometers, magnetometers, sensor fusion, complementary filter, etc.</li>
			<li>Interaction and moving in VR: ergonomics, comfort, 3D interaction design, 3DUIs, perceptual requirements, affordances in VR, user input, physical navigation, redirected walking.</li>
			<li>Presence: virtual embodiment.</li>
			<li>Challenges in VR: simulator sickness, visual discomfort, realism, content, navigation, haptic feedback.</li>
			<li>AR specific topics: object tracking, geolocation.</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>An in-depth knowledge of theory and techniques driving the design of Virtual and Augmented Reality hardware and software. </li>
			"
Durham_England,COMP3621,"<h2>Durham_England COMP3621</h2><h2>title</h2>COMP3621: 
Public Engagement in Computer Science<h2>summary</h2>
			<li>This module is designed primarily for students studying Department of Computer Science or Natural Sciences degree programmes.</li>
			<li>To provide experience of a research-led public engagement project in Computer Science.</li>
			<li>To allow students to make an in-depth study of a particular topic in Computer Science, to undertake extensive independent research and to write at length on their chosen subject in the context of public engagement.</li>
			<li>To develop a range of transferable skills in researching a topic in the context of public engagement and making oral and written presentations on their work.</li>
			<li>To learn to devise and develop Computer Science projects and public engagement methods appropriate to the chosen topic and relevant audience(s).  </li>
		<h2>content</h2>
			<li>Project: A research-led public engagement project, set in collaboration with members of staff from the Department, and possibly with an external partner, allowing students to present the results of individual and independent work (note: an original contribution to scientific knowledge is not required or expected).</li>
			<li>The student will implement and evaluate the project. The student will be required to show that they can analyse a specific public engagement problem and devise and develop an appropriate public engagement approach to address that specific problem.</li>
			<li>Students will choose from a wide list of broad possible topics. Each student will be assigned a member of staff as supervisor. Students will devise their own approach to researching and communicating their subject with advice from their supervisor. As part of their work they will be expected to address some of the specific aspects of their subject with the agreement of the supervisor. Students will be expected to work independently, to manage the direction of their work and to employ a significant component of self-directed learning.</li>
			<li>Reflective practice: The student will keep a reflective journal of activity and produce an executive summary of that journal, summarising and communicating their reflective practice in relation to their project.</li>
			<li>Transferable skills including time-management, presentation, communication, organisation, prioritisation and negotiation skills.  </li>
		<h2>ilo</h2>
				<li>Having studied this module, students:</li>
				<li>Will have formed a detailed appreciation of the science related to a particular topic.</li>
				<li>Will be able to assess and devise appropriate ways to communicate a difficult principle or concept.</li>
				<li>Will have gained a broad understanding of many of the key aspects of public engagement.  </li>
			","COMP3621: 
Public Engagement in Computer Science","
			<li>This module is designed primarily for students studying Department of Computer Science or Natural Sciences degree programmes.</li>
			<li>To provide experience of a research-led public engagement project in Computer Science.</li>
			<li>To allow students to make an in-depth study of a particular topic in Computer Science, to undertake extensive independent research and to write at length on their chosen subject in the context of public engagement.</li>
			<li>To develop a range of transferable skills in researching a topic in the context of public engagement and making oral and written presentations on their work.</li>
			<li>To learn to devise and develop Computer Science projects and public engagement methods appropriate to the chosen topic and relevant audience(s).  </li>
		","
			<li>Project: A research-led public engagement project, set in collaboration with members of staff from the Department, and possibly with an external partner, allowing students to present the results of individual and independent work (note: an original contribution to scientific knowledge is not required or expected).</li>
			<li>The student will implement and evaluate the project. The student will be required to show that they can analyse a specific public engagement problem and devise and develop an appropriate public engagement approach to address that specific problem.</li>
			<li>Students will choose from a wide list of broad possible topics. Each student will be assigned a member of staff as supervisor. Students will devise their own approach to researching and communicating their subject with advice from their supervisor. As part of their work they will be expected to address some of the specific aspects of their subject with the agreement of the supervisor. Students will be expected to work independently, to manage the direction of their work and to employ a significant component of self-directed learning.</li>
			<li>Reflective practice: The student will keep a reflective journal of activity and produce an executive summary of that journal, summarising and communicating their reflective practice in relation to their project.</li>
			<li>Transferable skills including time-management, presentation, communication, organisation, prioritisation and negotiation skills.  </li>
		","
				<li>Having studied this module, students:</li>
				<li>Will have formed a detailed appreciation of the science related to a particular topic.</li>
				<li>Will be able to assess and devise appropriate ways to communicate a difficult principle or concept.</li>
				<li>Will have gained a broad understanding of many of the key aspects of public engagement.  </li>
			"
Durham_England,COMP3637,"<h2>Durham_England COMP3637</h2><h2>title</h2>COMP3637: 
Compiler Design<h2>summary</h2>
			<li>To understand how a compiler for a high-level programming language works.</li>
			<li>Develop implementation skills for writing practical components of a compiler, including parsing, analysis, code generation, and optimisation.</li>
			<li>Appreciate how the design of programming languages is affected by compiler considerations.</li>
			<li>Implement a compiler for a high-level programming language.</li>
		<h2>content</h2>
			<li>Compiler frontend: Foundations of compiler theory and techniques for lexical analysis,  syntax analysis and semantic analysis.</li>
			<li>Compiler backend: Intermediate representations (IRs), optimisation on IRs, machine  code generation and register allocation.</li>
		<h2>ilo</h2>
				<li>An understanding of the theory and practice of compiler design.</li>
			","COMP3637: 
Compiler Design","
			<li>To understand how a compiler for a high-level programming language works.</li>
			<li>Develop implementation skills for writing practical components of a compiler, including parsing, analysis, code generation, and optimisation.</li>
			<li>Appreciate how the design of programming languages is affected by compiler considerations.</li>
			<li>Implement a compiler for a high-level programming language.</li>
		","
			<li>Compiler frontend: Foundations of compiler theory and techniques for lexical analysis,  syntax analysis and semantic analysis.</li>
			<li>Compiler backend: Intermediate representations (IRs), optimisation on IRs, machine  code generation and register allocation.</li>
		","
				<li>An understanding of the theory and practice of compiler design.</li>
			"
Durham_England,COMP3647,"<h2>Durham_England COMP3647</h2><h2>title</h2>COMP3647: 
Human-AI Interaction Design<h2>summary</h2>
			<li>To discuss how the design of Human-AI interactions may affect user experience.</li>
			<li>To introduce methods and tools for designing interactive AI systems.</li>
			<li>To develop ethical and societal principles in the design of interactive AI systems.</li>
		<h2>content</h2>
			<li>AI and User Experience</li>
			<li>Human-Centred AI Design</li>
			<li>Human-AI Communication Channels</li>
			<li>Inclusive Design and Digital Accessibility</li>
			<li>Explainable AI and Building Trust</li>
			<li>Privacy and Security Considerations</li>
			<li>Affective Design for Interactive AI</li>
			<li>Psychophysical Methods</li>
			<li>Ambient Intelligence</li>
			<li>Applications (e.g. gaming, healthcare, education, finance, automotive vehicles, etc.)  </li>
		<h2>ilo</h2>
				<li>An understanding of impacts of interactive AI system design on user experience.</li>
				<li>An understanding of concepts and principles of Human-AI interaction design. </li>
			","COMP3647: 
Human-AI Interaction Design","
			<li>To discuss how the design of Human-AI interactions may affect user experience.</li>
			<li>To introduce methods and tools for designing interactive AI systems.</li>
			<li>To develop ethical and societal principles in the design of interactive AI systems.</li>
		","
			<li>AI and User Experience</li>
			<li>Human-Centred AI Design</li>
			<li>Human-AI Communication Channels</li>
			<li>Inclusive Design and Digital Accessibility</li>
			<li>Explainable AI and Building Trust</li>
			<li>Privacy and Security Considerations</li>
			<li>Affective Design for Interactive AI</li>
			<li>Psychophysical Methods</li>
			<li>Ambient Intelligence</li>
			<li>Applications (e.g. gaming, healthcare, education, finance, automotive vehicles, etc.)  </li>
		","
				<li>An understanding of impacts of interactive AI system design on user experience.</li>
				<li>An understanding of concepts and principles of Human-AI interaction design. </li>
			"
Durham_England,COMP3657,"<h2>Durham_England COMP3657</h2><h2>title</h2>COMP3657: 
Security Engineering<h2>summary</h2>
			<li>To understand security protocol design and analysis, security architectures, cryptographic protocols and security considerations in various environments such as software, web and hardware infrastructures.</li>
		<h2>content</h2>
			<li>Secure systems and architecture: principles of architecting a secure system.</li>
			<li>System evaluation and assurance: threat models and ways to distinguish various attacks.</li>
			<li>Cryptographic protocols: the role of cryptographic primitives in secure systems.</li>
			<li>Security protocols: mechanisms that enforce policy using cryptography and structured human interaction together with verification and validation processes.</li>
			<li>Secure communications: principles of secure networks together with mechanisms to maintain secrecy, integrity and authenticity in connected systems.</li>
			<li>Software-based security: principles of secure coding, the origin of vulnerabilities, reverse-engineering and code obfuscation.</li>
			<li>Hardware-based security: mechanisms to protect physical components in different platforms such as mobile, PC or IoT.  </li>
		<h2>ilo</h2>
				<li>An understanding of cryptographic primitives.</li>
				<li>A basic understanding of various communication platforms (such as network, IoT, web, etc.).</li>
				<li>An understanding of operating system principles.</li>
				<li>An understanding of programming languages and compiler design.</li>
			","COMP3657: 
Security Engineering","
			<li>To understand security protocol design and analysis, security architectures, cryptographic protocols and security considerations in various environments such as software, web and hardware infrastructures.</li>
		","
			<li>Secure systems and architecture: principles of architecting a secure system.</li>
			<li>System evaluation and assurance: threat models and ways to distinguish various attacks.</li>
			<li>Cryptographic protocols: the role of cryptographic primitives in secure systems.</li>
			<li>Security protocols: mechanisms that enforce policy using cryptography and structured human interaction together with verification and validation processes.</li>
			<li>Secure communications: principles of secure networks together with mechanisms to maintain secrecy, integrity and authenticity in connected systems.</li>
			<li>Software-based security: principles of secure coding, the origin of vulnerabilities, reverse-engineering and code obfuscation.</li>
			<li>Hardware-based security: mechanisms to protect physical components in different platforms such as mobile, PC or IoT.  </li>
		","
				<li>An understanding of cryptographic primitives.</li>
				<li>A basic understanding of various communication platforms (such as network, IoT, web, etc.).</li>
				<li>An understanding of operating system principles.</li>
				<li>An understanding of programming languages and compiler design.</li>
			"
Durham_England,COMP3667,"<h2>Durham_England COMP3667</h2><h2>title</h2>COMP3667: 
REINFORCEMENT LEARNING<h2>summary</h2>
			<li>To understand computational models of learning in dynamic environments.</li>
			<li>Learning how to plan and design agents with intelligent behaviour, taking actions to control the environment and maximise cumulative future rewards. </li>
		<h2>content</h2>
			<li>Introduction to reinforcement learning.</li>
			<li>Markov decision processes and planning by dynamic programming.</li>
			<li>Model free prediction and control.</li>
			<li>Value-based and policy-based reinforcement learning.</li>
			<li>Scaling up reinforcement learning approaches with deep learning.</li>
			<li>Integrating learning and planning, and balancing exploration/exploitation.</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the key features of reinforcement learning and differences with non-interactive learning.</li>
				<li>an understanding of state-of-the-art reinforcement learning algorithms. </li>
				<li>an understanding of the issues faced in scaling reinforcement learning approaches using deep learning. </li>
			","COMP3667: 
REINFORCEMENT LEARNING","
			<li>To understand computational models of learning in dynamic environments.</li>
			<li>Learning how to plan and design agents with intelligent behaviour, taking actions to control the environment and maximise cumulative future rewards. </li>
		","
			<li>Introduction to reinforcement learning.</li>
			<li>Markov decision processes and planning by dynamic programming.</li>
			<li>Model free prediction and control.</li>
			<li>Value-based and policy-based reinforcement learning.</li>
			<li>Scaling up reinforcement learning approaches with deep learning.</li>
			<li>Integrating learning and planning, and balancing exploration/exploitation.</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the key features of reinforcement learning and differences with non-interactive learning.</li>
				<li>an understanding of state-of-the-art reinforcement learning algorithms. </li>
				<li>an understanding of the issues faced in scaling reinforcement learning approaches using deep learning. </li>
			"
Durham_England,COMP3677,"<h2>Durham_England COMP3677</h2><h2>title</h2>COMP3677: 
NATURAL COMPUTING ALGORITHMS<h2>summary</h2>
			<li>To give students an understanding of how systems and phenomena that occur in the natural world can inspire the development of new computational algorithms relevant to modern-day artificial intelligence.     </li>
			<li>To equip students with a range of natural algorithmic paradigms and techniques that can be widely applied in real-world problem solving.     </li>
			<li>To enable students to implement, apply, analyse and experiment with natural algorithms to solve real-world problems. </li>
		<h2>content</h2>
			<li>An introduction to some of the facets of Natural Computing.     </li>
			<li>Specific algorithms will be drawn from some of the following paradigms (with illustrative examples of the algorithms that these paradigms encompass):     </li>
			<li>evolutionary computing (genetic algorithms, evolution strategies, differential evolution)     </li>
			<li>social computing (particle swarm optimizations, ant colony algorithms, bee foraging algorithms, glow-worm algorithms, bat algorithms)     </li>
			<li>immunocomputing (artificial immune systems, dendritic cell algorithms, clonal expansion algorithms)      </li>
			<li>developmental and grammatical computing (Lindenmayer systems, grammatical evolution algorithms, tree-adjoining grammars)     </li>
			<li>physical computing (simulated annealing, DNA computing, self-assembly systems). </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate:     </li>
				<li>an understanding of how systems and phenomena from the natural world inspire new computational algorithms     </li>
				<li>an understanding of a range of different paradigms and algorithms inspired by systems and phenomena from the natural world     </li>
				<li>an understanding of the data structures and methodologies required to implement these algorithms. </li>
			","COMP3677: 
NATURAL COMPUTING ALGORITHMS","
			<li>To give students an understanding of how systems and phenomena that occur in the natural world can inspire the development of new computational algorithms relevant to modern-day artificial intelligence.     </li>
			<li>To equip students with a range of natural algorithmic paradigms and techniques that can be widely applied in real-world problem solving.     </li>
			<li>To enable students to implement, apply, analyse and experiment with natural algorithms to solve real-world problems. </li>
		","
			<li>An introduction to some of the facets of Natural Computing.     </li>
			<li>Specific algorithms will be drawn from some of the following paradigms (with illustrative examples of the algorithms that these paradigms encompass):     </li>
			<li>evolutionary computing (genetic algorithms, evolution strategies, differential evolution)     </li>
			<li>social computing (particle swarm optimizations, ant colony algorithms, bee foraging algorithms, glow-worm algorithms, bat algorithms)     </li>
			<li>immunocomputing (artificial immune systems, dendritic cell algorithms, clonal expansion algorithms)      </li>
			<li>developmental and grammatical computing (Lindenmayer systems, grammatical evolution algorithms, tree-adjoining grammars)     </li>
			<li>physical computing (simulated annealing, DNA computing, self-assembly systems). </li>
		","
				<li>On completion of the module, students will be able to demonstrate:     </li>
				<li>an understanding of how systems and phenomena from the natural world inspire new computational algorithms     </li>
				<li>an understanding of a range of different paradigms and algorithms inspired by systems and phenomena from the natural world     </li>
				<li>an understanding of the data structures and methodologies required to implement these algorithms. </li>
			"
Durham_England,COMP4087,"<h2>Durham_England COMP4087</h2><h2>title</h2>COMP4087: 
ADVANCED ALGORITHMS<h2>summary</h2>
			<li>To give students a deeper knowledge of algorithmic solutions for typical computer science problems.</li>
			<li>To extend the students' knowledge of the latest advances in understanding the limits of computation and the ways of coping with computational hardness.</li>
		<h2>content</h2>
			<li>Algorithms: approximation, exact, fixed parameter tractable, polynomial</li>
			<li>Input restrictions: hereditary and intersection graph classes</li>
			<li>Graph width</li>
			<li>Graph containment relations</li>
			<li>Graph reconfiguration</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>a comprehensive understanding of how the theory of computation is applied in the design of algorithms</li>
				<li>a critical evaluation of different approaches to the algorithmic solution for computationally hard problems</li>
				<li>a critical awareness of some of the latest advances in research on theoretical aspects of computation</li>
			","COMP4087: 
ADVANCED ALGORITHMS","
			<li>To give students a deeper knowledge of algorithmic solutions for typical computer science problems.</li>
			<li>To extend the students' knowledge of the latest advances in understanding the limits of computation and the ways of coping with computational hardness.</li>
		","
			<li>Algorithms: approximation, exact, fixed parameter tractable, polynomial</li>
			<li>Input restrictions: hereditary and intersection graph classes</li>
			<li>Graph width</li>
			<li>Graph containment relations</li>
			<li>Graph reconfiguration</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>a comprehensive understanding of how the theory of computation is applied in the design of algorithms</li>
				<li>a critical evaluation of different approaches to the algorithmic solution for computationally hard problems</li>
				<li>a critical awareness of some of the latest advances in research on theoretical aspects of computation</li>
			"
Durham_England,COMP4097,"<h2>Durham_England COMP4097</h2><h2>title</h2>COMP4097: 
ADVANCED COMPUTER GRAPHICS AND VISUALISATION<h2>summary</h2>
			<li>The module focuses on modern, advanced techniques for realistic image synthesis and visualisation, presenting the theoretical background and practical, established algorithms for offline and real-time 3D graphics.</li>
		<h2>content</h2>
			<li>Introduction: basic image generation.</li>
			<li>Physically-based shading.</li>
			<li>Deferred shading, screen space methods.</li>
			<li>Global illumination methods, BRDFs, ray tracing.</li>
			<li>Path tracing, Monte Carlo integration, acceleration techniques, radiosity.</li>
			<li>Tone mapping.</li>
			<li>Shadows.</li>
			<li>Procedural content generation and noise generation.</li>
			<li>Animation.</li>
			<li>Visualisation definitions and rationale, information visualisation, scientific visualisation. </li>
			<li>Coordinate systems and axes, colour scales, etc. </li>
			<li>Visualisation pipeline and visualisation architectures.</li>
			<li>Visualisation approaches to scalar, vector and volume data. </li>
			<li>Multi-scale, multimodal, multidimensional data, uncertain data.</li>
			<li>Data types, signal filtering, major software platforms.</li>
			<li>Perception. </li>
		<h2>ilo</h2>
				<li>On completion of this module, students will be able to demonstrate a systematic understanding of advanced computer graphics and visualisation algorithms and techniques, and a critical awareness of how they are applicable to both current and emerging needs within the industrial and research environment. </li>
			","COMP4097: 
ADVANCED COMPUTER GRAPHICS AND VISUALISATION","
			<li>The module focuses on modern, advanced techniques for realistic image synthesis and visualisation, presenting the theoretical background and practical, established algorithms for offline and real-time 3D graphics.</li>
		","
			<li>Introduction: basic image generation.</li>
			<li>Physically-based shading.</li>
			<li>Deferred shading, screen space methods.</li>
			<li>Global illumination methods, BRDFs, ray tracing.</li>
			<li>Path tracing, Monte Carlo integration, acceleration techniques, radiosity.</li>
			<li>Tone mapping.</li>
			<li>Shadows.</li>
			<li>Procedural content generation and noise generation.</li>
			<li>Animation.</li>
			<li>Visualisation definitions and rationale, information visualisation, scientific visualisation. </li>
			<li>Coordinate systems and axes, colour scales, etc. </li>
			<li>Visualisation pipeline and visualisation architectures.</li>
			<li>Visualisation approaches to scalar, vector and volume data. </li>
			<li>Multi-scale, multimodal, multidimensional data, uncertain data.</li>
			<li>Data types, signal filtering, major software platforms.</li>
			<li>Perception. </li>
		","
				<li>On completion of this module, students will be able to demonstrate a systematic understanding of advanced computer graphics and visualisation algorithms and techniques, and a critical awareness of how they are applicable to both current and emerging needs within the industrial and research environment. </li>
			"
Durham_England,COMP4107,"<h2>Durham_England COMP4107</h2><h2>title</h2>COMP4107: 
ADVANCED COMPUTER VISION<h2>summary</h2>
			<li>To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies. </li>
			<li>To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.</li>
		<h2>content</h2>
			<li>Themes will be chosen from contemporary areas of computer vision including the following:</li>
			<li>Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D/3D. </li>
			<li>Computer vision for advanced visual semantic models â€“ attribute learning, zero-shot learning, visual question and answering. </li>
			<li>Computer vision for advanced object and scene understanding. </li>
			<li>Computer vision for behaviour understanding. </li>
			<li>Computer vision for security and biometrics. </li>
			<li>Computer vision for image manipulation and augmentation. </li>
		<h2>ilo</h2>
				<li>On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a
					critical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.  </li>
			","COMP4107: 
ADVANCED COMPUTER VISION","
			<li>To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies. </li>
			<li>To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.</li>
		","
			<li>Themes will be chosen from contemporary areas of computer vision including the following:</li>
			<li>Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D/3D. </li>
			<li>Computer vision for advanced visual semantic models â€“ attribute learning, zero-shot learning, visual question and answering. </li>
			<li>Computer vision for advanced object and scene understanding. </li>
			<li>Computer vision for behaviour understanding. </li>
			<li>Computer vision for security and biometrics. </li>
			<li>Computer vision for image manipulation and augmentation. </li>
		","
				<li>On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a
					critical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.  </li>
			"
Durham_England,COMP4117,"<h2>Durham_England COMP4117</h2><h2>title</h2>COMP4117: 
QUANTUM COMPUTING<h2>summary</h2>
			<li>To introduce students to Quantum Information Processing and Quantum Computing with emphasis on where these may be advantageous over the classical approach. </li>
		<h2>content</h2>
			<li>Qubits and Quantum Key Distribution     </li>
			<li>Computing with Multiple Qubits     </li>
			<li>EPR paradox and Quantum State Transformations     </li>
			<li>Quantum Gates and Circuits     </li>
			<li>Quantum Algorithms     </li>
			<li>Quantum Networking </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate:     </li>
				<li>an understanding of the fundamental notions from Quantum Information Processing     </li>
				<li>an understanding of the workings of Quantum algorithms      </li>
				<li>an understanding of the principles of Quantum networking </li>
			","COMP4117: 
QUANTUM COMPUTING","
			<li>To introduce students to Quantum Information Processing and Quantum Computing with emphasis on where these may be advantageous over the classical approach. </li>
		","
			<li>Qubits and Quantum Key Distribution     </li>
			<li>Computing with Multiple Qubits     </li>
			<li>EPR paradox and Quantum State Transformations     </li>
			<li>Quantum Gates and Circuits     </li>
			<li>Quantum Algorithms     </li>
			<li>Quantum Networking </li>
		","
				<li>On completion of the module, students will be able to demonstrate:     </li>
				<li>an understanding of the fundamental notions from Quantum Information Processing     </li>
				<li>an understanding of the workings of Quantum algorithms      </li>
				<li>an understanding of the principles of Quantum networking </li>
			"
Durham_England,COMP4127,"<h2>Durham_England COMP4127</h2><h2>title</h2>COMP4127: 
AUTOMATED REASONING AND VERIFICATION<h2>summary</h2>
			<li>To introduce students to Automated Reasoning through expression and solvability of problems in propositional and first-order logic.</li>
			<li>To introduce students to Verification through expression and solvability of problems using temporal logics.</li>
			<li>To introduce students to Program Correctness through Hoare Logic.</li>
		<h2>content</h2>
			<li>Algorithms for Reasoning in Propositional Logic</li>
			<li>Principles of Modern SAT Solvers</li>
			<li>Algorithms for Reasoning in First Order Logic</li>
			<li>Unification and Resolution for First Order Logic</li>
			<li>Principles of Inference in Prolog</li>
			<li>Transition Systems and Model-Checking</li>
			<li>Linear Temporal Logic</li>
			<li>Computation Tree Logic</li>
			<li>Model-Checking with NuSMV</li>
			<li>Hoare Logic</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate:</li>
				<li>an understanding of how to express problems in the language of logics and models.</li>
				<li>an understanding of satisfiability, entailment and model-checking for a variety of logics.</li>
				<li>an understanding of the algorithms underlying modern SAT-solvers.</li>
				<li>an understanding of the algorithms underlying verification in temporal logics.</li>
				<li>an understanding of how a program can be proved to meet a specification through Hoare Logic.</li>
			","COMP4127: 
AUTOMATED REASONING AND VERIFICATION","
			<li>To introduce students to Automated Reasoning through expression and solvability of problems in propositional and first-order logic.</li>
			<li>To introduce students to Verification through expression and solvability of problems using temporal logics.</li>
			<li>To introduce students to Program Correctness through Hoare Logic.</li>
		","
			<li>Algorithms for Reasoning in Propositional Logic</li>
			<li>Principles of Modern SAT Solvers</li>
			<li>Algorithms for Reasoning in First Order Logic</li>
			<li>Unification and Resolution for First Order Logic</li>
			<li>Principles of Inference in Prolog</li>
			<li>Transition Systems and Model-Checking</li>
			<li>Linear Temporal Logic</li>
			<li>Computation Tree Logic</li>
			<li>Model-Checking with NuSMV</li>
			<li>Hoare Logic</li>
		","
				<li>On completion of the module, students will be able to demonstrate:</li>
				<li>an understanding of how to express problems in the language of logics and models.</li>
				<li>an understanding of satisfiability, entailment and model-checking for a variety of logics.</li>
				<li>an understanding of the algorithms underlying modern SAT-solvers.</li>
				<li>an understanding of the algorithms underlying verification in temporal logics.</li>
				<li>an understanding of how a program can be proved to meet a specification through Hoare Logic.</li>
			"
Durham_England,COMP4137,"<h2>Durham_England COMP4137</h2><h2>title</h2>COMP4137: 
BLOCKCHAIN AND CRYPTOCURRENCIES<h2>summary</h2>
			<li>To introduce students to an advanced topic in Computer Science that is finding application in modern technology. </li>
			<li>To give students knowledge and understanding of the theoretical basis, security and history of cryptocurrencies. </li>
		<h2>content</h2>
			<li>Secure hash functions and digital signatures.  </li>
			<li>Simple blockchains.  </li>
			<li>Decentralisation of blockchains.  </li>
			<li>Bitcoin transaction and block details.  </li>
			<li>Bitcoin mining.  </li>
			<li>Anonymity in cryptocurrencies.  </li>
			<li>Ethereum and smart contracts.  </li>
			<li>Recent developments in blockchains and cryptocurrencies.  </li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the cryptographic protocols underlying blockchain security </li>
				<li>knowledge of the key features and differences between a number of cryptocurrencies  </li>
				<li>the structure and use of smart contracts in a blockchain  </li>
				<li>an understanding of some recent developments in cryptocurrencies and blockchains  </li>
			","COMP4137: 
BLOCKCHAIN AND CRYPTOCURRENCIES","
			<li>To introduce students to an advanced topic in Computer Science that is finding application in modern technology. </li>
			<li>To give students knowledge and understanding of the theoretical basis, security and history of cryptocurrencies. </li>
		","
			<li>Secure hash functions and digital signatures.  </li>
			<li>Simple blockchains.  </li>
			<li>Decentralisation of blockchains.  </li>
			<li>Bitcoin transaction and block details.  </li>
			<li>Bitcoin mining.  </li>
			<li>Anonymity in cryptocurrencies.  </li>
			<li>Ethereum and smart contracts.  </li>
			<li>Recent developments in blockchains and cryptocurrencies.  </li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an understanding of the cryptographic protocols underlying blockchain security </li>
				<li>knowledge of the key features and differences between a number of cryptocurrencies  </li>
				<li>the structure and use of smart contracts in a blockchain  </li>
				<li>an understanding of some recent developments in cryptocurrencies and blockchains  </li>
			"
Durham_England,COMP4157,"<h2>Durham_England COMP4157</h2><h2>title</h2>COMP4157: 
LEARNING ANALYTICS<h2>summary</h2>
			<li>To give students a fundamental understanding of some of the core approaches and problem-solving principles for Learning Analytics (LA) and the role of LA in current and future learning settings and environments.</li>
		<h2>content</h2>
			<li>Statistical Learning Analytics and visualisation: data pre-processing; methods for tackling learning analytics based on statistical approaches; the types of LA that can be done with such approaches - e.g. descriptive and beyond. Visualisation of LA data for different stakeholders - e.g. learner, teacher, administrator, etc. </li>
			<li>Ethics of Learner Data Usage: discussions on ethical considerations of using learner data, starting from societal view, laws involved, (common) practice, future practice. Algorithmic perspectives, such as (expanded) sensitivity analysis.</li>
			<li>Machine Learning based Learning Analytics: shallow and deep Machine Learning methods for LA; numerical versus textual data analytical methods for LA; combined methods; sentiment analysis for LA; the types of LA that can be done with such approaches - e.g. descriptive, diagnostic, predictive, prescriptive.</li>
		<h2>ilo</h2>
				<li>The key principles and methodologies of data pre-processing for learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
				<li>The key principles and methodologies for statistical learning analytics and visualisation, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
				<li>The key principles of machine learning based learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
			","COMP4157: 
LEARNING ANALYTICS","
			<li>To give students a fundamental understanding of some of the core approaches and problem-solving principles for Learning Analytics (LA) and the role of LA in current and future learning settings and environments.</li>
		","
			<li>Statistical Learning Analytics and visualisation: data pre-processing; methods for tackling learning analytics based on statistical approaches; the types of LA that can be done with such approaches - e.g. descriptive and beyond. Visualisation of LA data for different stakeholders - e.g. learner, teacher, administrator, etc. </li>
			<li>Ethics of Learner Data Usage: discussions on ethical considerations of using learner data, starting from societal view, laws involved, (common) practice, future practice. Algorithmic perspectives, such as (expanded) sensitivity analysis.</li>
			<li>Machine Learning based Learning Analytics: shallow and deep Machine Learning methods for LA; numerical versus textual data analytical methods for LA; combined methods; sentiment analysis for LA; the types of LA that can be done with such approaches - e.g. descriptive, diagnostic, predictive, prescriptive.</li>
		","
				<li>The key principles and methodologies of data pre-processing for learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
				<li>The key principles and methodologies for statistical learning analytics and visualisation, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
				<li>The key principles of machine learning based learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data.</li>
			"
Durham_England,COMP4167,"<h2>Durham_England COMP4167</h2><h2>title</h2>COMP4167: 
NATURAL LANGUAGE PROCESSING<h2>summary</h2>
			<li>Introduce the students to computational linguistics</li>
			<li>Introduce the students to Language models</li>
			<li>Gain experience in working with various textual data</li>
			<li>Gain experience in using advanced techniques to solve natural language tasks such as text parsing, understanding, classification, translation, and generation</li>
		<h2>content</h2>
			<li>Text Pre-processing</li>
			<li>Features Extraction</li>
			<li>Language Modelling and Neural Language Modelling </li>
			<li>Neural Word Embedding and their interpretation </li>
			<li>Recurrent Neural Networks (RNN) for Language Models</li>
			<li>Advanced variations of RNNs</li>
			<li>Sequence to Sequence Architectures</li>
			<li>Convolutional Neural Networks for Text Classification </li>
			<li>Transformers and Attention based Models</li>
			<li>Multitask Learning</li>
			<li>Natural Language Generation</li>
			<li>NLP Ethics and Fairness</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>Understanding of the fundamental concepts of Language Models</li>
				<li>Understanding of the mathematical basis of various deep-learning based language models</li>
				<li>Understanding of the learning algorithms behind major NLP use cases e.g. Machine Translation, Multi-task Learning, Language Generation, ...</li>
				<li>Understanding of the embedded bias in popular language models</li>
			","COMP4167: 
NATURAL LANGUAGE PROCESSING","
			<li>Introduce the students to computational linguistics</li>
			<li>Introduce the students to Language models</li>
			<li>Gain experience in working with various textual data</li>
			<li>Gain experience in using advanced techniques to solve natural language tasks such as text parsing, understanding, classification, translation, and generation</li>
		","
			<li>Text Pre-processing</li>
			<li>Features Extraction</li>
			<li>Language Modelling and Neural Language Modelling </li>
			<li>Neural Word Embedding and their interpretation </li>
			<li>Recurrent Neural Networks (RNN) for Language Models</li>
			<li>Advanced variations of RNNs</li>
			<li>Sequence to Sequence Architectures</li>
			<li>Convolutional Neural Networks for Text Classification </li>
			<li>Transformers and Attention based Models</li>
			<li>Multitask Learning</li>
			<li>Natural Language Generation</li>
			<li>NLP Ethics and Fairness</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>Understanding of the fundamental concepts of Language Models</li>
				<li>Understanding of the mathematical basis of various deep-learning based language models</li>
				<li>Understanding of the learning algorithms behind major NLP use cases e.g. Machine Translation, Multi-task Learning, Language Generation, ...</li>
				<li>Understanding of the embedded bias in popular language models</li>
			"
Durham_England,COMP4177,"<h2>Durham_England COMP4177</h2><h2>title</h2>COMP4177: 
NETWORKS AND THEIR STRUCTURE<h2>summary</h2>
			<li>To design structured networks to provide the communications fabric of distributed-memory multi-processors, networks-on-chips and data centre networks.</li>
			<li>To introduce the theoretical and practical tools needed to analyse social and technological networks. 
  </li>
		<h2>content</h2>
			<li>Core aspects of interconnection networks: topology; routing; switching; flow control; packets; technology.</li>
			<li>Graph theory: degree; cuts; bisections; paths; diameter; embeddings; automorphisms; symmetry.</li>
			<li>Topologies: hypercubes; tori; k-ary n-cubes; cube-connected cycles.</li>
			<li>Performance: traffic patterns; throughput; latency; path diversity; packaging; routing algorithms.</li>
			<li>Modelling networks to make comparisons and predictions: random graphs; Milgram's small world experiment; Watts-Strogatz model; Kleinberg model.  </li>
			<li>Centrality measures: finding influential nodes in networks; using centrality measures to understand the community structure of networks.  </li>
			<li>Epidemics: how contagions spread in networks; models of diffusion; SIR model; epidemic threshold; SIS model.</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an in-depth knowledge of the state-of-the-art in interconnection networks and network science</li>
				<li>an awareness of the main open problems of current interest </li>
				<li>an understanding of research issues that relate to these problems, including recent developments and research trends and breaking technologies.</li>
			","COMP4177: 
NETWORKS AND THEIR STRUCTURE","
			<li>To design structured networks to provide the communications fabric of distributed-memory multi-processors, networks-on-chips and data centre networks.</li>
			<li>To introduce the theoretical and practical tools needed to analyse social and technological networks. 
  </li>
		","
			<li>Core aspects of interconnection networks: topology; routing; switching; flow control; packets; technology.</li>
			<li>Graph theory: degree; cuts; bisections; paths; diameter; embeddings; automorphisms; symmetry.</li>
			<li>Topologies: hypercubes; tori; k-ary n-cubes; cube-connected cycles.</li>
			<li>Performance: traffic patterns; throughput; latency; path diversity; packaging; routing algorithms.</li>
			<li>Modelling networks to make comparisons and predictions: random graphs; Milgram's small world experiment; Watts-Strogatz model; Kleinberg model.  </li>
			<li>Centrality measures: finding influential nodes in networks; using centrality measures to understand the community structure of networks.  </li>
			<li>Epidemics: how contagions spread in networks; models of diffusion; SIR model; epidemic threshold; SIS model.</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an in-depth knowledge of the state-of-the-art in interconnection networks and network science</li>
				<li>an awareness of the main open problems of current interest </li>
				<li>an understanding of research issues that relate to these problems, including recent developments and research trends and breaking technologies.</li>
			"
Durham_England,COMP4187,"<h2>Durham_England COMP4187</h2><h2>title</h2>COMP4187: 
PARALLEL SCIENTIFIC COMPUTING II<h2>summary</h2>
			<li>Introduce advanced scientific computing techniques</li>
			<li>Familiarise student with distributed memory programming and MPI</li>
		<h2>content</h2>
			<li>Basic spatial discretisation techniques for partial differential equations</li>
			<li>Implicit time discretisation techniques for ordinary differential equations.</li>
			<li>Advanced algorithms of scientific computing</li>
			<li>Distributed memory programming paradigms.</li>
			<li>Advanced parallel data structures.</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an in-depth knowledge of the state-of-the-art in scientific computing and accelerator programming</li>
				<li>a critical awareness of the main open problems of current interest related to these areas</li>
				<li>a comprehensive understanding of the research issues that relate to these problems, including recent developments and research trends, breaking technologies and opportunities for industrial innovation. </li>
			","COMP4187: 
PARALLEL SCIENTIFIC COMPUTING II","
			<li>Introduce advanced scientific computing techniques</li>
			<li>Familiarise student with distributed memory programming and MPI</li>
		","
			<li>Basic spatial discretisation techniques for partial differential equations</li>
			<li>Implicit time discretisation techniques for ordinary differential equations.</li>
			<li>Advanced algorithms of scientific computing</li>
			<li>Distributed memory programming paradigms.</li>
			<li>Advanced parallel data structures.</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li>an in-depth knowledge of the state-of-the-art in scientific computing and accelerator programming</li>
				<li>a critical awareness of the main open problems of current interest related to these areas</li>
				<li>a comprehensive understanding of the research issues that relate to these problems, including recent developments and research trends, breaking technologies and opportunities for industrial innovation. </li>
			"
Durham_England,COMP4197,"<h2>Durham_England COMP4197</h2><h2>title</h2>COMP4197: 
RANDOMISED ALGORITHMS AND PROBABILISTIC METHODS<h2>summary</h2>
			<li>The aim of the module is to equip students with the ability to design and analyse efficient probabilistic algorithms.</li>
		<h2>content</h2>
			<li> To be chosen from the following: </li>
			<li> basic bounds and inequalities (Markov, Chebyshev, Chernoff) </li>
			<li> Martingales </li>
			<li> Markov chains and random walks </li>
			<li> the probabilistic method </li>
			<li> approximate counting </li>
			<li> parallel and distributed probabilistic algorithms </li>
		<h2>ilo</h2>
				<li> On completion of the module, students will be able to demonstrate: </li>
				<li> a knowledge about various important problem solving paradigms in the broad area of probabilistic methods and algorithms </li>
				<li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems </li>
				<li> an ability to conduct review and self-study to further their knowledge beyond the taught material </li>
			","COMP4197: 
RANDOMISED ALGORITHMS AND PROBABILISTIC METHODS","
			<li>The aim of the module is to equip students with the ability to design and analyse efficient probabilistic algorithms.</li>
		","
			<li> To be chosen from the following: </li>
			<li> basic bounds and inequalities (Markov, Chebyshev, Chernoff) </li>
			<li> Martingales </li>
			<li> Markov chains and random walks </li>
			<li> the probabilistic method </li>
			<li> approximate counting </li>
			<li> parallel and distributed probabilistic algorithms </li>
		","
				<li> On completion of the module, students will be able to demonstrate: </li>
				<li> a knowledge about various important problem solving paradigms in the broad area of probabilistic methods and algorithms </li>
				<li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems </li>
				<li> an ability to conduct review and self-study to further their knowledge beyond the taught material </li>
			"
Edinburgh_Scotland,cxinfr08020,"<h2>Edinburgh_Scotland cxinfr08020</h2><h2>title</h2>Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020)<h2>summary</h2>This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.<h2>content</h2>
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020),"This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.","
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",
Edinburgh_Scotland,cxinfr08010,"<h2>Edinburgh_Scotland cxinfr08010</h2><h2>title</h2>Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)<h2>summary</h2>This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.<h2>content</h2>
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010),"This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.","
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",
Edinburgh_Scotland,cxinfr08033,"<h2>Edinburgh_Scotland cxinfr08033</h2><h2>title</h2>Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033)<h2>summary</h2><h2>content</h2>Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033),,"Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",
Edinburgh_Scotland,cxinfr10052,"<h2>Edinburgh_Scotland cxinfr10052</h2><h2>title</h2>Undergraduate Course: Algorithms and Data Structures (INFR10052)<h2>summary</h2>The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.<h2>content</h2>
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",Undergraduate Course: Algorithms and Data Structures (INFR10052),"The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.","
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",
Edinburgh_Scotland,cxinfr10057,"<h2>Edinburgh_Scotland cxinfr10057</h2><h2>title</h2>Undergraduate Course: Software Testing (INFR10057)<h2>summary</h2>This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.<h2>content</h2>
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",Undergraduate Course: Software Testing (INFR10057),"This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.","
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",
Edinburgh_Scotland,cxinfr10059,"<h2>Edinburgh_Scotland cxinfr10059</h2><h2>title</h2>Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)<h2>summary</h2>This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
<h2>content</h2>
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059),"This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
","
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",
Edinburgh_Scotland,cxinfr10061,"<h2>Edinburgh_Scotland cxinfr10061</h2><h2>title</h2>Undergraduate Course: Elements of Programming Languages (INFR10061)<h2>summary</h2>Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.<h2>content</h2>
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",Undergraduate Course: Elements of Programming Languages (INFR10061),"Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.","
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",
Edinburgh_Scotland,cxinfr10064,"<h2>Edinburgh_Scotland cxinfr10064</h2><h2>title</h2>Undergraduate Course: Software Design and Modelling (INFR10064)<h2>summary</h2>This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.<h2>content</h2>
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",Undergraduate Course: Software Design and Modelling (INFR10064),"This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.","
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",
Edinburgh_Scotland,cxinfr10065,"<h2>Edinburgh_Scotland cxinfr10065</h2><h2>title</h2>Undergraduate Course: Compiling Techniques (INFR10065)<h2>summary</h2>This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.<h2>content</h2>
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",Undergraduate Course: Compiling Techniques (INFR10065),"This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.","
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",
Edinburgh_Scotland,cxinfr10074,"<h2>Edinburgh_Scotland cxinfr10074</h2><h2>title</h2>Undergraduate Course: Computer Communications and Networks (INFR10074)<h2>summary</h2>This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.<h2>content</h2>
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",Undergraduate Course: Computer Communications and Networks (INFR10074),"This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.","
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",
Edinburgh_Scotland,cxinfr10076,"<h2>Edinburgh_Scotland cxinfr10076</h2><h2>title</h2>Undergraduate Course: Computer Architecture and Design (INFR10076)<h2>summary</h2>In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.<h2>content</h2>
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",Undergraduate Course: Computer Architecture and Design (INFR10076),"In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.","
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",
Edinburgh_Scotland,cxinfr10079,"<h2>Edinburgh_Scotland cxinfr10079</h2><h2>title</h2>Undergraduate Course: Operating Systems (INFR10079)<h2>summary</h2>This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
<h2>content</h2>
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",Undergraduate Course: Operating Systems (INFR10079),"This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
","
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",
Edinburgh_Scotland,cxinfr10080,"<h2>Edinburgh_Scotland cxinfr10080</h2><h2>title</h2>Undergraduate Course: Introduction to Databases (INFR10080)<h2>summary</h2>Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *<h2>content</h2>
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",Undergraduate Course: Introduction to Databases (INFR10080),"Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *","
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",
Edinburgh_Scotland,cxinfr10084,"<h2>Edinburgh_Scotland cxinfr10084</h2><h2>title</h2>Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)<h2>summary</h2><h2>content</h2>Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. <br>
<br>
This course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. <br>
<br>
It is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084),,"Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. <br>
<br>
This course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. <br>
<br>
It is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",
Edinburgh_Scotland,cxinfr10085,"<h2>Edinburgh_Scotland cxinfr10085</h2><h2>title</h2>Undergraduate Course: Introduction to Mobile Robotics (INFR10085)<h2>summary</h2>A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.<h2>content</h2>
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",Undergraduate Course: Introduction to Mobile Robotics (INFR10085),"A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.","
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",
Edinburgh_Scotland,cxinfr10086,"<h2>Edinburgh_Scotland cxinfr10086</h2><h2>title</h2>Undergraduate Course: Machine Learning (INFR10086)<h2>summary</h2>***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",Undergraduate Course: Machine Learning (INFR10086),"***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",
Edinburgh_Scotland,cxinfr10054,"<h2>Edinburgh_Scotland cxinfr10054</h2><h2>title</h2>Undergraduate Course: Computational Cognitive Science (INFR10054)<h2>summary</h2>This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.<h2>content</h2>
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",Undergraduate Course: Computational Cognitive Science (INFR10054),"This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.","
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",
Edinburgh_Scotland,cxinfr10078,"<h2>Edinburgh_Scotland cxinfr10078</h2><h2>title</h2>Undergraduate Course: Foundations of Natural Language Processing (INFR10078)<h2>summary</h2>***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
<h2>content</h2>
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",Undergraduate Course: Foundations of Natural Language Processing (INFR10078),"***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
","
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",
Edinburgh_Scotland,cxinfr10087,"<h2>Edinburgh_Scotland cxinfr10087</h2><h2>title</h2>Undergraduate Course: Automated Reasoning (INFR10087)<h2>summary</h2>**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.<h2>content</h2>
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",Undergraduate Course: Automated Reasoning (INFR10087),"**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.","
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",
Edinburgh_Scotland,cxinfr11017,"<h2>Edinburgh_Scotland cxinfr11017</h2><h2>title</h2>Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)<h2>summary</h2>The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.<h2>content</h2>
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017),"The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.","
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",
Edinburgh_Scotland,cxinfr11020,"<h2>Edinburgh_Scotland cxinfr11020</h2><h2>title</h2>Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020)<h2>summary</h2>Game theory is the formal study of interaction between ""self-interested"" (or ""goal-oriented"") ""systems"" (or ""agents"" or ""decision makers"" or ""players""), &amp; strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann &amp; Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology &amp; even to inspection regimes for arms control. <br>
<br>
Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification &amp; model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics &amp; computing have received extensive attention. These include electronic auctions, &amp; more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. <br>
<br>
Wherever game theory plays a quantitative role, algorithmic and computational questions related to ""solving"" games are also of central importance. <br>
<br>
This course aims to bring together as a coherent body of knowledge the game theoretic algorithms &amp; models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, &amp; AI. <br>
<h2>content</h2>
    
     Examples of diverse games<br>
Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem<br>
<br>
General games in strategic form:<br>
 - Equilibria and Nash's theorem<br>
 - 2-player equilibria: Lemke-Howson algorithm and its variants. <br>
<br>
Games in Extensive form (mainly zero-sum, perfect information):<br>
 - Game trees. Relation to Strategic games<br>
 - and / or game graphs and reachability games<br>
 - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)<br>
 - mean value games, MDPs, and stochastic games<br>
<br>
Mechanism design and inverse game theory: designing games where selfish players will behave as desired:<br>
 - Vickery auctions and other mechanisms<br>
 - Combinatorial auctions<br>
 - Incentive structures for the internet. <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing
    
    
",Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020),"Game theory is the formal study of interaction between ""self-interested"" (or ""goal-oriented"") ""systems"" (or ""agents"" or ""decision makers"" or ""players""), &amp; strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann &amp; Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology &amp; even to inspection regimes for arms control. <br>
<br>
Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification &amp; model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics &amp; computing have received extensive attention. These include electronic auctions, &amp; more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. <br>
<br>
Wherever game theory plays a quantitative role, algorithmic and computational questions related to ""solving"" games are also of central importance. <br>
<br>
This course aims to bring together as a coherent body of knowledge the game theoretic algorithms &amp; models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, &amp; AI. <br>
","
    
     Examples of diverse games<br>
Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem<br>
<br>
General games in strategic form:<br>
 - Equilibria and Nash's theorem<br>
 - 2-player equilibria: Lemke-Howson algorithm and its variants. <br>
<br>
Games in Extensive form (mainly zero-sum, perfect information):<br>
 - Game trees. Relation to Strategic games<br>
 - and / or game graphs and reachability games<br>
 - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)<br>
 - mean value games, MDPs, and stochastic games<br>
<br>
Mechanism design and inverse game theory: designing games where selfish players will behave as desired:<br>
 - Vickery auctions and other mechanisms<br>
 - Combinatorial auctions<br>
 - Incentive structures for the internet. <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing
    
    
",
Edinburgh_Scotland,cxinfr11023,"<h2>Edinburgh_Scotland cxinfr11023</h2><h2>title</h2>Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023)<h2>summary</h2>The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.<h2>content</h2>
    
    * Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.<br>
* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.<br>
* Realisation in Pthreads and Java.<br>
* Issues in message passing programming. Channels and synchronization models.<br>
* Realisation in MPI: communicators, simple and collective operations<br>
* Selected case studies highlighting alternative approaches, for example,<br>
o Associative models. Linda, tuple space and related primitives.<br>
o Threading Building Blocks.<br>
<br>
Relevant QAA Computing Curriculum Sections:  Concurrency and Parallelism
    
    
",Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023),"The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.","
    
    * Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.<br>
* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.<br>
* Realisation in Pthreads and Java.<br>
* Issues in message passing programming. Channels and synchronization models.<br>
* Realisation in MPI: communicators, simple and collective operations<br>
* Selected case studies highlighting alternative approaches, for example,<br>
o Associative models. Linda, tuple space and related primitives.<br>
o Threading Building Blocks.<br>
<br>
Relevant QAA Computing Curriculum Sections:  Concurrency and Parallelism
    
    
",
Edinburgh_Scotland,cxinfr11033,"<h2>Edinburgh_Scotland cxinfr11033</h2><h2>title</h2>Postgraduate Course: Automatic Speech Recognition (INFR11033)<h2>summary</h2>This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. <br>
<br>
Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.<h2>content</h2>
    
    Signal analysis for ASR<br>
Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)<br>
Hidden Markov Models (HMM)<br>
Context-dependent models<br>
Discriminative training<br>
Language models for LVCSR (large vocabulary continuous speech recognition)<br>
Decoding<br>
Robust ASR (Robust features Noise reduction, Microphone arrays)<br>
Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)<br>
Speaker recognition<br>
History of speech recognition<br>
Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)<br>
Speech recognition applications (including privacy implications)<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing
    
    
",Postgraduate Course: Automatic Speech Recognition (INFR11033),"This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. <br>
<br>
Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.","
    
    Signal analysis for ASR<br>
Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)<br>
Hidden Markov Models (HMM)<br>
Context-dependent models<br>
Discriminative training<br>
Language models for LVCSR (large vocabulary continuous speech recognition)<br>
Decoding<br>
Robust ASR (Robust features Noise reduction, Microphone arrays)<br>
Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)<br>
Speaker recognition<br>
History of speech recognition<br>
Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)<br>
Speech recognition applications (including privacy implications)<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing
    
    
",
Edinburgh_Scotland,cxinfr11088,"<h2>Edinburgh_Scotland cxinfr11088</h2><h2>title</h2>Postgraduate Course: Extreme Computing (INFR11088)<h2>summary</h2>Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).<h2>content</h2>
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",Postgraduate Course: Extreme Computing (INFR11088),"Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).","
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",
Edinburgh_Scotland,cxinfr11098,"<h2>Edinburgh_Scotland cxinfr11098</h2><h2>title</h2>Postgraduate Course: Secure Programming (INFR11098)<h2>summary</h2>This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).<h2>content</h2>
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",Postgraduate Course: Secure Programming (INFR11098),"This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).","
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",
Edinburgh_Scotland,cxinfr11099,"<h2>Edinburgh_Scotland cxinfr11099</h2><h2>title</h2>Postgraduate Course: Introduction to Quantum Computing (INFR11099)<h2>summary</h2>The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well-known quantum algorithms and compare their performance with respect to classical computing. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures and secure delegated QC.<h2>content</h2>
    
    - Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics, <br>
- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements <br>
- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. <br>
- The first quantum protocols: Quantum teleportation and super dense coding <br>
- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform or Phase-Estimation <br>
- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. <br>
- Quantum Computing via measurement-based model: Description of graph state and measurement calculus <br>
- Advanced Topics: quantum error correction, algorithm for near-term architectures, unconditionally secure quantum cloud computing
    
    
",Postgraduate Course: Introduction to Quantum Computing (INFR11099),"The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well-known quantum algorithms and compare their performance with respect to classical computing. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures and secure delegated QC.","
    
    - Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics, <br>
- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements <br>
- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. <br>
- The first quantum protocols: Quantum teleportation and super dense coding <br>
- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform or Phase-Estimation <br>
- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. <br>
- Quantum Computing via measurement-based model: Description of graph state and measurement calculus <br>
- Advanced Topics: quantum error correction, algorithm for near-term architectures, unconditionally secure quantum cloud computing
    
    
",
Edinburgh_Scotland,cxinfr11114,"<h2>Edinburgh_Scotland cxinfr11114</h2><h2>title</h2>Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)<h2>summary</h2>Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.<h2>content</h2>
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",Undergraduate Course: Types and Semantics for Programming Languages (INFR11114),"Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.","
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",
Edinburgh_Scotland,cxinfr11129,"<h2>Edinburgh_Scotland cxinfr11129</h2><h2>title</h2>Undergraduate Course: Formal Verification (INFR11129)<h2>summary</h2>Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.<h2>content</h2>
    
    In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br>
 <br>
This course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br>
 <br>
Topics the course covers include the following: <br>
*Formal verification in context, its current take-up in industry and challenges to its wider <br>
adoption <br>
*Syntax and semantics of CTL and LTL temporal logics <br>
*CTL and LTL model checking techniques, including automata-based approaches and <br>
bounded model checking with SAT solvers <br>
*The BDD data-structure used at the heart of many model checkers <br>
*Writing models for model checking and phrasing useful properties in CTL and LTL <br>
*Operational semantics of a simple imperative programming language, weakest precondition <br>
operators and verification condition generation <br>
*The capabilities of SMT solvers for discharging verification conditions <br>
*Assertion-based software verification <br>
 <br>
 <br>
Optional topics include: <br>
*Industrial temporal logics such as PSL and SVA used in hardware verification <br>
*Formal verification case studies <br>
*Formal verification of hybrid systems, system with both discrete state changes and <br>
continuous state changes governed by differential equations <br>
*Combining formal and simulation-based verification methods <br>
*Dual use of temporal logic properties and assertions in formal and simulation-based <br>
verification of hardware and software  <br>
*Software model checking, focusing on its use for finding concurrency bugs <br>
*Pattern-based detection of concurrency bugs
    
    
",Undergraduate Course: Formal Verification (INFR11129),"Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.","
    
    In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br>
 <br>
This course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br>
 <br>
Topics the course covers include the following: <br>
*Formal verification in context, its current take-up in industry and challenges to its wider <br>
adoption <br>
*Syntax and semantics of CTL and LTL temporal logics <br>
*CTL and LTL model checking techniques, including automata-based approaches and <br>
bounded model checking with SAT solvers <br>
*The BDD data-structure used at the heart of many model checkers <br>
*Writing models for model checking and phrasing useful properties in CTL and LTL <br>
*Operational semantics of a simple imperative programming language, weakest precondition <br>
operators and verification condition generation <br>
*The capabilities of SMT solvers for discharging verification conditions <br>
*Assertion-based software verification <br>
 <br>
 <br>
Optional topics include: <br>
*Industrial temporal logics such as PSL and SVA used in hardware verification <br>
*Formal verification case studies <br>
*Formal verification of hybrid systems, system with both discrete state changes and <br>
continuous state changes governed by differential equations <br>
*Combining formal and simulation-based verification methods <br>
*Dual use of temporal logic properties and assertions in formal and simulation-based <br>
verification of hardware and software  <br>
*Software model checking, focusing on its use for finding concurrency bugs <br>
*Pattern-based detection of concurrency bugs
    
    
",
Edinburgh_Scotland,cxinfr11130,"<h2>Edinburgh_Scotland cxinfr11130</h2><h2>title</h2>Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)<h2>summary</h2>Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130),"Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",
Edinburgh_Scotland,cxinfr11131,"<h2>Edinburgh_Scotland cxinfr11131</h2><h2>title</h2>Undergraduate Course: Introduction to Modern Cryptography (INFR11131)<h2>summary</h2>Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: ""system assumptions"" such as the faithful execution of code, or the availability of private randomness and ""computational assumptions"". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.<h2>content</h2>
    
    The course is divided in two parts: Private Key and Public Key. Topics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. In the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.<br>
<br>
Part 1: Private Key<br>
<br>
- Classical ciphers: Shift cipher, Vigenere<br>
- Perfect secrecy<br>
- One-time pad (OTP)<br>
- Computational secrecy<br>
- Pseudorandom generators (PRG)<br>
- Pseudo-OTP<br>
- Security against chosen-plaintext attacks (CPA)<br>
- Pseudorandom functions / permutations (PRF / PRP)<br>
- CPA-secure encryption using PRF/PRP: block ciphers<br>
- Modes of operation: block ciphers, stream ciphers<br>
- Malleability<br>
- Security against chosen-ciphertext attacks (CCA)<br>
- Padding-oracle attacks: non-CCA secure schemes<br>
- Secrecy vs. integrity: message authentication codes (MAC)<br>
- Hash functions<br>
<br>
Part 2: Public Key<br>
<br>
- Digital Signatures<br>
- Trapdoor One-Way functions<br>
- Random oracles<br>
- Cyclic groups<br>
- The discrete logarithm/Diffie-Hellman assumptions<br>
- Key exchange and the Diffie-Hellman protocol<br>
- Public Key Encryption<br>
- Security against chosen-plaintext attacks<br>
- ElGamal Encryption<br>
- Zero-Knowledge proofs<br>
- The Schnorr identification scheme
    
    
",Undergraduate Course: Introduction to Modern Cryptography (INFR11131),"Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: ""system assumptions"" such as the faithful execution of code, or the availability of private randomness and ""computational assumptions"". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.","
    
    The course is divided in two parts: Private Key and Public Key. Topics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. In the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.<br>
<br>
Part 1: Private Key<br>
<br>
- Classical ciphers: Shift cipher, Vigenere<br>
- Perfect secrecy<br>
- One-time pad (OTP)<br>
- Computational secrecy<br>
- Pseudorandom generators (PRG)<br>
- Pseudo-OTP<br>
- Security against chosen-plaintext attacks (CPA)<br>
- Pseudorandom functions / permutations (PRF / PRP)<br>
- CPA-secure encryption using PRF/PRP: block ciphers<br>
- Modes of operation: block ciphers, stream ciphers<br>
- Malleability<br>
- Security against chosen-ciphertext attacks (CCA)<br>
- Padding-oracle attacks: non-CCA secure schemes<br>
- Secrecy vs. integrity: message authentication codes (MAC)<br>
- Hash functions<br>
<br>
Part 2: Public Key<br>
<br>
- Digital Signatures<br>
- Trapdoor One-Way functions<br>
- Random oracles<br>
- Cyclic groups<br>
- The discrete logarithm/Diffie-Hellman assumptions<br>
- Key exchange and the Diffie-Hellman protocol<br>
- Public Key Encryption<br>
- Security against chosen-plaintext attacks<br>
- ElGamal Encryption<br>
- Zero-Knowledge proofs<br>
- The Schnorr identification scheme
    
    
",
Edinburgh_Scotland,cxinfr11132,"<h2>Edinburgh_Scotland cxinfr11132</h2><h2>title</h2>Undergraduate Course: Machine Learning Practical (INFR11132)<h2>summary</h2>This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
Semester 1 comprises lectures, labs, and individual coursework.<br>
<br>
Semester 2 is based around small group projects, and also includes tutorials and guest lectures.<br>
<br>
Note: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.<h2>content</h2>
    
    The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:<br>
<br>
* Feed-forward network architectures<br>
* Optimisation and learning rules <br>
* Regularisation and normalisation<br>
* Neural networks for classification<br>
* Autoencoders<br>
* Convolutional Neural Networks<br>
* Recurrent Neural Networks<br>
<br>
MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
MLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.<br>
<br>
Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area.
    
    
",Undergraduate Course: Machine Learning Practical (INFR11132),"This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
Semester 1 comprises lectures, labs, and individual coursework.<br>
<br>
Semester 2 is based around small group projects, and also includes tutorials and guest lectures.<br>
<br>
Note: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.","
    
    The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:<br>
<br>
* Feed-forward network architectures<br>
* Optimisation and learning rules <br>
* Regularisation and normalisation<br>
* Neural networks for classification<br>
* Autoencoders<br>
* Convolutional Neural Networks<br>
* Recurrent Neural Networks<br>
<br>
MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
MLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.<br>
<br>
Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area.
    
    
",
Edinburgh_Scotland,cxinfr11134,"<h2>Edinburgh_Scotland cxinfr11134</h2><h2>title</h2>Postgraduate Course: Probabilistic Modelling and Reasoning (INFR11134)<h2>summary</h2>When dealing with real world data, we often need to deal with uncertainty. For example, short segments of speech may be ambiguous, and we need to take into account context in order to make sense of an utterance. Probability theory provides a rigorous method for representing and reasoning with uncertain knowledge. The course covers two main areas (i) the process of inference with probabilistic models and (ii) learning probabilistic models from data. <br>
<br>
Its aim is to provide a firm grounding in probabilistic modelling and reasoning, and to give a basis which will allow students to go on to develop their interests in more specific areas, such as statistical language modelling, bioinformatics, computational neuroscience, or computer vision, to name a few examples.<h2>content</h2>
    
    The course will cover the most important topics in probabilistic modelling and unsupervised learning, and provide a thorough basis for understanding extensions, further developments and applications.<br>
<br>
While the precise topics will vary slightly from year to year, the core content will revolve around:<br>
- probabilistic graphical models<br>
- exact inference<br>
- learning from data<br>
- methods for approximate inference and learning<br>
<br>
The course will be delivered in a series of lectures and exercises. In addition to working through exercises with pencil and paper, the students will be expected to complete some programming exercises to gain experience with implementing and using the material taught in the course.
    
    
",Postgraduate Course: Probabilistic Modelling and Reasoning (INFR11134),"When dealing with real world data, we often need to deal with uncertainty. For example, short segments of speech may be ambiguous, and we need to take into account context in order to make sense of an utterance. Probability theory provides a rigorous method for representing and reasoning with uncertain knowledge. The course covers two main areas (i) the process of inference with probabilistic models and (ii) learning probabilistic models from data. <br>
<br>
Its aim is to provide a firm grounding in probabilistic modelling and reasoning, and to give a basis which will allow students to go on to develop their interests in more specific areas, such as statistical language modelling, bioinformatics, computational neuroscience, or computer vision, to name a few examples.","
    
    The course will cover the most important topics in probabilistic modelling and unsupervised learning, and provide a thorough basis for understanding extensions, further developments and applications.<br>
<br>
While the precise topics will vary slightly from year to year, the core content will revolve around:<br>
- probabilistic graphical models<br>
- exact inference<br>
- learning from data<br>
- methods for approximate inference and learning<br>
<br>
The course will be delivered in a series of lectures and exercises. In addition to working through exercises with pencil and paper, the students will be expected to complete some programming exercises to gain experience with implementing and using the material taught in the course.
    
    
",
Edinburgh_Scotland,cxinfr11144,"<h2>Edinburgh_Scotland cxinfr11144</h2><h2>title</h2>Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144)<h2>summary</h2>Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. <br>
<br>
This course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.<h2>content</h2>
    
    The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. <br>
<br>
Syllabus:<br>
1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.<br>
2. The consensus layer. Basic Properties. Proof of Work.<br>
3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. <br>
4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.<br>
5. Scalability Issues. Byzantine agreement protocols. <br>
6. Blockchain as a platform. Smart Contracts. <br>
7. Secure multiparty computation techniques and their application to blockchain protocols. <br>
8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. <br>
9. Game theoretic analysis of blockchain protocols. <br>
10. Name and object registries. Reputation systems. Policy issues related to blockchain.
    
    
",Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144),"Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. <br>
<br>
This course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.","
    
    The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. <br>
<br>
Syllabus:<br>
1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.<br>
2. The consensus layer. Basic Properties. Proof of Work.<br>
3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. <br>
4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.<br>
5. Scalability Issues. Byzantine agreement protocols. <br>
6. Blockchain as a platform. Smart Contracts. <br>
7. Secure multiparty computation techniques and their application to blockchain protocols. <br>
8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. <br>
9. Game theoretic analysis of blockchain protocols. <br>
10. Name and object registries. Reputation systems. Policy issues related to blockchain.
    
    
",
Edinburgh_Scotland,cxinfr11145,"<h2>Edinburgh_Scotland cxinfr11145</h2><h2>title</h2>Undergraduate Course: Text Technologies for Data Science (INFR11145)<h2>summary</h2>This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. <br>
<br>
This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.<h2>content</h2>
    
    Syllabus:<br>
* Introduction to IR and text processing, system components<br>
* Zipf, Heaps, and other text laws <br>
* Pre-processing: tokenization, normalisation, stemming, stopping.<br>
* Indexing: inverted index, boolean and proximity search<br>
* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).<br>
* Query expansion<br>
* IR toolkits and applications<br>
* Ranked retrieval and learning to rank<br>
* Text classification: feature extraction, baselines, evaluation<br>
* Web search
    
    
",Undergraduate Course: Text Technologies for Data Science (INFR11145),"This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. <br>
<br>
This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.","
    
    Syllabus:<br>
* Introduction to IR and text processing, system components<br>
* Zipf, Heaps, and other text laws <br>
* Pre-processing: tokenization, normalisation, stemming, stopping.<br>
* Indexing: inverted index, boolean and proximity search<br>
* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).<br>
* Query expansion<br>
* IR toolkits and applications<br>
* Ranked retrieval and learning to rank<br>
* Text classification: feature extraction, baselines, evaluation<br>
* Web search
    
    
",
Edinburgh_Scotland,cxinfr11150,"<h2>Edinburgh_Scotland cxinfr11150</h2><h2>title</h2>Undergraduate Course: Principles and Design of IoT Systems (INFR11150)<h2>summary</h2>The course is concerned with the emerging discipline of digitising the physical world with networks of wireless sensors, analysing the sensor data using machine learning techniques to extract actionable information, and influencing the physical world via actuators, with an optional human in the loop. <br>
<br>
The course imparts foundational concepts in IoT through personal research distilled in the form of two survey papers on foundational topics in IoT, and students working in pairs gain hands-on experience by realising a healthcare application idea as a demonstratable IoT system using wearable sensors by  the send of the semester.<h2>content</h2>
    
    The course aims to deliver a sound understanding of the design and analysis of Internet of Things systems through personal research and practice. The research in a choice of selected foundational topics in IoT provides the foundational knowledge distilled in the form of two 3000-word survey papers.   <br>
<br>
The students conduct a major piece of coursework working in pairs to develop an IoT application using wearable sensors. Students will experience all the stages in the design and implementation of a complex system, from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning methods, user interface design, system integration and testing. Each pair will demonstrate a working prototype at the end of Semester 1 and deliver a written report at the start of Semester 2. <br>
<br>
Each student pair is given a set of Mbed development board (NRF52-DK), Inertial Measurement Unit (MPU-9250) with 3-axis accelerometer and gyroscope sensors, and an on-line software development environment - the ARM Mbed compiler. The task will be to design, implement and demonstrate a Step Tracker for walking on level ground, running and climbing stairs using the wearable sensor which interfaces to an Android App.
    
    
",Undergraduate Course: Principles and Design of IoT Systems (INFR11150),"The course is concerned with the emerging discipline of digitising the physical world with networks of wireless sensors, analysing the sensor data using machine learning techniques to extract actionable information, and influencing the physical world via actuators, with an optional human in the loop. <br>
<br>
The course imparts foundational concepts in IoT through personal research distilled in the form of two survey papers on foundational topics in IoT, and students working in pairs gain hands-on experience by realising a healthcare application idea as a demonstratable IoT system using wearable sensors by  the send of the semester.","
    
    The course aims to deliver a sound understanding of the design and analysis of Internet of Things systems through personal research and practice. The research in a choice of selected foundational topics in IoT provides the foundational knowledge distilled in the form of two 3000-word survey papers.   <br>
<br>
The students conduct a major piece of coursework working in pairs to develop an IoT application using wearable sensors. Students will experience all the stages in the design and implementation of a complex system, from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning methods, user interface design, system integration and testing. Each pair will demonstrate a working prototype at the end of Semester 1 and deliver a written report at the start of Semester 2. <br>
<br>
Each student pair is given a set of Mbed development board (NRF52-DK), Inertial Measurement Unit (MPU-9250) with 3-axis accelerometer and gyroscope sensors, and an on-line software development environment - the ARM Mbed compiler. The task will be to design, implement and demonstrate a Step Tracker for walking on level ground, running and climbing stairs using the wearable sensor which interfaces to an Android App.
    
    
",
Edinburgh_Scotland,cxinfr11157,"<h2>Edinburgh_Scotland cxinfr11157</h2><h2>title</h2>Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (INFR11157)<h2>summary</h2>This course explores current research on processing natural language: interpreting, generating, and translating. The course will focus mainly on deep learning approaches to various NLP tasks and applications. It will provide an introduction to the main neural network architectures used in NLP and how they are used for tasks such as syntactic and semantic parsing, as well as end-user applications such as machine translation and text summarisation.<br>
<br>
Building on linguistic and algorithmic knowledge taught in prerequisite courses, this course also aims to further develop students' understanding of the strengths and weaknesses of current approaches with respect to linguistic and computational considerations. Practical assignments will provide the opportunity to implement and analyse some of the approaches considered.<h2>content</h2>
    
    The course aims to familiarise students with recent research across a range of topics within NLP, mainly within the framework of neural network models, and with a focus on applications such as machine translation, summarisation, and semantic parsing. As an MSc-level course that assumes previous experience with NLP, it will discuss a range of different issues, including linguistic/representational capacity, computational efficiency, optimisation, etc. There is no textbook for the course; readings will come from recent research literature.
    
    
","Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (INFR11157)","This course explores current research on processing natural language: interpreting, generating, and translating. The course will focus mainly on deep learning approaches to various NLP tasks and applications. It will provide an introduction to the main neural network architectures used in NLP and how they are used for tasks such as syntactic and semantic parsing, as well as end-user applications such as machine translation and text summarisation.<br>
<br>
Building on linguistic and algorithmic knowledge taught in prerequisite courses, this course also aims to further develop students' understanding of the strengths and weaknesses of current approaches with respect to linguistic and computational considerations. Practical assignments will provide the opportunity to implement and analyse some of the approaches considered.","
    
    The course aims to familiarise students with recent research across a range of topics within NLP, mainly within the framework of neural network models, and with a focus on applications such as machine translation, summarisation, and semantic parsing. As an MSc-level course that assumes previous experience with NLP, it will discuss a range of different issues, including linguistic/representational capacity, computational efficiency, optimisation, etc. There is no textbook for the course; readings will come from recent research literature.
    
    
",
Edinburgh_Scotland,cxinfr11158,"<h2>Edinburgh_Scotland cxinfr11158</h2><h2>title</h2>Undergraduate Course: Usable Security and Privacy (INFR11158)<h2>summary</h2>Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.<h2>content</h2>
    
    Introduction: History and overview of the Usable Security and Privacy research area.<br>
Study design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyze usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.<br>
Privacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.<br>
Security: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.<br>
Ethics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable.
    
    
",Undergraduate Course: Usable Security and Privacy (INFR11158),"Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.","
    
    Introduction: History and overview of the Usable Security and Privacy research area.<br>
Study design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyze usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.<br>
Privacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.<br>
Security: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.<br>
Ethics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable.
    
    
",
Edinburgh_Scotland,cxinfr11187,"<h2>Edinburgh_Scotland cxinfr11187</h2><h2>title</h2>Undergraduate Course: Quantum Cyber Security (INFR11187)<h2>summary</h2>In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.<h2>content</h2>
    
    This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.<br>
<br>
The students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.<br>
<br>
The second part consists of learning and understanding quantum cryptography and specifically ""quantum-key-distribution"" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).<br>
<br>
The third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).<br>
<br>
Finally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3).
    
    
",Undergraduate Course: Quantum Cyber Security (INFR11187),"In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.","
    
    This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.<br>
<br>
The students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.<br>
<br>
The second part consists of learning and understanding quantum cryptography and specifically ""quantum-key-distribution"" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).<br>
<br>
The third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).<br>
<br>
Finally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3).
    
    
",
Edinburgh_Scotland,cxinfr11199,"<h2>Edinburgh_Scotland cxinfr11199</h2><h2>title</h2>Undergraduate Course: Advanced Database Systems (INFR11199)<h2>summary</h2>Database management systems are at the core of computer applications that need to store, manipulate, and query data. This course takes a deep dive into how modern database systems function internally, from studying their high-level design to understanding the underlying data structures and algorithms used for efficient data processing. The course covers a range of data management techniques from both commercial systems and cutting-edge research literature, enabling students to apply these techniques to other fields of computer science.<br>
<br>
The covered topics include database architecture, storage manager, data models (row, columnar), indexing (tree-based, hash tables), transaction processing (ACID, concurrency control), crash recovery, parallel architectures (multi-core, distributed), and large-scale data processing systems. These topics will be valuable to students who plan to work in the data science industry but also to students who want to do research in the area of data management. The programming component of this course will allow students to develop first-hand experience working with database systems that goes beyond writing SQL queries.<h2>content</h2>
    
    Lectures will cover roughly the following topics:<br>
- Database systems architectures, row stores and column stores, OLTP vs. OLAP, in-memory database systems<br>
- Storage: secondary-storage devices<br>
- Indexing: tree-based and hash-based techniques, multi-dimensional indexing, learning indices from data<br>
- Query evaluation: theory of query evaluation, sorting and join processing, selection, projection, aggregation<br>
- Query optimisation: cardinality estimation, cost-based query optimisation, dynamic programming, rule-based optimisation<br>
- Transaction management: ACID properties, concurrency control, locking and multi-version protocols, crash recovery<br>
- Distributed database systems: parallel query evaluation, distributed transaction processing<br>
- Big data and NoSQL systems
    
    
",Undergraduate Course: Advanced Database Systems (INFR11199),"Database management systems are at the core of computer applications that need to store, manipulate, and query data. This course takes a deep dive into how modern database systems function internally, from studying their high-level design to understanding the underlying data structures and algorithms used for efficient data processing. The course covers a range of data management techniques from both commercial systems and cutting-edge research literature, enabling students to apply these techniques to other fields of computer science.<br>
<br>
The covered topics include database architecture, storage manager, data models (row, columnar), indexing (tree-based, hash tables), transaction processing (ACID, concurrency control), crash recovery, parallel architectures (multi-core, distributed), and large-scale data processing systems. These topics will be valuable to students who plan to work in the data science industry but also to students who want to do research in the area of data management. The programming component of this course will allow students to develop first-hand experience working with database systems that goes beyond writing SQL queries.","
    
    Lectures will cover roughly the following topics:<br>
- Database systems architectures, row stores and column stores, OLTP vs. OLAP, in-memory database systems<br>
- Storage: secondary-storage devices<br>
- Indexing: tree-based and hash-based techniques, multi-dimensional indexing, learning indices from data<br>
- Query evaluation: theory of query evaluation, sorting and join processing, selection, projection, aggregation<br>
- Query optimisation: cardinality estimation, cost-based query optimisation, dynamic programming, rule-based optimisation<br>
- Transaction management: ACID properties, concurrency control, locking and multi-version protocols, crash recovery<br>
- Distributed database systems: parallel query evaluation, distributed transaction processing<br>
- Big data and NoSQL systems
    
    
",
Edinburgh_Scotland,cxinfr11161,"<h2>Edinburgh_Scotland cxinfr11161</h2><h2>title</h2>Undergraduate Course: Natural Computing (INFR11161)<h2>summary</h2>This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.<h2>content</h2>
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",Undergraduate Course: Natural Computing (INFR11161),"This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.","
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",
Edinburgh_Scotland,cxinfr11201,"<h2>Edinburgh_Scotland cxinfr11201</h2><h2>title</h2>Undergraduate Course: Randomized Algorithms (INFR11201)<h2>summary</h2>This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.<h2>content</h2>
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",Undergraduate Course: Randomized Algorithms (INFR11201),This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.,"
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",
Edinburgh_Scotland,cxinfr11202,"<h2>Edinburgh_Scotland cxinfr11202</h2><h2>title</h2>Undergraduate Course: Machine Learning Theory (INFR11202)<h2>summary</h2>This course is an introduction to the theory of learning algorithms and their properties that are relevant to the widespread use of machine learning. The course starts with the standard mathematical concepts in theoretical ML. It then covers classical analytic results about accuracy, confidence, sample complexity and model complexity. Standard learning/optimisation algorithms are described in this context. In modern research areas such as trustworthy machine learning, several properties including privacy, fairness and interpretablity are considered vital for widespread reliable use of machine learning. These topics are discussed in a mathematical perspective.<br>
<br>
The course aims to provide a firm foundation in reading and understanding mathematical ideas so that students are equipped to follow the latest developments and research, and to interpret relevant properties and tradeoffs. Throughout, the course will take the approach of precise mathematical definition and analysis, coupled with easy examples and intuition to aid understanding.<h2>content</h2>
    
    The following is an indicative list of topics in the course:<br>
<br>
	1. Notations, terminology and formal models.<br>
	2. Learning theory: Empirical risk minimisation and sampling complexity. Probably approximately correct (PAC) guarantees.<br>
	3. Complexity of learning models (e.g. VC dimension) and bias-complexity tradeoff.<br>
	4. Optimization algorithms. Regression, SVM, Stochastic gradient descent and its variants.<br>
	5. Regularization, convexity, stability, Lipschitzness and other properties<br>
	6. Statistical Privacy<br>
	7. Mechanisms for privacy preserving machine learning. Differentially private stochastic gradient descent.<br>
	8. Interpretable machine learning. (E.g. Feature importance)<br>
	9. Fairness.<br>
<br>
The topics will be discussed with reference to standard machine learning techniques, and examples of realistic problems. Our approach will include precise definitions and analysis as well as examples and intuitive explanations. The relevance and domain of applicability of the various concepts will be discussed.<br>
<br>
Tutorials and problem sets will be available to help understanding and exploration of the subject.
    
    
",Undergraduate Course: Machine Learning Theory (INFR11202),"This course is an introduction to the theory of learning algorithms and their properties that are relevant to the widespread use of machine learning. The course starts with the standard mathematical concepts in theoretical ML. It then covers classical analytic results about accuracy, confidence, sample complexity and model complexity. Standard learning/optimisation algorithms are described in this context. In modern research areas such as trustworthy machine learning, several properties including privacy, fairness and interpretablity are considered vital for widespread reliable use of machine learning. These topics are discussed in a mathematical perspective.<br>
<br>
The course aims to provide a firm foundation in reading and understanding mathematical ideas so that students are equipped to follow the latest developments and research, and to interpret relevant properties and tradeoffs. Throughout, the course will take the approach of precise mathematical definition and analysis, coupled with easy examples and intuition to aid understanding.","
    
    The following is an indicative list of topics in the course:<br>
<br>
	1. Notations, terminology and formal models.<br>
	2. Learning theory: Empirical risk minimisation and sampling complexity. Probably approximately correct (PAC) guarantees.<br>
	3. Complexity of learning models (e.g. VC dimension) and bias-complexity tradeoff.<br>
	4. Optimization algorithms. Regression, SVM, Stochastic gradient descent and its variants.<br>
	5. Regularization, convexity, stability, Lipschitzness and other properties<br>
	6. Statistical Privacy<br>
	7. Mechanisms for privacy preserving machine learning. Differentially private stochastic gradient descent.<br>
	8. Interpretable machine learning. (E.g. Feature importance)<br>
	9. Fairness.<br>
<br>
The topics will be discussed with reference to standard machine learning techniques, and examples of realistic problems. Our approach will include precise definitions and analysis as well as examples and intuitive explanations. The relevance and domain of applicability of the various concepts will be discussed.<br>
<br>
Tutorials and problem sets will be available to help understanding and exploration of the subject.
    
    
",
Edinburgh_Scotland,cxinfr11208,"<h2>Edinburgh_Scotland cxinfr11208</h2><h2>title</h2>Undergraduate Course: Security Engineering (INFR11208)<h2>summary</h2>This course aims to give students a thorough understanding of how to engineer security in modern systems. We discuss threat actors from nation states through cybercrime gangs to abuse by family members. We dive into detailed case studies of applications such as payment networks and vehicle systems. We analyse the protection mechanisms of platforms they rely on, such as smartcards, mobile phones and cloud systems. We work through multiple perspectives: classical systems engineering, the psychology of users good and bad, and the incentives facing different actors in the system. This enables students to take a holistic view of security as an emergent property of complex systems, and of related properties such as safety, and to understand how to manage them as systems and their environments evolve.<h2>content</h2>
    
    As ever more devices participate in online systems that become ever more complex, it is ever more important,and more difficult, to manage emergent properties such as security, safety and sustainability. Security engineering is not just about individual mechanisms such as cryptography and access controls but how they work together at scale in real systems. This course will illustrate how to analyse threats and hazards systematically, evolve security policies, integrate them with safety policies and accounting standards as need be, test and certify the resulting systems, and manage their evolution as vulnerabilities are discovered or as their requirements change over time.<br>
<br>
Over the course of 15 lectures we will study how real systems are attacked by a variety of opponents and how their defences evolve to cope. We will look in detail at important applications such as payments, home automation and vehicles. We will look at the psychology of secure design: how we can minimise the risk of attacks involving deception. We will analyse the economics of security: when service providers have adequate incentives to prevent fraud, and where market failure or poor regulation get in the way. <br>
<br>
We will take a deep dive into the protection mechanisms of the underlying platforms, from smartcards through mobile phones to containers, and at whole ecosystems such as phone apps, cloud services and network security. By the end of the course, students should be able to analyse a security problem across the entire systems stack, from the threats and protection goals down through the application and the platforms and if need be to the hardware. They should also appreciate how security interacts with related emergent properties such as safety and sustainability.
    
    
",Undergraduate Course: Security Engineering (INFR11208),"This course aims to give students a thorough understanding of how to engineer security in modern systems. We discuss threat actors from nation states through cybercrime gangs to abuse by family members. We dive into detailed case studies of applications such as payment networks and vehicle systems. We analyse the protection mechanisms of platforms they rely on, such as smartcards, mobile phones and cloud systems. We work through multiple perspectives: classical systems engineering, the psychology of users good and bad, and the incentives facing different actors in the system. This enables students to take a holistic view of security as an emergent property of complex systems, and of related properties such as safety, and to understand how to manage them as systems and their environments evolve.","
    
    As ever more devices participate in online systems that become ever more complex, it is ever more important,and more difficult, to manage emergent properties such as security, safety and sustainability. Security engineering is not just about individual mechanisms such as cryptography and access controls but how they work together at scale in real systems. This course will illustrate how to analyse threats and hazards systematically, evolve security policies, integrate them with safety policies and accounting standards as need be, test and certify the resulting systems, and manage their evolution as vulnerabilities are discovered or as their requirements change over time.<br>
<br>
Over the course of 15 lectures we will study how real systems are attacked by a variety of opponents and how their defences evolve to cope. We will look in detail at important applications such as payments, home automation and vehicles. We will look at the psychology of secure design: how we can minimise the risk of attacks involving deception. We will analyse the economics of security: when service providers have adequate incentives to prevent fraud, and where market failure or poor regulation get in the way. <br>
<br>
We will take a deep dive into the protection mechanisms of the underlying platforms, from smartcards through mobile phones to containers, and at whole ecosystems such as phone apps, cloud services and network security. By the end of the course, students should be able to analyse a security problem across the entire systems stack, from the threats and protection goals down through the application and the platforms and if need be to the hardware. They should also appreciate how security interacts with related emergent properties such as safety and sustainability.
    
    
",
Edinburgh_Scotland,cxinfr11213,"<h2>Edinburgh_Scotland cxinfr11213</h2><h2>title</h2>Postgraduate Course: Advanced Robotics (INFR11213)<h2>summary</h2>***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
<h2>content</h2>
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",Postgraduate Course: Advanced Robotics (INFR11213),"***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
","
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",
Edinburgh_Scotland,cxinfr11217,"<h2>Edinburgh_Scotland cxinfr11217</h2><h2>title</h2>Undergraduate Course: Advanced Database Systems (UG) (INFR11217)<h2>summary</h2>This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",Undergraduate Course: Advanced Database Systems (UG) (INFR11217),"This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.","
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",
Edinburgh_Scotland,cxinfr11218,"<h2>Edinburgh_Scotland cxinfr11218</h2><h2>title</h2>Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)<h2>summary</h2>This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218),"This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.","
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",
Edinburgh_Scotland,cxinfr11220,"<h2>Edinburgh_Scotland cxinfr11220</h2><h2>title</h2>Undergraduate Course: Computer Graphics (Level 11) (UG) (INFR11220)<h2>summary</h2>This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.
    
    
",Undergraduate Course: Computer Graphics (Level 11) (UG) (INFR11220),"This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.","
    
    This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.
    
    
",
Edinburgh_Scotland,cxinfr11221,"<h2>Edinburgh_Scotland cxinfr11221</h2><h2>title</h2>Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221)<h2>summary</h2>This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.
    
    
",Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221),"This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.","
    
    This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.
    
    
",
Edinburgh_Scotland,cxinfr11222,"<h2>Edinburgh_Scotland cxinfr11222</h2><h2>title</h2>Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222)<h2>summary</h2>This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.
    
    
",Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222),"This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.","
    
    This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.
    
    
",
Edinburgh_Scotland,cxinfr11223,"<h2>Edinburgh_Scotland cxinfr11223</h2><h2>title</h2>Undergraduate Course: Machine Learning Practical (UG) (INFR11223)<h2>summary</h2>This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.
    
    
",Undergraduate Course: Machine Learning Practical (UG) (INFR11223),"This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.","
    
    This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.
    
    
",
Edinburgh_Scotland,cxinfr11224,"<h2>Edinburgh_Scotland cxinfr11224</h2><h2>title</h2>Undergraduate Course: Machine Learning Theory (UG) (INFR11224)<h2>summary</h2>This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.
    
    
",Undergraduate Course: Machine Learning Theory (UG) (INFR11224),"This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.","
    
    This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.
    
    
",
Edinburgh_Scotland,cxinfr11226,"<h2>Edinburgh_Scotland cxinfr11226</h2><h2>title</h2>Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)<h2>summary</h2>This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.
    
    
",Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226),"This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.","
    
    This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.
    
    
",
Edinburgh_Scotland,cxinfr11227,"<h2>Edinburgh_Scotland cxinfr11227</h2><h2>title</h2>Undergraduate Course: Quantum Cyber Security (UG) (INFR11227)<h2>summary</h2>This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.
    
    
",Undergraduate Course: Quantum Cyber Security (UG) (INFR11227),"This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.","
    
    This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.
    
    
",
Edinburgh_Scotland,cxinfr11228,"<h2>Edinburgh_Scotland cxinfr11228</h2><h2>title</h2>Undergraduate Course: Security Engineering (UG) (INFR11228)<h2>summary</h2>This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.
    
    
",Undergraduate Course: Security Engineering (UG) (INFR11228),"This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.","
    
    This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.
    
    
",
Edinburgh_Scotland,cxinfr11229,"<h2>Edinburgh_Scotland cxinfr11229</h2><h2>title</h2>Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229)<h2>summary</h2>This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.
    
    
",Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229),"This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.","
    
    This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.
    
    
",
Edinburgh_Scotland,cxinfr11235,"<h2>Edinburgh_Scotland cxinfr11235</h2><h2>title</h2>Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235)<h2>summary</h2>This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.
    
    
",Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235),"This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.","
    
    This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.
    
    
",
Edinburgh_Scotland,cxinfr11238,"<h2>Edinburgh_Scotland cxinfr11238</h2><h2>title</h2>Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238)<h2>summary</h2>This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.
    
    
",Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238),"This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.","
    
    This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.
    
    
",
Edinburgh_Scotland,cxinfr11239,"<h2>Edinburgh_Scotland cxinfr11239</h2><h2>title</h2>Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239)<h2>summary</h2>This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.
    
    
",Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239),"This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.","
    
    This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.
    
    
",
Edinburgh_Scotland,cxinfr10077,"<h2>Edinburgh_Scotland cxinfr10077</h2><h2>title</h2>Undergraduate Course: Computing in the Classroom (INFR10077)<h2>summary</h2>This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.<h2>content</h2>
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",Undergraduate Course: Computing in the Classroom (INFR10077),"This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.","
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",
Edinburgh_Scotland,cxinfr11160,"<h2>Edinburgh_Scotland cxinfr11160</h2><h2>title</h2>Undergraduate Course: Bioinformatics 1 (INFR11160)<h2>summary</h2>**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.<h2>content</h2>
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",Undergraduate Course: Bioinformatics 1 (INFR11160),"**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.","
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",
Edinburgh_Scotland,cxinfr11209,"<h2>Edinburgh_Scotland cxinfr11209</h2><h2>title</h2>Undergraduate Course: Computational Neuroscience (INFR11209)<h2>summary</h2>In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.<h2>content</h2>
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",Undergraduate Course: Computational Neuroscience (INFR11209),"In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.","
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",
Edinburgh_Scotland,cxinfr11219,"<h2>Edinburgh_Scotland cxinfr11219</h2><h2>title</h2>Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219)<h2>summary</h2>This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.
    
    
",Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219),"This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.","
    
    This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.
    
    
",
Edinburgh_Scotland,cxinfr11225,"<h2>Edinburgh_Scotland cxinfr11225</h2><h2>title</h2>Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)<h2>summary</h2>This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.
    
    
","Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)","This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.","
    
    This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.
    
    
",
Glasgow_Scotland,COMPSCI4091,"<h2>Glasgow_Scotland COMPSCI4091</h2><h2>title</h2>Advanced Networked Systems (H) COMPSCI4091<h2>summary</h2><p id=""_COMPSCI40910""><span id=""_COMPSCI40911"">The course aims to give students a deep understanding of the fundamental design, implementation, management, and evaluation principles that govern large-scale, high-speed networked systems. These include algorithmic and implementation techniques for high-speed networking in routers and end-nodes; systems performance measurement and modelling principles; network and system resource management, allocation and engineering schemes; and research and technological advances that drive the development of a converged, global telecommunications medium of the future.</span></p><h2>content</h2><p id=""_COMPSCI409131""><span id=""_COMPSCI409132"">Computer networks have become an integral part of society - we take for granted the ability to transact commerce over the Internet, to store documents online, and that users can avail themselves of a growing set of communication methods, ranging from file sharing to social networking and video conferencing. Moreover, computer networks underpin a lot of recent paradigm-shifting advances in ICT, from Cloud Computing, to Smart Cities and the Internet of Things.</span></p><p id=""_COMPSCI409133"">&nbsp;</p><p id=""_COMPSCI409134""><span id=""_COMPSCI409135"">To support the seamless provision of all these advanced services, computer networks engage a complex set of interconnected systems and components whose design is governed by principles across the spectrum of Computing Science and Engineering: from hardware and software architecture, to protocols and algorithms, to analysis and modelling. </span></p><p id=""_COMPSCI409136""><span id=""_COMPSCI409137"">This course will therefore adopt a holistic systems thinking instead of the 'black-box' thinking that often results from treating concepts (such as, e.g., algorithms, OS, networking) in isolation.</span></p><p id=""_COMPSCI409138"">&nbsp;</p><p id=""_COMPSCI409139"">&nbsp;</p><p id=""_COMPSCI409140""><span id=""_COMPSCI409141"">1. </span><span id=""_COMPSCI409142"">The course </span><span id=""_COMPSCI409143"">will look at 'network algorithmics' as an interdisciplinary systems approach to streamlining network stack implementations in routers and end-nodes, and understand the bottlenecks that need to be overcome in order to meet strict performance requirements.</span></p><p id=""_COMPSCI409144""><span id=""_COMPSCI409145"">2. </span><span id=""_COMPSCI409146"">The course </span><span id=""_COMPSCI409147"">will </span><span id=""_COMPSCI409148"">cover </span><span id=""_COMPSCI409149"">the importance of high performance in network design and implementation, and understand the need for building networked systems that are on par with ever increasing physical link capacities (you can buy more bandwidth, but cannot buy less delay). In doing so, ways to measure network performance</span><span id=""_COMPSCI409150"">&nbsp;will be explored</span><span id=""_COMPSCI409151"">, and also approaches to evaluating and analysing the performance of networked systems. Students will therefore be able to generalise and reason about the capabilities and limitations of different processing and service models. </span></p><p id=""_COMPSCI409152""><span id=""_COMPSCI409153"">3. </span><span id=""_COMPSCI409154"">In addition, the course</span><span id=""_COMPSCI409155"">&nbsp;will look at algorithms and technologies for efficient and fair resource usage, </span><span id=""_COMPSCI409156"">and students will </span><span id=""_COMPSCI409157"">understand the importance of end-to-end protocol design and traffic engineering. </span><span id=""_COMPSCI409158"">For example, students</span><span id=""_COMPSCI409159"">&nbsp;will understand why, in networks, packet loss is not an isolated incident 'when things go wrong' but the norm: a mechanism based on which the appropriate feedback loops</span><span id=""_COMPSCI409160"">&nbsp;can be created </span><span id=""_COMPSCI409161"">to ensure that the underlying resources are used fully and shared equally.</span></p><p id=""_COMPSCI409162""><span id=""_COMPSCI409163"">4. </span><span id=""_COMPSCI409164"">The course will also </span><span id=""_COMPSCI409165"">look at recent technological and research advances in emerging</span><span id=""_COMPSCI409166"">&nbsp;computer networking technologies and protocols. For example, Data Centre / Cloud networking for achieving </span><span id=""_COMPSCI409167"">full bi-section bandwidth; Software-Defined Networking (SDN) as a transformative paradigm aiming to logically centralise the network control plane; Network Function Virtualisation (NFV) as an approach to embed add-on services on top of connectivity in network infrastructures; </span><span id=""_COMPSCI409168"">Resilient networked systems.</span></p><p id=""_COMPSCI409169"">&nbsp;</p><p id=""_COMPSCI409170"">&nbsp;</p><p id=""_COMPSCI409171""><span id=""_COMPSCI409172"">By the end of this course, students will have a deep understanding of the design and implementation principles for building high-performance inter-connected systems, as well as specialist knowledge in advances in computer networking technology. This course will be particularly suitable for students who aspire to successful careers either in systems research, or in diverse industry sectors ranging from global (e.g., Google, Facebook, Amazon) to local (e.g., the banking sector) infrastructure operators, to equipment vendors (e.g., Cisco, Huawei, Ericson) and Internet Service Providers (e.g., BT).</span></p><h2>ilo</h2><p id=""_COMPSCI409173""><span id=""_COMPSCI409174"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI409175""><span id=""_COMPSCI409176"">1.</span><span id=""_COMPSCI409177"">	Articulate the key challenges in building high-speed networked systems </span></p><p id=""_COMPSCI409178""><span id=""_COMPSCI409179"">2.</span><span id=""_COMPSCI409180"">	</span><span id=""_COMPSCI409181"">Illustrate </span><span id=""_COMPSCI409182"">the design and im</span><span id=""_COMPSCI409183"">plement</span><span id=""_COMPSCI409184"">ation </span><span id=""_COMPSCI409185"">implications</span><span id=""_COMPSCI409186"">&nbsp;</span><span id=""_COMPSCI409187"">for high-performance networked systems, </span><span id=""_COMPSCI409188""><br></span><span id=""_COMPSCI409189"">	p</span><span id=""_COMPSCI409190"">rotocols, and algorithms</span></p><p id=""_COMPSCI409191""><span id=""_COMPSCI409192"">3.</span><span id=""_COMPSCI409193"">	Design and conduct experiments over diverse networked infrastructures </span></p><p id=""_COMPSCI409194""><span id=""_COMPSCI409195"">4.</span><span id=""_COMPSCI409196"">Outline and critique advances in networking technology and systems</span></p>",Advanced Networked Systems (H) COMPSCI4091,"<p id=""_COMPSCI40910""><span id=""_COMPSCI40911"">The course aims to give students a deep understanding of the fundamental design, implementation, management, and evaluation principles that govern large-scale, high-speed networked systems. These include algorithmic and implementation techniques for high-speed networking in routers and end-nodes; systems performance measurement and modelling principles; network and system resource management, allocation and engineering schemes; and research and technological advances that drive the development of a converged, global telecommunications medium of the future.</span></p>","<p id=""_COMPSCI409131""><span id=""_COMPSCI409132"">Computer networks have become an integral part of society - we take for granted the ability to transact commerce over the Internet, to store documents online, and that users can avail themselves of a growing set of communication methods, ranging from file sharing to social networking and video conferencing. Moreover, computer networks underpin a lot of recent paradigm-shifting advances in ICT, from Cloud Computing, to Smart Cities and the Internet of Things.</span></p><p id=""_COMPSCI409133"">&nbsp;</p><p id=""_COMPSCI409134""><span id=""_COMPSCI409135"">To support the seamless provision of all these advanced services, computer networks engage a complex set of interconnected systems and components whose design is governed by principles across the spectrum of Computing Science and Engineering: from hardware and software architecture, to protocols and algorithms, to analysis and modelling. </span></p><p id=""_COMPSCI409136""><span id=""_COMPSCI409137"">This course will therefore adopt a holistic systems thinking instead of the 'black-box' thinking that often results from treating concepts (such as, e.g., algorithms, OS, networking) in isolation.</span></p><p id=""_COMPSCI409138"">&nbsp;</p><p id=""_COMPSCI409139"">&nbsp;</p><p id=""_COMPSCI409140""><span id=""_COMPSCI409141"">1. </span><span id=""_COMPSCI409142"">The course </span><span id=""_COMPSCI409143"">will look at 'network algorithmics' as an interdisciplinary systems approach to streamlining network stack implementations in routers and end-nodes, and understand the bottlenecks that need to be overcome in order to meet strict performance requirements.</span></p><p id=""_COMPSCI409144""><span id=""_COMPSCI409145"">2. </span><span id=""_COMPSCI409146"">The course </span><span id=""_COMPSCI409147"">will </span><span id=""_COMPSCI409148"">cover </span><span id=""_COMPSCI409149"">the importance of high performance in network design and implementation, and understand the need for building networked systems that are on par with ever increasing physical link capacities (you can buy more bandwidth, but cannot buy less delay). In doing so, ways to measure network performance</span><span id=""_COMPSCI409150"">&nbsp;will be explored</span><span id=""_COMPSCI409151"">, and also approaches to evaluating and analysing the performance of networked systems. Students will therefore be able to generalise and reason about the capabilities and limitations of different processing and service models. </span></p><p id=""_COMPSCI409152""><span id=""_COMPSCI409153"">3. </span><span id=""_COMPSCI409154"">In addition, the course</span><span id=""_COMPSCI409155"">&nbsp;will look at algorithms and technologies for efficient and fair resource usage, </span><span id=""_COMPSCI409156"">and students will </span><span id=""_COMPSCI409157"">understand the importance of end-to-end protocol design and traffic engineering. </span><span id=""_COMPSCI409158"">For example, students</span><span id=""_COMPSCI409159"">&nbsp;will understand why, in networks, packet loss is not an isolated incident 'when things go wrong' but the norm: a mechanism based on which the appropriate feedback loops</span><span id=""_COMPSCI409160"">&nbsp;can be created </span><span id=""_COMPSCI409161"">to ensure that the underlying resources are used fully and shared equally.</span></p><p id=""_COMPSCI409162""><span id=""_COMPSCI409163"">4. </span><span id=""_COMPSCI409164"">The course will also </span><span id=""_COMPSCI409165"">look at recent technological and research advances in emerging</span><span id=""_COMPSCI409166"">&nbsp;computer networking technologies and protocols. For example, Data Centre / Cloud networking for achieving </span><span id=""_COMPSCI409167"">full bi-section bandwidth; Software-Defined Networking (SDN) as a transformative paradigm aiming to logically centralise the network control plane; Network Function Virtualisation (NFV) as an approach to embed add-on services on top of connectivity in network infrastructures; </span><span id=""_COMPSCI409168"">Resilient networked systems.</span></p><p id=""_COMPSCI409169"">&nbsp;</p><p id=""_COMPSCI409170"">&nbsp;</p><p id=""_COMPSCI409171""><span id=""_COMPSCI409172"">By the end of this course, students will have a deep understanding of the design and implementation principles for building high-performance inter-connected systems, as well as specialist knowledge in advances in computer networking technology. This course will be particularly suitable for students who aspire to successful careers either in systems research, or in diverse industry sectors ranging from global (e.g., Google, Facebook, Amazon) to local (e.g., the banking sector) infrastructure operators, to equipment vendors (e.g., Cisco, Huawei, Ericson) and Internet Service Providers (e.g., BT).</span></p>","<p id=""_COMPSCI409173""><span id=""_COMPSCI409174"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI409175""><span id=""_COMPSCI409176"">1.</span><span id=""_COMPSCI409177"">	Articulate the key challenges in building high-speed networked systems </span></p><p id=""_COMPSCI409178""><span id=""_COMPSCI409179"">2.</span><span id=""_COMPSCI409180"">	</span><span id=""_COMPSCI409181"">Illustrate </span><span id=""_COMPSCI409182"">the design and im</span><span id=""_COMPSCI409183"">plement</span><span id=""_COMPSCI409184"">ation </span><span id=""_COMPSCI409185"">implications</span><span id=""_COMPSCI409186"">&nbsp;</span><span id=""_COMPSCI409187"">for high-performance networked systems, </span><span id=""_COMPSCI409188""><br></span><span id=""_COMPSCI409189"">	p</span><span id=""_COMPSCI409190"">rotocols, and algorithms</span></p><p id=""_COMPSCI409191""><span id=""_COMPSCI409192"">3.</span><span id=""_COMPSCI409193"">	Design and conduct experiments over diverse networked infrastructures </span></p><p id=""_COMPSCI409194""><span id=""_COMPSCI409195"">4.</span><span id=""_COMPSCI409196"">Outline and critique advances in networking technology and systems</span></p>"
Glasgow_Scotland,COMPSCI4071,"<h2>Glasgow_Scotland COMPSCI4071</h2><h2>title</h2>Advanced Software Engineering Practices (H) COMPSCI4071<h2>summary</h2><p id=""_COMPSCI40710""><span id=""_COMPSCI40711"">This course </span><span id=""_COMPSCI40712"">gives</span><span id=""_COMPSCI40713"">&nbsp;students</span><span id=""_COMPSCI40714"">&nbsp;</span><span id=""_COMPSCI40715"">the opportunity </span><span id=""_COMPSCI40716"">to learn and practice</span><span id=""_COMPSCI40717"">&nbsp;advanced </span><span id=""_COMPSCI40718"">prin</span><span id=""_COMPSCI40719"">ciples, methods and tools </span><span id=""_COMPSCI407110"">in </span><span id=""_COMPSCI407111"">S</span><span id=""_COMPSCI407112"">oftware </span><span id=""_COMPSCI407113"">Engineering.</span><span id=""_COMPSCI407114"">&nbsp; The course is intended for students who have experience of software development through a summer internship or similar. The course covers technical and management</span><span id=""_COMPSCI407115"">&nbsp;skills that are needed for mentoring and </span><span id=""_COMPSCI407116"">leading teams of software developers.  The course is</span><span id=""_COMPSCI407117"">&nbsp;delivered in collaboration with a</span><span id=""_COMPSCI407118"">n</span><span id=""_COMPSCI407119"">&nbsp;established software industry partner</span><span id=""_COMPSCI407120"">&nbsp;(JP Morgan)</span><span id=""_COMPSCI407121"">.</span></p><h2>content</h2><p id=""_COMPSCI407175""><span id=""_COMPSCI407176"">To introduce advanced principles, methods an</span><span id=""_COMPSCI407177"">d tools in</span><span id=""_COMPSCI407178"">&nbsp;</span><span id=""_COMPSCI407179"">S</span><span id=""_COMPSCI407180"">oftwa</span><span id=""_COMPSCI407181"">re Engineering.</span></p><p id=""_COMPSCI407182""><span id=""_COMPSCI407183"">To introduce techniques for effective working in software teams in a mentoring role, </span></p><p id=""_COMPSCI407184""><span id=""_COMPSCI407185"">To expose students to the practicalities and reality of software engineering in industry.</span></p><h2>ilo</h2><p id=""_COMPSCI407186""><span id=""_COMPSCI407187"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407188""><span id=""_COMPSCI407189"">1. </span><span id=""_COMPSCI407190"">Explain a range of advanced practices in software engineering including change management, requirements negotiation and prioritisation, software architectural decision making, continuous integration and agile project management</span><span id=""_COMPSCI407191"">;</span></p><p id=""_COMPSCI407192""><span id=""_COMPSCI407193"">2. </span><span id=""_COMPSCI407194"">Apply and adapt mentoring techniques for working with less experienced colleagues</span><span id=""_COMPSCI407195"">;</span></p><p id=""_COMPSCI407196""><span id=""_COMPSCI407197"">3. </span><span id=""_COMPSCI407198"">Identify, plan, implement and evaluate improvements to team software processes</span><span id=""_COMPSCI407199"">;</span></p><p id=""_COMPSCI4071100""><span id=""_COMPSCI4071101"">4. </span><span id=""_COMPSCI4071102"">Be aware of the limitations of existing software engineering practices in large scale systems development.</span></p>",Advanced Software Engineering Practices (H) COMPSCI4071,"<p id=""_COMPSCI40710""><span id=""_COMPSCI40711"">This course </span><span id=""_COMPSCI40712"">gives</span><span id=""_COMPSCI40713"">&nbsp;students</span><span id=""_COMPSCI40714"">&nbsp;</span><span id=""_COMPSCI40715"">the opportunity </span><span id=""_COMPSCI40716"">to learn and practice</span><span id=""_COMPSCI40717"">&nbsp;advanced </span><span id=""_COMPSCI40718"">prin</span><span id=""_COMPSCI40719"">ciples, methods and tools </span><span id=""_COMPSCI407110"">in </span><span id=""_COMPSCI407111"">S</span><span id=""_COMPSCI407112"">oftware </span><span id=""_COMPSCI407113"">Engineering.</span><span id=""_COMPSCI407114"">&nbsp; The course is intended for students who have experience of software development through a summer internship or similar. The course covers technical and management</span><span id=""_COMPSCI407115"">&nbsp;skills that are needed for mentoring and </span><span id=""_COMPSCI407116"">leading teams of software developers.  The course is</span><span id=""_COMPSCI407117"">&nbsp;delivered in collaboration with a</span><span id=""_COMPSCI407118"">n</span><span id=""_COMPSCI407119"">&nbsp;established software industry partner</span><span id=""_COMPSCI407120"">&nbsp;(JP Morgan)</span><span id=""_COMPSCI407121"">.</span></p>","<p id=""_COMPSCI407175""><span id=""_COMPSCI407176"">To introduce advanced principles, methods an</span><span id=""_COMPSCI407177"">d tools in</span><span id=""_COMPSCI407178"">&nbsp;</span><span id=""_COMPSCI407179"">S</span><span id=""_COMPSCI407180"">oftwa</span><span id=""_COMPSCI407181"">re Engineering.</span></p><p id=""_COMPSCI407182""><span id=""_COMPSCI407183"">To introduce techniques for effective working in software teams in a mentoring role, </span></p><p id=""_COMPSCI407184""><span id=""_COMPSCI407185"">To expose students to the practicalities and reality of software engineering in industry.</span></p>","<p id=""_COMPSCI407186""><span id=""_COMPSCI407187"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407188""><span id=""_COMPSCI407189"">1. </span><span id=""_COMPSCI407190"">Explain a range of advanced practices in software engineering including change management, requirements negotiation and prioritisation, software architectural decision making, continuous integration and agile project management</span><span id=""_COMPSCI407191"">;</span></p><p id=""_COMPSCI407192""><span id=""_COMPSCI407193"">2. </span><span id=""_COMPSCI407194"">Apply and adapt mentoring techniques for working with less experienced colleagues</span><span id=""_COMPSCI407195"">;</span></p><p id=""_COMPSCI407196""><span id=""_COMPSCI407197"">3. </span><span id=""_COMPSCI407198"">Identify, plan, implement and evaluate improvements to team software processes</span><span id=""_COMPSCI407199"">;</span></p><p id=""_COMPSCI4071100""><span id=""_COMPSCI4071101"">4. </span><span id=""_COMPSCI4071102"">Be aware of the limitations of existing software engineering practices in large scale systems development.</span></p>"
Glasgow_Scotland,COMPSCI4089,"<h2>Glasgow_Scotland COMPSCI4089</h2><h2>title</h2>Advanced Systems Programming (H) COMPSCI4089<h2>summary</h2><p id=""_COMPSCI40890""><span id=""_COMPSCI40891"">This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.</span></p><h2>content</h2><p id=""_COMPSCI408927""><span id=""_COMPSCI408928"">The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system. </span></p><p id=""_COMPSCI408929"">&nbsp;</p><p id=""_COMPSCI408930""><span id=""_COMPSCI408931"">The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing</span><span id=""_COMPSCI408932"">&nbsp;</span><span id=""_COMPSCI408933"">systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.</span></p><h2>ilo</h2><p id=""_COMPSCI408935""><span id=""_COMPSCI408936"">By the end of this</span><span id=""_COMPSCI408937"">&nbsp;course students will be able</span><span id=""_COMPSCI408938"">&nbsp;to</span><span id=""_COMPSCI408939"">:</span></p><p id=""_COMPSCI408940""><span id=""_COMPSCI408941"">■&nbsp;</span><span id=""_COMPSCI408942"">Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust; </span><span id=""_COMPSCI408943"">to </span><span id=""_COMPSCI408944"">d</span><span id=""_COMPSCI408945"">iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;</span></p><p id=""_COMPSCI408946""><span id=""_COMPSCI408947"">■&nbsp;</span><span id=""_COMPSCI408948"">Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;</span></p><p id=""_COMPSCI408949""><span id=""_COMPSCI408950"">■&nbsp;</span><span id=""_COMPSCI408951"">Discuss the advantages and disadvantages of integrating automatic memory management with the operating system/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and/or operating systems; </span></p><p id=""_COMPSCI408952""><span id=""_COMPSCI408953"">■&nbsp;</span><span id=""_COMPSCI408954"">Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and</span></p><p id=""_COMPSCI408955""><span id=""_COMPSCI408956"">■&nbsp;</span><span id=""_COMPSCI408957"">Construct and/or analyse simple programming to demonstrate understanding of novel techniques for memory management and/or concurrent programming, to understand the trade-offs and implementation decisions.</span></p>",Advanced Systems Programming (H) COMPSCI4089,"<p id=""_COMPSCI40890""><span id=""_COMPSCI40891"">This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.</span></p>","<p id=""_COMPSCI408927""><span id=""_COMPSCI408928"">The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system. </span></p><p id=""_COMPSCI408929"">&nbsp;</p><p id=""_COMPSCI408930""><span id=""_COMPSCI408931"">The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing</span><span id=""_COMPSCI408932"">&nbsp;</span><span id=""_COMPSCI408933"">systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.</span></p>","<p id=""_COMPSCI408935""><span id=""_COMPSCI408936"">By the end of this</span><span id=""_COMPSCI408937"">&nbsp;course students will be able</span><span id=""_COMPSCI408938"">&nbsp;to</span><span id=""_COMPSCI408939"">:</span></p><p id=""_COMPSCI408940""><span id=""_COMPSCI408941"">■&nbsp;</span><span id=""_COMPSCI408942"">Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust; </span><span id=""_COMPSCI408943"">to </span><span id=""_COMPSCI408944"">d</span><span id=""_COMPSCI408945"">iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;</span></p><p id=""_COMPSCI408946""><span id=""_COMPSCI408947"">■&nbsp;</span><span id=""_COMPSCI408948"">Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;</span></p><p id=""_COMPSCI408949""><span id=""_COMPSCI408950"">■&nbsp;</span><span id=""_COMPSCI408951"">Discuss the advantages and disadvantages of integrating automatic memory management with the operating system/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and/or operating systems; </span></p><p id=""_COMPSCI408952""><span id=""_COMPSCI408953"">■&nbsp;</span><span id=""_COMPSCI408954"">Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and</span></p><p id=""_COMPSCI408955""><span id=""_COMPSCI408956"">■&nbsp;</span><span id=""_COMPSCI408957"">Construct and/or analyse simple programming to demonstrate understanding of novel techniques for memory management and/or concurrent programming, to understand the trade-offs and implementation decisions.</span></p>"
Glasgow_Scotland,COMPSCI4003,"<h2>Glasgow_Scotland COMPSCI4003</h2><h2>title</h2>Algorithmics II (H) COMPSCI4003<h2>summary</h2><p id=""_COMPSCI40030""><span id=""_COMPSCI40031"">The aims of the course are: </span></p><p id=""_COMPSCI40032""><span id=""_COMPSCI40033"">To present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span></p><p id=""_COMPSCI40034""><span id=""_COMPSCI40035"">To enable students to make educated choices between strategies for algorithmic problem-solving;</span></p><p id=""_COMPSCI40036""><span id=""_COMPSCI40037"">To convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p><h2>content</h2><p id=""_COMPSCI400339""><span id=""_COMPSCI400340"">The aims of the course are: </span></p><p id=""_COMPSCI400341""><span id=""_COMPSCI400342"">T</span><span id=""_COMPSCI400343"">o present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span><span id=""_COMPSCI400344"">&nbsp;</span><span id=""_COMPSCI400345"">to enable students to make educated choices between strategies for algorithmic problem-solving;</span><span id=""_COMPSCI400346"">&nbsp;</span><span id=""_COMPSCI400347"">to convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p><h2>ilo</h2><p id=""_COMPSCI400348""><span id=""_COMPSCI400349"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400350""><span id=""_COMPSCI400351"">1. </span><span id=""_COMPSCI400352"">Describe a wide range of efficient algorithms for problems with important applications in domains such as computational geometry, string processing and graph theory;</span></p><p id=""_COMPSCI400353""><span id=""_COMPSCI400354"">2. </span><span id=""_COMPSCI400355"">Discuss why these algorithms are correct, and prove their correctness;</span></p><p id=""_COMPSCI400356""><span id=""_COMPSCI400357"">3. </span><span id=""_COMPSCI400358"">Demonstrate the execution of such algorithms as applied to typical problem instances;</span></p><p id=""_COMPSCI400359""><span id=""_COMPSCI400360"">4. </span><span id=""_COMPSCI400361"">Characterise and manipulate advanced data structures such as the suffix tree;</span></p><p id=""_COMPSCI400362""><span id=""_COMPSCI400363"">5. </span><span id=""_COMPSCI400364"">Apply algorithmic techniques to specific problems motivated by practical applications;</span></p><p id=""_COMPSCI400365""><span id=""_COMPSCI400366"">6. </span><span id=""_COMPSCI400367"">Analyse the worst-case complexity of algorithms using a variety of mathematical techniques;</span></p><p id=""_COMPSCI400368""><span id=""_COMPSCI400369"">7. </span><span id=""_COMPSCI400370"">Discuss the theory and practical implications of NP-completeness;</span></p><p id=""_COMPSCI400371""><span id=""_COMPSCI400372"">8. </span><span id=""_COMPSCI400373"">Explain techniques for coping with complexity, such as backtracking algorithms, pseudo-polynomial-time algorithms, constant-factor approximation algorithms, and polynomial-time approximation schemes;</span></p><p id=""_COMPSCI400374""><span id=""_COMPSCI400375"">9. </span><span id=""_COMPSCI400376"">Construct proofs of NP-completeness and </span><span id=""_COMPSCI400377"">inapproximability</span><span id=""_COMPSCI400378"">&nbsp;results.</span></p>",Algorithmics II (H) COMPSCI4003,"<p id=""_COMPSCI40030""><span id=""_COMPSCI40031"">The aims of the course are: </span></p><p id=""_COMPSCI40032""><span id=""_COMPSCI40033"">To present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span></p><p id=""_COMPSCI40034""><span id=""_COMPSCI40035"">To enable students to make educated choices between strategies for algorithmic problem-solving;</span></p><p id=""_COMPSCI40036""><span id=""_COMPSCI40037"">To convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p>","<p id=""_COMPSCI400339""><span id=""_COMPSCI400340"">The aims of the course are: </span></p><p id=""_COMPSCI400341""><span id=""_COMPSCI400342"">T</span><span id=""_COMPSCI400343"">o present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span><span id=""_COMPSCI400344"">&nbsp;</span><span id=""_COMPSCI400345"">to enable students to make educated choices between strategies for algorithmic problem-solving;</span><span id=""_COMPSCI400346"">&nbsp;</span><span id=""_COMPSCI400347"">to convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p>","<p id=""_COMPSCI400348""><span id=""_COMPSCI400349"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400350""><span id=""_COMPSCI400351"">1. </span><span id=""_COMPSCI400352"">Describe a wide range of efficient algorithms for problems with important applications in domains such as computational geometry, string processing and graph theory;</span></p><p id=""_COMPSCI400353""><span id=""_COMPSCI400354"">2. </span><span id=""_COMPSCI400355"">Discuss why these algorithms are correct, and prove their correctness;</span></p><p id=""_COMPSCI400356""><span id=""_COMPSCI400357"">3. </span><span id=""_COMPSCI400358"">Demonstrate the execution of such algorithms as applied to typical problem instances;</span></p><p id=""_COMPSCI400359""><span id=""_COMPSCI400360"">4. </span><span id=""_COMPSCI400361"">Characterise and manipulate advanced data structures such as the suffix tree;</span></p><p id=""_COMPSCI400362""><span id=""_COMPSCI400363"">5. </span><span id=""_COMPSCI400364"">Apply algorithmic techniques to specific problems motivated by practical applications;</span></p><p id=""_COMPSCI400365""><span id=""_COMPSCI400366"">6. </span><span id=""_COMPSCI400367"">Analyse the worst-case complexity of algorithms using a variety of mathematical techniques;</span></p><p id=""_COMPSCI400368""><span id=""_COMPSCI400369"">7. </span><span id=""_COMPSCI400370"">Discuss the theory and practical implications of NP-completeness;</span></p><p id=""_COMPSCI400371""><span id=""_COMPSCI400372"">8. </span><span id=""_COMPSCI400373"">Explain techniques for coping with complexity, such as backtracking algorithms, pseudo-polynomial-time algorithms, constant-factor approximation algorithms, and polynomial-time approximation schemes;</span></p><p id=""_COMPSCI400374""><span id=""_COMPSCI400375"">9. </span><span id=""_COMPSCI400376"">Construct proofs of NP-completeness and </span><span id=""_COMPSCI400377"">inapproximability</span><span id=""_COMPSCI400378"">&nbsp;results.</span></p>"
Glasgow_Scotland,COMPSCI4004,"<h2>Glasgow_Scotland COMPSCI4004</h2><h2>title</h2>Artificial Intelligence (H) COMPSCI4004<h2>summary</h2><p id=""_COMPSCI40040""><span id=""_COMPSCI40041"">Artificial Intelligence </span><span id=""_COMPSCI40042"">(</span><span id=""_COMPSCI40043"">H</span><span id=""_COMPSCI40044"">)</span><span id=""_COMPSCI40045"">&nbsp;is an introduction to Artificial Intelligence, giving the students an overview of intelligent agent design.</span></p><h2>content</h2><p id=""_COMPSCI400466""><span id=""_COMPSCI400467"">The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.  </span><span id=""_COMPSCI400468"">Students will gain practical experience in labs, programming various aspects of intelligent systems.</span></p><h2>ilo</h2><p id=""_COMPSCI400472""><span id=""_COMPSCI400473"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400474""><span id=""_COMPSCI400475"">1. </span><span id=""_COMPSCI400476"">Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of</span><span id=""_COMPSCI400477"">&nbsp;</span><span id=""_COMPSCI400478"">the subject in its current form;</span></p><p id=""_COMPSCI400479""><span id=""_COMPSCI400480"">2. </span><span id=""_COMPSCI400481"">Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems etc</span></p><p id=""_COMPSCI400482""><span id=""_COMPSCI400483"">3. </span><span id=""_COMPSCI400484"">Discuss difficulties in computer perception;</span></p><p id=""_COMPSCI400485""><span id=""_COMPSCI400486"">4. </span><span id=""_COMPSCI400487"">Discuss basic issues in planning;</span></p><p id=""_COMPSCI400488""><span id=""_COMPSCI400489"">5. </span><span id=""_COMPSCI400490"">Explain and apply search-based problem-solving techniques;</span></p><p id=""_COMPSCI400491""><span id=""_COMPSCI400492"">6. </span><span id=""_COMPSCI400493"">Formulate and apply Bayesian networks in modelling and planning;</span></p><p id=""_COMPSCI400494""><span id=""_COMPSCI400495"">7. </span><span id=""_COMPSCI400496"">Explain and apply utility theory as a probabilistic framework for rational decision making;</span></p><p id=""_COMPSCI400497""><span id=""_COMPSCI400498"">8. </span><span id=""_COMPSCI400499"">Explain and apply basic machine learning techniques to learn from rewards and observations</span><span id=""_COMPSCI4004100"">.</span></p>",Artificial Intelligence (H) COMPSCI4004,"<p id=""_COMPSCI40040""><span id=""_COMPSCI40041"">Artificial Intelligence </span><span id=""_COMPSCI40042"">(</span><span id=""_COMPSCI40043"">H</span><span id=""_COMPSCI40044"">)</span><span id=""_COMPSCI40045"">&nbsp;is an introduction to Artificial Intelligence, giving the students an overview of intelligent agent design.</span></p>","<p id=""_COMPSCI400466""><span id=""_COMPSCI400467"">The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.  </span><span id=""_COMPSCI400468"">Students will gain practical experience in labs, programming various aspects of intelligent systems.</span></p>","<p id=""_COMPSCI400472""><span id=""_COMPSCI400473"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400474""><span id=""_COMPSCI400475"">1. </span><span id=""_COMPSCI400476"">Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of</span><span id=""_COMPSCI400477"">&nbsp;</span><span id=""_COMPSCI400478"">the subject in its current form;</span></p><p id=""_COMPSCI400479""><span id=""_COMPSCI400480"">2. </span><span id=""_COMPSCI400481"">Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems etc</span></p><p id=""_COMPSCI400482""><span id=""_COMPSCI400483"">3. </span><span id=""_COMPSCI400484"">Discuss difficulties in computer perception;</span></p><p id=""_COMPSCI400485""><span id=""_COMPSCI400486"">4. </span><span id=""_COMPSCI400487"">Discuss basic issues in planning;</span></p><p id=""_COMPSCI400488""><span id=""_COMPSCI400489"">5. </span><span id=""_COMPSCI400490"">Explain and apply search-based problem-solving techniques;</span></p><p id=""_COMPSCI400491""><span id=""_COMPSCI400492"">6. </span><span id=""_COMPSCI400493"">Formulate and apply Bayesian networks in modelling and planning;</span></p><p id=""_COMPSCI400494""><span id=""_COMPSCI400495"">7. </span><span id=""_COMPSCI400496"">Explain and apply utility theory as a probabilistic framework for rational decision making;</span></p><p id=""_COMPSCI400497""><span id=""_COMPSCI400498"">8. </span><span id=""_COMPSCI400499"">Explain and apply basic machine learning techniques to learn from rewards and observations</span><span id=""_COMPSCI4004100"">.</span></p>"
Glasgow_Scotland,COMPSCI4064,"<h2>Glasgow_Scotland COMPSCI4064</h2><h2>title</h2>Big Data: Systems, Programming, and Management (H) COMPSCI4064<h2>summary</h2><p id=""_COMPSCI40640""><span id=""_COMPSCI40641"">Big Da</span><span id=""_COMPSCI40642"">ta is nowadays manifested in a </span><span id=""_COMPSCI40643"">very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.</span></p><h2>content</h2><p id=""_COMPSCI406427""><span id=""_COMPSCI406428"">The course aims to endow students with:</span></p><p id=""_COMPSCI406429""><span id=""_COMPSCI406430"">An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.</span></p><p id=""_COMPSCI406431""><span id=""_COMPSCI406432"">Exposure to a number of different cloud </span><span id=""_COMPSCI406433"">data stores</span><span id=""_COMPSCI406434"">&nbsp;and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.</span></p><p id=""_COMPSCI406435""><span id=""_COMPSCI406436"">Familiarity with </span><span id=""_COMPSCI406437"">modern </span><span id=""_COMPSCI406438"">programming paradigm</span><span id=""_COMPSCI406439"">s (e.g., MapReduce, RDDs, etc.)</span><span id=""_COMPSCI406440"">, so to enable them to write programs which can execute in massively parallel infrastructures in the cloud.</span></p><p id=""_COMPSCI406441""><span id=""_COMPSCI406442"">The ability to understand the internals of </span><span id=""_COMPSCI406443"">(</span><span id=""_COMPSCI406444"">NoSQL</span><span id=""_COMPSCI406445"">)</span><span id=""_COMPSCI406446"">&nbsp;cloud </span><span id=""_COMPSCI406447"">data </span><span id=""_COMPSCI406448"">storage systems and the ability to enrich these systems with additional functionality.</span></p><h2>ilo</h2><p id=""_COMPSCI406450""><span id=""_COMPSCI406451"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI406452""><span id=""_COMPSCI406453"">1. </span><span id=""_COMPSCI406454"">Design</span><span id=""_COMPSCI406455"">,</span><span id=""_COMPSCI406456"">&nbsp;employ </span><span id=""_COMPSCI406457"">and evaluate </span><span id=""_COMPSCI406458"">programs to access big data repositories in a massively parallel manner</span><span id=""_COMPSCI406459"">;</span></p><p id=""_COMPSCI406460""><span id=""_COMPSCI406461"">2. </span><span id=""_COMPSCI406462"">D</span><span id=""_COMPSCI406463"">escribe and </span><span id=""_COMPSCI406464"">contrast</span><span id=""_COMPSCI406465"">&nbsp;the internals of the design and implementation</span><span id=""_COMPSCI406466"">&nbsp;of current cloud </span><span id=""_COMPSCI406467"">data storage </span><span id=""_COMPSCI406468"">and processing </span><span id=""_COMPSCI406469"">systems; </span></p><p id=""_COMPSCI406470""><span id=""_COMPSCI406471"">3. </span><span id=""_COMPSCI406472"">Identify and discuss </span><span id=""_COMPSCI406473"">issues related to the scalability and efficiency challenges when processing complex queries</span><span id=""_COMPSCI406474"">/algorithms</span><span id=""_COMPSCI406475"">&nbsp;against big data systems</span><span id=""_COMPSCI406476"">, and propose ways of addressing said challenges;</span></p><p id=""_COMPSCI406477""><span id=""_COMPSCI406478"">4. </span><span id=""_COMPSCI406479"">D</span><span id=""_COMPSCI406480"">emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.</span></p>","Big Data: Systems, Programming, and Management (H) COMPSCI4064","<p id=""_COMPSCI40640""><span id=""_COMPSCI40641"">Big Da</span><span id=""_COMPSCI40642"">ta is nowadays manifested in a </span><span id=""_COMPSCI40643"">very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.</span></p>","<p id=""_COMPSCI406427""><span id=""_COMPSCI406428"">The course aims to endow students with:</span></p><p id=""_COMPSCI406429""><span id=""_COMPSCI406430"">An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.</span></p><p id=""_COMPSCI406431""><span id=""_COMPSCI406432"">Exposure to a number of different cloud </span><span id=""_COMPSCI406433"">data stores</span><span id=""_COMPSCI406434"">&nbsp;and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.</span></p><p id=""_COMPSCI406435""><span id=""_COMPSCI406436"">Familiarity with </span><span id=""_COMPSCI406437"">modern </span><span id=""_COMPSCI406438"">programming paradigm</span><span id=""_COMPSCI406439"">s (e.g., MapReduce, RDDs, etc.)</span><span id=""_COMPSCI406440"">, so to enable them to write programs which can execute in massively parallel infrastructures in the cloud.</span></p><p id=""_COMPSCI406441""><span id=""_COMPSCI406442"">The ability to understand the internals of </span><span id=""_COMPSCI406443"">(</span><span id=""_COMPSCI406444"">NoSQL</span><span id=""_COMPSCI406445"">)</span><span id=""_COMPSCI406446"">&nbsp;cloud </span><span id=""_COMPSCI406447"">data </span><span id=""_COMPSCI406448"">storage systems and the ability to enrich these systems with additional functionality.</span></p>","<p id=""_COMPSCI406450""><span id=""_COMPSCI406451"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI406452""><span id=""_COMPSCI406453"">1. </span><span id=""_COMPSCI406454"">Design</span><span id=""_COMPSCI406455"">,</span><span id=""_COMPSCI406456"">&nbsp;employ </span><span id=""_COMPSCI406457"">and evaluate </span><span id=""_COMPSCI406458"">programs to access big data repositories in a massively parallel manner</span><span id=""_COMPSCI406459"">;</span></p><p id=""_COMPSCI406460""><span id=""_COMPSCI406461"">2. </span><span id=""_COMPSCI406462"">D</span><span id=""_COMPSCI406463"">escribe and </span><span id=""_COMPSCI406464"">contrast</span><span id=""_COMPSCI406465"">&nbsp;the internals of the design and implementation</span><span id=""_COMPSCI406466"">&nbsp;of current cloud </span><span id=""_COMPSCI406467"">data storage </span><span id=""_COMPSCI406468"">and processing </span><span id=""_COMPSCI406469"">systems; </span></p><p id=""_COMPSCI406470""><span id=""_COMPSCI406471"">3. </span><span id=""_COMPSCI406472"">Identify and discuss </span><span id=""_COMPSCI406473"">issues related to the scalability and efficiency challenges when processing complex queries</span><span id=""_COMPSCI406474"">/algorithms</span><span id=""_COMPSCI406475"">&nbsp;against big data systems</span><span id=""_COMPSCI406476"">, and propose ways of addressing said challenges;</span></p><p id=""_COMPSCI406477""><span id=""_COMPSCI406478"">4. </span><span id=""_COMPSCI406479"">D</span><span id=""_COMPSCI406480"">emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.</span></p>"
Glasgow_Scotland,COMPSCI4094,"<h2>Glasgow_Scotland COMPSCI4094</h2><h2>title</h2>Coaching Software Teams (H) COMPSCI4094<h2>summary</h2><p id=""_COMPSCI40940""><span id=""_COMPSCI40941"">This course gives students the opportunity to learn and practice principles, practices and methods used in coaching Software Engineering teams.  The course is intended for students who have experience of software development through a summer internship or similar. The course covers interpersonal and management skills that are needed for mentoring and leading teams of software developers. The course focuses on whole-team coaching and how to introduce and embed software engineering practices in existing teams. The course is delivered in collaboration with an established software industry partner (JP Morgan).</span></p><h2>content</h2><p id=""_COMPSCI409431""><span id=""_COMPSCI409432"">To introduce advanced principles, practices and methods used in whole-team coaching of Software Engineering teams.</span></p><p id=""_COMPSCI409433""><span id=""_COMPSCI409434"">To introduce techniques for effective working in software teams in a mentoring role, </span></p><p id=""_COMPSCI409435""><span id=""_COMPSCI409436"">To expose students to the practicalities and reality of software engineering in industry.</span></p><h2>ilo</h2><p id=""_COMPSCI409437""><span id=""_COMPSCI409438"">By the end of this course students will be able to:</span><span id=""_COMPSCI409439"">&nbsp;</span></p><p id=""_COMPSCI409440""><span id=""_COMPSCI409441"">1. </span><span id=""_COMPSCI409442"">Explain a range of advanced practices in large-scale collaborative software engineering including agile project management, stakeholder management, user research and product discovery;</span></p><p id=""_COMPSCI409443""><span id=""_COMPSCI409444"">2. </span><span id=""_COMPSCI409445"">Apply and adapt mentoring techniques for working with less experienced colleagues;</span></p><p id=""_COMPSCI409446""><span id=""_COMPSCI409447"">3. </span><span id=""_COMPSCI409448"">Identify, plan, implement and evaluate improvements to team software processes;</span></p><p id=""_COMPSCI409449""><span id=""_COMPSCI409450"">4. </span><span id=""_COMPSCI409451"">Be aware of the limitations of existing software engineering practices in large scale systems development.</span></p>",Coaching Software Teams (H) COMPSCI4094,"<p id=""_COMPSCI40940""><span id=""_COMPSCI40941"">This course gives students the opportunity to learn and practice principles, practices and methods used in coaching Software Engineering teams.  The course is intended for students who have experience of software development through a summer internship or similar. The course covers interpersonal and management skills that are needed for mentoring and leading teams of software developers. The course focuses on whole-team coaching and how to introduce and embed software engineering practices in existing teams. The course is delivered in collaboration with an established software industry partner (JP Morgan).</span></p>","<p id=""_COMPSCI409431""><span id=""_COMPSCI409432"">To introduce advanced principles, practices and methods used in whole-team coaching of Software Engineering teams.</span></p><p id=""_COMPSCI409433""><span id=""_COMPSCI409434"">To introduce techniques for effective working in software teams in a mentoring role, </span></p><p id=""_COMPSCI409435""><span id=""_COMPSCI409436"">To expose students to the practicalities and reality of software engineering in industry.</span></p>","<p id=""_COMPSCI409437""><span id=""_COMPSCI409438"">By the end of this course students will be able to:</span><span id=""_COMPSCI409439"">&nbsp;</span></p><p id=""_COMPSCI409440""><span id=""_COMPSCI409441"">1. </span><span id=""_COMPSCI409442"">Explain a range of advanced practices in large-scale collaborative software engineering including agile project management, stakeholder management, user research and product discovery;</span></p><p id=""_COMPSCI409443""><span id=""_COMPSCI409444"">2. </span><span id=""_COMPSCI409445"">Apply and adapt mentoring techniques for working with less experienced colleagues;</span></p><p id=""_COMPSCI409446""><span id=""_COMPSCI409447"">3. </span><span id=""_COMPSCI409448"">Identify, plan, implement and evaluate improvements to team software processes;</span></p><p id=""_COMPSCI409449""><span id=""_COMPSCI409450"">4. </span><span id=""_COMPSCI409451"">Be aware of the limitations of existing software engineering practices in large scale systems development.</span></p>"
Glasgow_Scotland,COMPSCI4080,"<h2>Glasgow_Scotland COMPSCI4080</h2><h2>title</h2>Computational Social Intelligence (H) COMPSCI4080<h2>summary</h2><p id=""_COMPSCI40800""><span id=""_COMPSCI40801"">The course introduces the core methodologies behind automatic approaches </span><span id=""_COMPSCI40802"">aimed at making</span><span id=""_COMPSCI40803"">&nbsp;sense of social and psychological aspects of human behaviour. </span><span id=""_COMPSCI40804"">In particular, the course shows 1) how to design and organise the observation of human behaviour in view of the application of automatic approaches, 2) how to apply psychometric instruments for the quantitative analysis of social and psychological phenomena, and 3) how to apply basic statistical techniques</span><span id=""_COMPSCI40805"">&nbsp;to human behaviour analysis and understanding</span><span id=""_COMPSCI40806"">. The course is interdisciplinary and it requires the acquisition of both computing and </span><span id=""_COMPSCI40807"">social </span><span id=""_COMPSCI40808"">psychological notions.</span><span id=""_COMPSCI40809"">&nbsp;</span><span id=""_COMPSCI408010"">The application areas to which the course is relevant include, </span><span id=""_COMPSCI408011"">e.g.</span><span id=""_COMPSCI408012"">, social robotics, user experience analysis, social media analytics, surveillance </span><span id=""_COMPSCI408013"">and</span><span id=""_COMPSCI408014"">&nbsp;e-health</span><span id=""_COMPSCI408015"">&nbsp;(the list is not exhaustive)</span><span id=""_COMPSCI408016"">.</span></p><h2>content</h2><p id=""_COMPSCI408033""><span id=""_COMPSCI408034"">The aim of the course is to introduce the students to the main computational methodologies </span><span id=""_COMPSCI408035"">for automatic</span><span id=""_COMPSCI408036"">&nbsp;</span><span id=""_COMPSCI408037"">analysis </span><span id=""_COMPSCI408038"">of human behaviour. </span><span id=""_COMPSCI408039"">In particular the course teaches how to design and organise the observation of human behaviour in view </span><span id=""_COMPSCI408040"">of the application of </span><span id=""_COMPSCI408041"">computational approaches</span><span id=""_COMPSCI408042"">. Furthermore, it shows how to quantify social and psychological phenomena through the </span><span id=""_COMPSCI408043"">application</span><span id=""_COMPSCI408044"">&nbsp;of </span><span id=""_COMPSCI408045"">standard psychometric questionnaires. Finally, it introduces basic methodologies - based on machine learning and statistics - aimed at mapping beh</span><span id=""_COMPSCI408046"">avioural observations into high-</span><span id=""_COMPSCI408047"">level interpretations of human behaviour</span><span id=""_COMPSCI408048"">&nbsp;that take into account social and psychological </span><span id=""_COMPSCI408049"">aspects of human-human and human-machine interactions</span><span id=""_COMPSCI408050"">.</span></p><h2>ilo</h2><p id=""_COMPSCI408052""><span id=""_COMPSCI408053"">By the end</span><span id=""_COMPSCI408054"">&nbsp;of this </span><span id=""_COMPSCI408055"">course, the students will be </span><span id=""_COMPSCI408056"">able to:</span></p><p id=""_COMPSCI408057""><span id=""_COMPSCI408058"">1. </span><span id=""_COMPSCI408059"">Design and organise the collection of behavioural data in view of the application of statistical and computational methodologies</span><span id=""_COMPSCI408060"">&nbsp;for human behaviour understanding</span><span id=""_COMPSCI408061"">;</span></p><p id=""_COMPSCI408062""><span id=""_COMPSCI408063"">2. </span><span id=""_COMPSCI408064"">Measure social and psychological </span><span id=""_COMPSCI408065"">constructs</span><span id=""_COMPSCI408066"">&nbsp;- in quantitative terms - through the adoption of standard psychometric questionnaires;</span><span id=""_COMPSCI408067"">&nbsp;</span></p><p id=""_COMPSCI408068""><span id=""_COMPSCI408069"">3. </span><span id=""_COMPSCI408070"">Apply </span><span id=""_COMPSCI408071"">basic </span><span id=""_COMPSCI408072"">statistical methodologies (</span><span id=""_COMPSCI408073"">e.g., </span><span id=""_COMPSCI408074"">k-Means and Naïve Bayes Classifier) to </span><span id=""_COMPSCI408075"">automatically </span><span id=""_COMPSCI408076"">map behavioural observations into social and psychological constructs.</span></p>",Computational Social Intelligence (H) COMPSCI4080,"<p id=""_COMPSCI40800""><span id=""_COMPSCI40801"">The course introduces the core methodologies behind automatic approaches </span><span id=""_COMPSCI40802"">aimed at making</span><span id=""_COMPSCI40803"">&nbsp;sense of social and psychological aspects of human behaviour. </span><span id=""_COMPSCI40804"">In particular, the course shows 1) how to design and organise the observation of human behaviour in view of the application of automatic approaches, 2) how to apply psychometric instruments for the quantitative analysis of social and psychological phenomena, and 3) how to apply basic statistical techniques</span><span id=""_COMPSCI40805"">&nbsp;to human behaviour analysis and understanding</span><span id=""_COMPSCI40806"">. The course is interdisciplinary and it requires the acquisition of both computing and </span><span id=""_COMPSCI40807"">social </span><span id=""_COMPSCI40808"">psychological notions.</span><span id=""_COMPSCI40809"">&nbsp;</span><span id=""_COMPSCI408010"">The application areas to which the course is relevant include, </span><span id=""_COMPSCI408011"">e.g.</span><span id=""_COMPSCI408012"">, social robotics, user experience analysis, social media analytics, surveillance </span><span id=""_COMPSCI408013"">and</span><span id=""_COMPSCI408014"">&nbsp;e-health</span><span id=""_COMPSCI408015"">&nbsp;(the list is not exhaustive)</span><span id=""_COMPSCI408016"">.</span></p>","<p id=""_COMPSCI408033""><span id=""_COMPSCI408034"">The aim of the course is to introduce the students to the main computational methodologies </span><span id=""_COMPSCI408035"">for automatic</span><span id=""_COMPSCI408036"">&nbsp;</span><span id=""_COMPSCI408037"">analysis </span><span id=""_COMPSCI408038"">of human behaviour. </span><span id=""_COMPSCI408039"">In particular the course teaches how to design and organise the observation of human behaviour in view </span><span id=""_COMPSCI408040"">of the application of </span><span id=""_COMPSCI408041"">computational approaches</span><span id=""_COMPSCI408042"">. Furthermore, it shows how to quantify social and psychological phenomena through the </span><span id=""_COMPSCI408043"">application</span><span id=""_COMPSCI408044"">&nbsp;of </span><span id=""_COMPSCI408045"">standard psychometric questionnaires. Finally, it introduces basic methodologies - based on machine learning and statistics - aimed at mapping beh</span><span id=""_COMPSCI408046"">avioural observations into high-</span><span id=""_COMPSCI408047"">level interpretations of human behaviour</span><span id=""_COMPSCI408048"">&nbsp;that take into account social and psychological </span><span id=""_COMPSCI408049"">aspects of human-human and human-machine interactions</span><span id=""_COMPSCI408050"">.</span></p>","<p id=""_COMPSCI408052""><span id=""_COMPSCI408053"">By the end</span><span id=""_COMPSCI408054"">&nbsp;of this </span><span id=""_COMPSCI408055"">course, the students will be </span><span id=""_COMPSCI408056"">able to:</span></p><p id=""_COMPSCI408057""><span id=""_COMPSCI408058"">1. </span><span id=""_COMPSCI408059"">Design and organise the collection of behavioural data in view of the application of statistical and computational methodologies</span><span id=""_COMPSCI408060"">&nbsp;for human behaviour understanding</span><span id=""_COMPSCI408061"">;</span></p><p id=""_COMPSCI408062""><span id=""_COMPSCI408063"">2. </span><span id=""_COMPSCI408064"">Measure social and psychological </span><span id=""_COMPSCI408065"">constructs</span><span id=""_COMPSCI408066"">&nbsp;- in quantitative terms - through the adoption of standard psychometric questionnaires;</span><span id=""_COMPSCI408067"">&nbsp;</span></p><p id=""_COMPSCI408068""><span id=""_COMPSCI408069"">3. </span><span id=""_COMPSCI408070"">Apply </span><span id=""_COMPSCI408071"">basic </span><span id=""_COMPSCI408072"">statistical methodologies (</span><span id=""_COMPSCI408073"">e.g., </span><span id=""_COMPSCI408074"">k-Means and Naïve Bayes Classifier) to </span><span id=""_COMPSCI408075"">automatically </span><span id=""_COMPSCI408076"">map behavioural observations into social and psychological constructs.</span></p>"
Glasgow_Scotland,COMPSCI4007,"<h2>Glasgow_Scotland COMPSCI4007</h2><h2>title</h2>Computer Architecture (H) COMPSCI4007<h2>summary</h2><p id=""_COMPSCI40070""><span id=""_COMPSCI40071"">The course explains in depth how a computer works, by developing a digital circuit that implements an instruction set architecture.  Topics include cache, virtual memory, support by the architecture for the operating system, and instruction level parallelism.</span></p><h2>content</h2><p id=""_COMPSCI400725""><span id=""_COMPSCI400726"">This course provides a working understanding of the fundamental principles of computer systems.  It answers the question ""How do computers work?"" at a substantive level, as well as giving a foundation needed for other areas in computer systems.  The course reviews the behaviour of digital circuits and introduces a functional hardware description language for specifying and simulating synchronous circuits.  Using the hardware description language, a complete and precise design of </span><span id=""_COMPSCI400727"">a simple</span><span id=""_COMPSCI400728"">&nbsp;but realistic computer architecture is developed.  Advanced topics include the memory system, pipelining, superscalar organisation, and interaction between the architecture and operating system, and the use of formal methods in hardware design.  Current trends are introduced, in particular parallelism and reconfigurable computing.</span></p><h2>ilo</h2><p id=""_COMPSCI400730""><span id=""_COMPSCI400731"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400732""><span id=""_COMPSCI400733"">1. </span><span id=""_COMPSCI400734"">Demonstrate understanding of a processor </span><span id=""_COMPSCI400735"">datapath</span><span id=""_COMPSCI400736"">&nbsp;design, and be able to derive the control signal settings required to make the </span><span id=""_COMPSCI400737"">datapath</span><span id=""_COMPSCI400738"">&nbsp;perform an operation;</span></p><p id=""_COMPSCI400739""><span id=""_COMPSCI400740"">2. </span><span id=""_COMPSCI400741"">Implement the </span><span id=""_COMPSCI400742"">datapath</span><span id=""_COMPSCI400743"">&nbsp;and the control as digital circuits;</span></p><p id=""_COMPSCI400744""><span id=""_COMPSCI400745"">3. </span><span id=""_COMPSCI400746"">Use simulation to explore properties of a processor circuit;</span></p><p id=""_COMPSCI400747""><span id=""_COMPSCI400748"">4. </span><span id=""_COMPSCI400749"">Analyse the behaviour of a processor pipeline as the processor executes various sequences of instructions;</span></p><p id=""_COMPSCI400750""><span id=""_COMPSCI400751"">5. </span><span id=""_COMPSCI400752"">Predict</span><span id=""_COMPSCI400753"">&nbsp;the impact of the memory hierarchy on system performance;</span></p><p id=""_COMPSCI400754""><span id=""_COMPSCI400755"">6. </span><span id=""_COMPSCI400756"">Describe how the operating system utilizes the architecture's support </span><span id=""_COMPSCI400757"">in order to</span><span id=""_COMPSCI400758"">&nbsp;provide processes, protection, virtual memory, and input/output;</span></p><p id=""_COMPSCI400759""><span id=""_COMPSCI400760"">7. </span><span id=""_COMPSCI400761"">Discuss the role of parallelism in current and future architectures.</span></p>",Computer Architecture (H) COMPSCI4007,"<p id=""_COMPSCI40070""><span id=""_COMPSCI40071"">The course explains in depth how a computer works, by developing a digital circuit that implements an instruction set architecture.  Topics include cache, virtual memory, support by the architecture for the operating system, and instruction level parallelism.</span></p>","<p id=""_COMPSCI400725""><span id=""_COMPSCI400726"">This course provides a working understanding of the fundamental principles of computer systems.  It answers the question ""How do computers work?"" at a substantive level, as well as giving a foundation needed for other areas in computer systems.  The course reviews the behaviour of digital circuits and introduces a functional hardware description language for specifying and simulating synchronous circuits.  Using the hardware description language, a complete and precise design of </span><span id=""_COMPSCI400727"">a simple</span><span id=""_COMPSCI400728"">&nbsp;but realistic computer architecture is developed.  Advanced topics include the memory system, pipelining, superscalar organisation, and interaction between the architecture and operating system, and the use of formal methods in hardware design.  Current trends are introduced, in particular parallelism and reconfigurable computing.</span></p>","<p id=""_COMPSCI400730""><span id=""_COMPSCI400731"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400732""><span id=""_COMPSCI400733"">1. </span><span id=""_COMPSCI400734"">Demonstrate understanding of a processor </span><span id=""_COMPSCI400735"">datapath</span><span id=""_COMPSCI400736"">&nbsp;design, and be able to derive the control signal settings required to make the </span><span id=""_COMPSCI400737"">datapath</span><span id=""_COMPSCI400738"">&nbsp;perform an operation;</span></p><p id=""_COMPSCI400739""><span id=""_COMPSCI400740"">2. </span><span id=""_COMPSCI400741"">Implement the </span><span id=""_COMPSCI400742"">datapath</span><span id=""_COMPSCI400743"">&nbsp;and the control as digital circuits;</span></p><p id=""_COMPSCI400744""><span id=""_COMPSCI400745"">3. </span><span id=""_COMPSCI400746"">Use simulation to explore properties of a processor circuit;</span></p><p id=""_COMPSCI400747""><span id=""_COMPSCI400748"">4. </span><span id=""_COMPSCI400749"">Analyse the behaviour of a processor pipeline as the processor executes various sequences of instructions;</span></p><p id=""_COMPSCI400750""><span id=""_COMPSCI400751"">5. </span><span id=""_COMPSCI400752"">Predict</span><span id=""_COMPSCI400753"">&nbsp;the impact of the memory hierarchy on system performance;</span></p><p id=""_COMPSCI400754""><span id=""_COMPSCI400755"">6. </span><span id=""_COMPSCI400756"">Describe how the operating system utilizes the architecture's support </span><span id=""_COMPSCI400757"">in order to</span><span id=""_COMPSCI400758"">&nbsp;provide processes, protection, virtual memory, and input/output;</span></p><p id=""_COMPSCI400759""><span id=""_COMPSCI400760"">7. </span><span id=""_COMPSCI400761"">Discuss the role of parallelism in current and future architectures.</span></p>"
Glasgow_Scotland,COMPSCI4066,"<h2>Glasgow_Scotland COMPSCI4066</h2><h2>title</h2>Computer Vision Methods and Applications (H) COMPSCI4066<h2>summary</h2><p id=""_COMPSCI40660""></p><p id=""_COMPSCI40661""><span id=""_COMPSCI40662"">The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of</span><span id=""_COMPSCI40663"">&nbsp;</span><span id=""_COMPSCI40664"">building advanced image-based applications. Examples of potential vision-based applications include: </span><span id=""_COMPSCI40665"">image understanding in </span><span id=""_COMPSCI40666"">mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production</span><span id=""_COMPSCI40667"">&nbsp;tools</span><span id=""_COMPSCI40668"">, interactive gaming, augmented reality and visual biometrics</span><span id=""_COMPSCI40669"">, forensic image analysis, security and surveillance, </span><span id=""_COMPSCI406610"">and medical imaging. </span><span id=""_COMPSCI406611"">The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:</span><span id=""_COMPSCI406612"">&nbsp;face detection,</span><span id=""_COMPSCI406613"">&nbsp;object recognition, tracking, segmentation and 3D imaging.</span></p><h2>content</h2><p id=""_COMPSCI406643""><span id=""_COMPSCI406644"">■&nbsp;</span><span id=""_COMPSCI406645"">To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.</span></p><p id=""_COMPSCI406646""><span id=""_COMPSCI406647"">■&nbsp;</span><span id=""_COMPSCI406648"">To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above</span><span id=""_COMPSCI406649"">&nbsp;(section 13)</span><span id=""_COMPSCI406650"">. Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines. </span></p><p id=""_COMPSCI406651""><span id=""_COMPSCI406652"">■&nbsp;</span><span id=""_COMPSCI406653"">To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.</span></p><h2>ilo</h2><p id=""_COMPSCI406655""><span id=""_COMPSCI406656"">By the end of the course students </span><span id=""_COMPSCI406657"">will </span><span id=""_COMPSCI406658"">be able to: </span></p><p id=""_COMPSCI406659""><span id=""_COMPSCI406660"">1. </span><span id=""_COMPSCI406661"">Analyse</span><span id=""_COMPSCI406662"">&nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;</span></p><p id=""_COMPSCI406663""><span id=""_COMPSCI406664"">2. </span><span id=""_COMPSCI406665"">Implement feature extraction and object recognition algorithms;</span></p><p id=""_COMPSCI406666""><span id=""_COMPSCI406667"">3. </span><span id=""_COMPSCI406668"">Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D </span><span id=""_COMPSCI406669"">surfaces from stereo-pair images, or motion fields from image sequences;</span></p><p id=""_COMPSCI406670""><span id=""_COMPSCI406671"">4. </span><span id=""_COMPSCI406672"">Demonstrate the ability to apply the rudiments of information theory and basic image compression </span><span id=""_COMPSCI406673"">&nbsp;                                   </span><span id=""_COMPSCI406674"">techniques to the design of image coding/decoding algorithms;</span></p><p id=""_COMPSCI406675""><span id=""_COMPSCI406676"">5. </span><span id=""_COMPSCI406677"">Demonstrate competence in the use of the </span><span id=""_COMPSCI406678"">programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.</span></p>",Computer Vision Methods and Applications (H) COMPSCI4066,"<p id=""_COMPSCI40660""></p><p id=""_COMPSCI40661""><span id=""_COMPSCI40662"">The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of</span><span id=""_COMPSCI40663"">&nbsp;</span><span id=""_COMPSCI40664"">building advanced image-based applications. Examples of potential vision-based applications include: </span><span id=""_COMPSCI40665"">image understanding in </span><span id=""_COMPSCI40666"">mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production</span><span id=""_COMPSCI40667"">&nbsp;tools</span><span id=""_COMPSCI40668"">, interactive gaming, augmented reality and visual biometrics</span><span id=""_COMPSCI40669"">, forensic image analysis, security and surveillance, </span><span id=""_COMPSCI406610"">and medical imaging. </span><span id=""_COMPSCI406611"">The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:</span><span id=""_COMPSCI406612"">&nbsp;face detection,</span><span id=""_COMPSCI406613"">&nbsp;object recognition, tracking, segmentation and 3D imaging.</span></p>","<p id=""_COMPSCI406643""><span id=""_COMPSCI406644"">■&nbsp;</span><span id=""_COMPSCI406645"">To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.</span></p><p id=""_COMPSCI406646""><span id=""_COMPSCI406647"">■&nbsp;</span><span id=""_COMPSCI406648"">To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above</span><span id=""_COMPSCI406649"">&nbsp;(section 13)</span><span id=""_COMPSCI406650"">. Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines. </span></p><p id=""_COMPSCI406651""><span id=""_COMPSCI406652"">■&nbsp;</span><span id=""_COMPSCI406653"">To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.</span></p>","<p id=""_COMPSCI406655""><span id=""_COMPSCI406656"">By the end of the course students </span><span id=""_COMPSCI406657"">will </span><span id=""_COMPSCI406658"">be able to: </span></p><p id=""_COMPSCI406659""><span id=""_COMPSCI406660"">1. </span><span id=""_COMPSCI406661"">Analyse</span><span id=""_COMPSCI406662"">&nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;</span></p><p id=""_COMPSCI406663""><span id=""_COMPSCI406664"">2. </span><span id=""_COMPSCI406665"">Implement feature extraction and object recognition algorithms;</span></p><p id=""_COMPSCI406666""><span id=""_COMPSCI406667"">3. </span><span id=""_COMPSCI406668"">Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D </span><span id=""_COMPSCI406669"">surfaces from stereo-pair images, or motion fields from image sequences;</span></p><p id=""_COMPSCI406670""><span id=""_COMPSCI406671"">4. </span><span id=""_COMPSCI406672"">Demonstrate the ability to apply the rudiments of information theory and basic image compression </span><span id=""_COMPSCI406673"">&nbsp;                                   </span><span id=""_COMPSCI406674"">techniques to the design of image coding/decoding algorithms;</span></p><p id=""_COMPSCI406675""><span id=""_COMPSCI406676"">5. </span><span id=""_COMPSCI406677"">Demonstrate competence in the use of the </span><span id=""_COMPSCI406678"">programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.</span></p>"
Glasgow_Scotland,COMPSCI4013,"<h2>Glasgow_Scotland COMPSCI4013</h2><h2>title</h2>Database Systems (H) COMPSCI4013<h2>summary</h2><p id=""_COMPSCI40130""><span id=""_COMPSCI40131"">From the basic skills derived in CS</span><span id=""_COMPSCI40132"">1F</span><span id=""_COMPSCI40133"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI40134""><span id=""_COMPSCI40135"">Understanding of how conventional programming languages </span><span id=""_COMPSCI40136"">(e.g., Java/JDBC) </span><span id=""_COMPSCI40137"">interact with databases;</span></p><p id=""_COMPSCI40138""><span id=""_COMPSCI40139"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401310""><span id=""_COMPSCI401311"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401312""><span id=""_COMPSCI401313"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401314""><span id=""_COMPSCI401315"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401316""><span id=""_COMPSCI401317"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p><h2>content</h2><p id=""_COMPSCI401355""><span id=""_COMPSCI401356"">From the basic skills derived in CS1</span><span id=""_COMPSCI401357"">F</span><span id=""_COMPSCI401358"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI401359""><span id=""_COMPSCI401360"">Understanding of how conventional programming languages interact with databases;</span></p><p id=""_COMPSCI401361""><span id=""_COMPSCI401362"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401363""><span id=""_COMPSCI401364"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401365""><span id=""_COMPSCI401366"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401367""><span id=""_COMPSCI401368"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401369""><span id=""_COMPSCI401370"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p><h2>ilo</h2><p id=""_COMPSCI401372""><span id=""_COMPSCI401373"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401374""><span id=""_COMPSCI401375"">1. </span><span id=""_COMPSCI401376"">Demonstrate competence in performing sophisticated queries and updates against an existing RDBMS using most of the advanced features of SQL standard;</span></p><p id=""_COMPSCI401377""><span id=""_COMPSCI401378"">2. </span><span id=""_COMPSCI401379"">Demonstrate skills in designing, writing, changing and testing programs </span><span id=""_COMPSCI401380"">(</span><span id=""_COMPSCI401381"">e.g., Java/JDBC</span><span id=""_COMPSCI401382"">) </span><span id=""_COMPSCI401383"">that use an RDB</span><span id=""_COMPSCI401384"">MS</span><span id=""_COMPSCI401385"">;</span></p><p id=""_COMPSCI401386""><span id=""_COMPSCI401387"">3. </span><span id=""_COMPSCI401388"">Interpret and optimize SQL queries based on the principles of the cost-based query optimization;</span></p><p id=""_COMPSCI401389""><span id=""_COMPSCI401390"">4. </span><span id=""_COMPSCI401391"">Provide an explanation of the database indexing techniques including File Hashing, Search Trees, Multi-level Indexes, B Trees and B+ Trees;</span></p><p id=""_COMPSCI401392""><span id=""_COMPSCI401393"">5. </span><span id=""_COMPSCI401394"">Specify advanced constraints on the DB scheme </span><span id=""_COMPSCI401395"">based on Functional Dependencies &amp; Normalization</span><span id=""_COMPSCI401396"">;</span></p><p id=""_COMPSCI401397""><span id=""_COMPSCI401398"">6. </span><span id=""_COMPSCI401399"">Appreciate </span><span id=""_COMPSCI4013100"">Data analytics and aggregation tasks and t</span><span id=""_COMPSCI4013101"">echniques</span><span id=""_COMPSCI4013102"">;</span></p><p id=""_COMPSCI4013103""><span id=""_COMPSCI4013104"">7. </span><span id=""_COMPSCI4013105"">Provide an explanation of the selection selectivity and join selectivity using histograms for query optimization.</span></p>",Database Systems (H) COMPSCI4013,"<p id=""_COMPSCI40130""><span id=""_COMPSCI40131"">From the basic skills derived in CS</span><span id=""_COMPSCI40132"">1F</span><span id=""_COMPSCI40133"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI40134""><span id=""_COMPSCI40135"">Understanding of how conventional programming languages </span><span id=""_COMPSCI40136"">(e.g., Java/JDBC) </span><span id=""_COMPSCI40137"">interact with databases;</span></p><p id=""_COMPSCI40138""><span id=""_COMPSCI40139"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401310""><span id=""_COMPSCI401311"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401312""><span id=""_COMPSCI401313"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401314""><span id=""_COMPSCI401315"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401316""><span id=""_COMPSCI401317"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p>","<p id=""_COMPSCI401355""><span id=""_COMPSCI401356"">From the basic skills derived in CS1</span><span id=""_COMPSCI401357"">F</span><span id=""_COMPSCI401358"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI401359""><span id=""_COMPSCI401360"">Understanding of how conventional programming languages interact with databases;</span></p><p id=""_COMPSCI401361""><span id=""_COMPSCI401362"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401363""><span id=""_COMPSCI401364"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401365""><span id=""_COMPSCI401366"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401367""><span id=""_COMPSCI401368"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401369""><span id=""_COMPSCI401370"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p>","<p id=""_COMPSCI401372""><span id=""_COMPSCI401373"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401374""><span id=""_COMPSCI401375"">1. </span><span id=""_COMPSCI401376"">Demonstrate competence in performing sophisticated queries and updates against an existing RDBMS using most of the advanced features of SQL standard;</span></p><p id=""_COMPSCI401377""><span id=""_COMPSCI401378"">2. </span><span id=""_COMPSCI401379"">Demonstrate skills in designing, writing, changing and testing programs </span><span id=""_COMPSCI401380"">(</span><span id=""_COMPSCI401381"">e.g., Java/JDBC</span><span id=""_COMPSCI401382"">) </span><span id=""_COMPSCI401383"">that use an RDB</span><span id=""_COMPSCI401384"">MS</span><span id=""_COMPSCI401385"">;</span></p><p id=""_COMPSCI401386""><span id=""_COMPSCI401387"">3. </span><span id=""_COMPSCI401388"">Interpret and optimize SQL queries based on the principles of the cost-based query optimization;</span></p><p id=""_COMPSCI401389""><span id=""_COMPSCI401390"">4. </span><span id=""_COMPSCI401391"">Provide an explanation of the database indexing techniques including File Hashing, Search Trees, Multi-level Indexes, B Trees and B+ Trees;</span></p><p id=""_COMPSCI401392""><span id=""_COMPSCI401393"">5. </span><span id=""_COMPSCI401394"">Specify advanced constraints on the DB scheme </span><span id=""_COMPSCI401395"">based on Functional Dependencies &amp; Normalization</span><span id=""_COMPSCI401396"">;</span></p><p id=""_COMPSCI401397""><span id=""_COMPSCI401398"">6. </span><span id=""_COMPSCI401399"">Appreciate </span><span id=""_COMPSCI4013100"">Data analytics and aggregation tasks and t</span><span id=""_COMPSCI4013101"">echniques</span><span id=""_COMPSCI4013102"">;</span></p><p id=""_COMPSCI4013103""><span id=""_COMPSCI4013104"">7. </span><span id=""_COMPSCI4013105"">Provide an explanation of the selection selectivity and join selectivity using histograms for query optimization.</span></p>"
Glasgow_Scotland,COMPSCI4082,"<h2>Glasgow_Scotland COMPSCI4082</h2><h2>title</h2>Distributed and Parallel Technologies (H) COMPSCI4082<h2>summary</h2><p id=""_COMPSCI40820""><span id=""_COMPSCI40821"">This course aims to develop in students a better understanding of the computing science challenges posed by the dominant highly concurrent architectures. These include engineering scalable and reliable systems. Students will gain both a broad overview of emerging technologies for engineering reliable and scalable systems, together with practical experience using a small number of key technologies for designing, implementing and evaluating scalable parallel systems and reliable distributed systems.</span></p><h2>content</h2><p id=""_COMPSCI408231""><span id=""_COMPSCI408232"">The many</span><span id=""_COMPSCI408233"">&nbsp;</span><span id=""_COMPSCI408234"">core revolution means that almost all </span><span id=""_COMPSCI408235"">hardware platforms contain </span><span id=""_COMPSCI408236"">multiple cores</span><span id=""_COMPSCI408237"">, and that the architectures evolve rapidly as the number of cores increases. </span></p><p id=""_COMPSCI408238"">&nbsp;</p><p id=""_COMPSCI408239""><span id=""_COMPSCI408240"">Software on such platforms</span><span id=""_COMPSCI408241"">&nbsp;must be</span><span id=""_COMPSCI408242"">&nbsp;</span></p><p id=""_COMPSCI408243"">&nbsp;</p><p id=""_COMPSCI408244""><span id=""_COMPSCI408245"">Scalable:</span><span id=""_COMPSCI408246"">&nbsp;emergent computing platforms operate at unprecedented scale, with commodity servers already commonly comprising hundreds of hosts, tens of thousands of cores, and thousands of storage devices.  The trend towards large distributed systems is driven by Moore's law and is powering transformative developments in areas like sensor networks, the Internet of Things, and big data infrastructures and analytics. </span></p><p id=""_COMPSCI408247"">&nbsp;</p><p id=""_COMPSCI408248""><span id=""_COMPSCI408249"">Reliable:</span><span id=""_COMPSCI408250"">&nbsp;systems must tolerate and recover from hardware, software and network failures.  </span><span id=""_COMPSCI408251"">Moreover the semantics of highly concurrent and fault tolerant systems is complex, and specialised techniques are required to reasoning about these systems so as to be confident that they are reliable in the sense of being correct.  </span></p><p id=""_COMPSCI408252"">&nbsp;</p><p id=""_COMPSCI408253""><span id=""_COMPSCI408254"">This course aims to provide both a broad overview of emerging technologies for engineering reliable and scalable systems, together with practical experience using a small number of key technologies for designing, implementing and evaluating scalable parallel systems and reliable distributed systems.</span></p><h2>ilo</h2><p id=""_COMPSCI408256""><span id=""_COMPSCI408257"">By the end of the course students will be able to: </span></p><p id=""_COMPSCI408258""><span id=""_COMPSCI408259"">1. </span><span id=""_COMPSCI408260"">Articulate the key computing science challenges posed by many</span><span id=""_COMPSCI408261"">&nbsp;</span><span id=""_COMPSCI408262"">core architectures, the technologies available to address them</span><span id=""_COMPSCI408263"">, and </span><span id=""_COMPSCI408264"">the challenges of building reliable and scalable systems</span><span id=""_COMPSCI408265"">;</span></p><p id=""_COMPSCI408266""><span id=""_COMPSCI408267"">2. </span><span id=""_COMPSCI408268"">Design and implement simple parallel applications on shared and distributed memory architectures</span><span id=""_COMPSCI408269"">;</span></p><p id=""_COMPSCI408270""><span id=""_COMPSCI408271"">3. </span><span id=""_COMPSCI408272"">Evaluate the scaling properties of simple parallel applications</span><span id=""_COMPSCI408273"">;</span></p><p id=""_COMPSCI408274""><span id=""_COMPSCI408275"">4. </span><span id=""_COMPSCI408276"">Design and implement simple reliable distributed applications, selecting </span><span id=""_COMPSCI408277"">appropriately from various families of algorithm used in distributed systems, based on specific system requirements</span><span id=""_COMPSCI408278"">;</span></p><p id=""_COMPSCI408279""><span id=""_COMPSCI408280"">5. </span><span id=""_COMPSCI408281"">Evaluate the reliability properties of simple distributed applications</span><span id=""_COMPSCI408282"">.</span></p>",Distributed and Parallel Technologies (H) COMPSCI4082,"<p id=""_COMPSCI40820""><span id=""_COMPSCI40821"">This course aims to develop in students a better understanding of the computing science challenges posed by the dominant highly concurrent architectures. These include engineering scalable and reliable systems. Students will gain both a broad overview of emerging technologies for engineering reliable and scalable systems, together with practical experience using a small number of key technologies for designing, implementing and evaluating scalable parallel systems and reliable distributed systems.</span></p>","<p id=""_COMPSCI408231""><span id=""_COMPSCI408232"">The many</span><span id=""_COMPSCI408233"">&nbsp;</span><span id=""_COMPSCI408234"">core revolution means that almost all </span><span id=""_COMPSCI408235"">hardware platforms contain </span><span id=""_COMPSCI408236"">multiple cores</span><span id=""_COMPSCI408237"">, and that the architectures evolve rapidly as the number of cores increases. </span></p><p id=""_COMPSCI408238"">&nbsp;</p><p id=""_COMPSCI408239""><span id=""_COMPSCI408240"">Software on such platforms</span><span id=""_COMPSCI408241"">&nbsp;must be</span><span id=""_COMPSCI408242"">&nbsp;</span></p><p id=""_COMPSCI408243"">&nbsp;</p><p id=""_COMPSCI408244""><span id=""_COMPSCI408245"">Scalable:</span><span id=""_COMPSCI408246"">&nbsp;emergent computing platforms operate at unprecedented scale, with commodity servers already commonly comprising hundreds of hosts, tens of thousands of cores, and thousands of storage devices.  The trend towards large distributed systems is driven by Moore's law and is powering transformative developments in areas like sensor networks, the Internet of Things, and big data infrastructures and analytics. </span></p><p id=""_COMPSCI408247"">&nbsp;</p><p id=""_COMPSCI408248""><span id=""_COMPSCI408249"">Reliable:</span><span id=""_COMPSCI408250"">&nbsp;systems must tolerate and recover from hardware, software and network failures.  </span><span id=""_COMPSCI408251"">Moreover the semantics of highly concurrent and fault tolerant systems is complex, and specialised techniques are required to reasoning about these systems so as to be confident that they are reliable in the sense of being correct.  </span></p><p id=""_COMPSCI408252"">&nbsp;</p><p id=""_COMPSCI408253""><span id=""_COMPSCI408254"">This course aims to provide both a broad overview of emerging technologies for engineering reliable and scalable systems, together with practical experience using a small number of key technologies for designing, implementing and evaluating scalable parallel systems and reliable distributed systems.</span></p>","<p id=""_COMPSCI408256""><span id=""_COMPSCI408257"">By the end of the course students will be able to: </span></p><p id=""_COMPSCI408258""><span id=""_COMPSCI408259"">1. </span><span id=""_COMPSCI408260"">Articulate the key computing science challenges posed by many</span><span id=""_COMPSCI408261"">&nbsp;</span><span id=""_COMPSCI408262"">core architectures, the technologies available to address them</span><span id=""_COMPSCI408263"">, and </span><span id=""_COMPSCI408264"">the challenges of building reliable and scalable systems</span><span id=""_COMPSCI408265"">;</span></p><p id=""_COMPSCI408266""><span id=""_COMPSCI408267"">2. </span><span id=""_COMPSCI408268"">Design and implement simple parallel applications on shared and distributed memory architectures</span><span id=""_COMPSCI408269"">;</span></p><p id=""_COMPSCI408270""><span id=""_COMPSCI408271"">3. </span><span id=""_COMPSCI408272"">Evaluate the scaling properties of simple parallel applications</span><span id=""_COMPSCI408273"">;</span></p><p id=""_COMPSCI408274""><span id=""_COMPSCI408275"">4. </span><span id=""_COMPSCI408276"">Design and implement simple reliable distributed applications, selecting </span><span id=""_COMPSCI408277"">appropriately from various families of algorithm used in distributed systems, based on specific system requirements</span><span id=""_COMPSCI408278"">;</span></p><p id=""_COMPSCI408279""><span id=""_COMPSCI408280"">5. </span><span id=""_COMPSCI408281"">Evaluate the reliability properties of simple distributed applications</span><span id=""_COMPSCI408282"">.</span></p>"
Glasgow_Scotland,COMPSCI4021,"<h2>Glasgow_Scotland COMPSCI4021</h2><h2>title</h2>Functional Programming (H) COMPSCI4021<h2>summary</h2><p id=""_COMPSCI40210""><span id=""_COMPSCI40211"">Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.</span></p><h2>content</h2><p id=""_COMPSCI402127""><span id=""_COMPSCI402128"">Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills, </span><span id=""_COMPSCI402129"">applying</span><span id=""_COMPSCI402130"">&nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.</span></p><p id=""_COMPSCI402131""><span id=""_COMPSCI402132"">The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.</span></p><h2>ilo</h2><p id=""_COMPSCI402134""><span id=""_COMPSCI402135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402136""><span id=""_COMPSCI402137"">1. </span><span id=""_COMPSCI402138"">Write simple programs involving elementary Haskell techniques, including pure function definitions; </span></p><p id=""_COMPSCI402139""><span id=""_COMPSCI402140"">2. </span><span id=""_COMPSCI402141"">Use standard </span><span id=""_COMPSCI402142"">combinators</span><span id=""_COMPSCI402143"">&nbsp;for operating on lists;</span></p><p id=""_COMPSCI402144""><span id=""_COMPSCI402145"">3. </span><span id=""_COMPSCI402146"">Define new algebraic data types and use recursion to define functions that traverse recursive types;</span></p><p id=""_COMPSCI402147""><span id=""_COMPSCI402148"">4. </span><span id=""_COMPSCI402149"">Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;</span></p><p id=""_COMPSCI402150""><span id=""_COMPSCI402151"">5. </span><span id=""_COMPSCI402152"">Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;</span></p><p id=""_COMPSCI402153""><span id=""_COMPSCI402154"">6. </span><span id=""_COMPSCI402155"">Develop substantial software applications including GUIs and system interaction;</span></p><p id=""_COMPSCI402156""><span id=""_COMPSCI402157"">7. </span><span id=""_COMPSCI402158"">Use formal methods to prove properties of functional programs;</span></p><p id=""_COMPSCI402159""><span id=""_COMPSCI402160"">8. </span><span id=""_COMPSCI402161"">Construct, adapt, and analyse </span><span id=""_COMPSCI402162"">code using standard Haskell platform tools.</span><span id=""_COMPSCI402163"">&nbsp;</span></p>",Functional Programming (H) COMPSCI4021,"<p id=""_COMPSCI40210""><span id=""_COMPSCI40211"">Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.</span></p>","<p id=""_COMPSCI402127""><span id=""_COMPSCI402128"">Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills, </span><span id=""_COMPSCI402129"">applying</span><span id=""_COMPSCI402130"">&nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.</span></p><p id=""_COMPSCI402131""><span id=""_COMPSCI402132"">The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.</span></p>","<p id=""_COMPSCI402134""><span id=""_COMPSCI402135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402136""><span id=""_COMPSCI402137"">1. </span><span id=""_COMPSCI402138"">Write simple programs involving elementary Haskell techniques, including pure function definitions; </span></p><p id=""_COMPSCI402139""><span id=""_COMPSCI402140"">2. </span><span id=""_COMPSCI402141"">Use standard </span><span id=""_COMPSCI402142"">combinators</span><span id=""_COMPSCI402143"">&nbsp;for operating on lists;</span></p><p id=""_COMPSCI402144""><span id=""_COMPSCI402145"">3. </span><span id=""_COMPSCI402146"">Define new algebraic data types and use recursion to define functions that traverse recursive types;</span></p><p id=""_COMPSCI402147""><span id=""_COMPSCI402148"">4. </span><span id=""_COMPSCI402149"">Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;</span></p><p id=""_COMPSCI402150""><span id=""_COMPSCI402151"">5. </span><span id=""_COMPSCI402152"">Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;</span></p><p id=""_COMPSCI402153""><span id=""_COMPSCI402154"">6. </span><span id=""_COMPSCI402155"">Develop substantial software applications including GUIs and system interaction;</span></p><p id=""_COMPSCI402156""><span id=""_COMPSCI402157"">7. </span><span id=""_COMPSCI402158"">Use formal methods to prove properties of functional programs;</span></p><p id=""_COMPSCI402159""><span id=""_COMPSCI402160"">8. </span><span id=""_COMPSCI402161"">Construct, adapt, and analyse </span><span id=""_COMPSCI402162"">code using standard Haskell platform tools.</span><span id=""_COMPSCI402163"">&nbsp;</span></p>"
Glasgow_Scotland,COMPSCI4023,"<h2>Glasgow_Scotland COMPSCI4023</h2><h2>title</h2>Human-Computer Interaction (H) COMPSCI4023<h2>summary</h2><p id=""_COMPSCI40230""><span id=""_COMPSCI40231"">The aim of this course is to introduce stude</span><span id=""_COMPSCI40232"">nts to advanced topics in Human-</span><span id=""_COMPSCI40233"">Computer Interaction. I</span><span id=""_COMPSCI40234"">n technical terms, i</span><span id=""_COMPSCI40235"">t focuses on </span><span id=""_COMPSCI40236"">data visualisation, collaborative systems and multimodal interaction. It also introduces other </span><span id=""_COMPSCI40237"">novel forms in interaction</span><span id=""_COMPSCI40238"">&nbsp;and evaluation, and legal and ethical issues around interactive and data-centred systems</span><span id=""_COMPSCI40239"">.</span></p><h2>content</h2><p id=""_COMPSCI402347""><span id=""_COMPSCI402348"">This course will bring depth and breadth to the material covered in Interactive Systems H.  Human-Computer Interaction has moved away from a narrow focus on textual windows on a desktop, operated by one person using a keyboard and mouse.  In terms of devices, phones and other mobile systems lead to ubiquitous use and also ubiquitous sharing of data about us. In terms of data, such systems are often used to manipulate and explore complex data, including individual and social data.  They are used at a scale that pervades and changes our society, and legal and ethical issues (e.g. GDPR) are influencing what we design and how we design them. The aim of Human-Computer Interaction H will be to equip our students with skills to design for this broad use of technology. It will also to feed into Mobile Human-Computer Interaction H, which concentrates on mobile systems.</span></p><p id=""_COMPSCI402349"">&nbsp;</p><p id=""_COMPSCI402350""><span id=""_COMPSCI402351"">The aim of </span><span id=""_COMPSCI402352"">this </span><span id=""_COMPSCI402353"">course is to give the students an o</span><span id=""_COMPSCI402354"">verview of advanced topics in Human-Computer </span><span id=""_COMPSCI402355"">I</span><span id=""_COMPSCI402356"">nteraction, covering the</span><span id=""_COMPSCI402357"">&nbsp;key areas of </span><span id=""_COMPSCI402358"">interaction with complex, personal and social data, via data analytics (in particular, visual analytics), and via multimodal interaction. It will address the ways that we design and evaluate such systems</span><span id=""_COMPSCI402359"">. There will also be a significant piece of coursework where the students will have </span><span id=""_COMPSCI402360"">to design, implement and evaluate an </span><span id=""_COMPSCI402361"">interactive application. This will give them valuable experience in </span><span id=""_COMPSCI402362"">development and justification of</span><span id=""_COMPSCI402363"">&nbsp;</span><span id=""_COMPSCI402364"">such systems</span><span id=""_COMPSCI402365"">.</span></p><h2>ilo</h2><p id=""_COMPSCI402367""><span id=""_COMPSCI402368"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402369""><span id=""_COMPSCI402370"">1. </span><span id=""_COMPSCI402371"">Identify the </span><span id=""_COMPSCI402372"">key</span><span id=""_COMPSCI402373"">&nbsp;</span><span id=""_COMPSCI402374"">concepts</span><span id=""_COMPSCI402375"">&nbsp;and </span><span id=""_COMPSCI402376"">exemplars</span><span id=""_COMPSCI402377"">&nbsp;in </span><span id=""_COMPSCI402378"">the design of</span><span id=""_COMPSCI402379"">&nbsp;novel </span><span id=""_COMPSCI402380"">visualisation systems, collaborative systems, and </span><span id=""_COMPSCI402381"">multimodal </span><span id=""_COMPSCI402382"">systems, and in ethical system design</span><span id=""_COMPSCI402383"">;</span></p><p id=""_COMPSCI402384""><span id=""_COMPSCI402385"">2. </span><span id=""_COMPSCI402386"">Identify the</span><span id=""_COMPSCI402387"">&nbsp;main</span><span id=""_COMPSCI402388"">&nbsp;issues </span><span id=""_COMPSCI402389"">and key concepts in evaluating such systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria</span><span id=""_COMPSCI402390"">;</span></p><p id=""_COMPSCI402391""><span id=""_COMPSCI402392"">3. </span><span id=""_COMPSCI402393"">Have</span><span id=""_COMPSCI402394"">&nbsp;experience designing </span><span id=""_COMPSCI402395"">such systems, by d</span><span id=""_COMPSCI402396"">esign</span><span id=""_COMPSCI402397"">ing</span><span id=""_COMPSCI402398"">, develop</span><span id=""_COMPSCI402399"">ing and evaluating</span><span id=""_COMPSCI4023100"">&nbsp;a significant piece of interactive software embodying key aspects of the course.</span></p>",Human-Computer Interaction (H) COMPSCI4023,"<p id=""_COMPSCI40230""><span id=""_COMPSCI40231"">The aim of this course is to introduce stude</span><span id=""_COMPSCI40232"">nts to advanced topics in Human-</span><span id=""_COMPSCI40233"">Computer Interaction. I</span><span id=""_COMPSCI40234"">n technical terms, i</span><span id=""_COMPSCI40235"">t focuses on </span><span id=""_COMPSCI40236"">data visualisation, collaborative systems and multimodal interaction. It also introduces other </span><span id=""_COMPSCI40237"">novel forms in interaction</span><span id=""_COMPSCI40238"">&nbsp;and evaluation, and legal and ethical issues around interactive and data-centred systems</span><span id=""_COMPSCI40239"">.</span></p>","<p id=""_COMPSCI402347""><span id=""_COMPSCI402348"">This course will bring depth and breadth to the material covered in Interactive Systems H.  Human-Computer Interaction has moved away from a narrow focus on textual windows on a desktop, operated by one person using a keyboard and mouse.  In terms of devices, phones and other mobile systems lead to ubiquitous use and also ubiquitous sharing of data about us. In terms of data, such systems are often used to manipulate and explore complex data, including individual and social data.  They are used at a scale that pervades and changes our society, and legal and ethical issues (e.g. GDPR) are influencing what we design and how we design them. The aim of Human-Computer Interaction H will be to equip our students with skills to design for this broad use of technology. It will also to feed into Mobile Human-Computer Interaction H, which concentrates on mobile systems.</span></p><p id=""_COMPSCI402349"">&nbsp;</p><p id=""_COMPSCI402350""><span id=""_COMPSCI402351"">The aim of </span><span id=""_COMPSCI402352"">this </span><span id=""_COMPSCI402353"">course is to give the students an o</span><span id=""_COMPSCI402354"">verview of advanced topics in Human-Computer </span><span id=""_COMPSCI402355"">I</span><span id=""_COMPSCI402356"">nteraction, covering the</span><span id=""_COMPSCI402357"">&nbsp;key areas of </span><span id=""_COMPSCI402358"">interaction with complex, personal and social data, via data analytics (in particular, visual analytics), and via multimodal interaction. It will address the ways that we design and evaluate such systems</span><span id=""_COMPSCI402359"">. There will also be a significant piece of coursework where the students will have </span><span id=""_COMPSCI402360"">to design, implement and evaluate an </span><span id=""_COMPSCI402361"">interactive application. This will give them valuable experience in </span><span id=""_COMPSCI402362"">development and justification of</span><span id=""_COMPSCI402363"">&nbsp;</span><span id=""_COMPSCI402364"">such systems</span><span id=""_COMPSCI402365"">.</span></p>","<p id=""_COMPSCI402367""><span id=""_COMPSCI402368"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402369""><span id=""_COMPSCI402370"">1. </span><span id=""_COMPSCI402371"">Identify the </span><span id=""_COMPSCI402372"">key</span><span id=""_COMPSCI402373"">&nbsp;</span><span id=""_COMPSCI402374"">concepts</span><span id=""_COMPSCI402375"">&nbsp;and </span><span id=""_COMPSCI402376"">exemplars</span><span id=""_COMPSCI402377"">&nbsp;in </span><span id=""_COMPSCI402378"">the design of</span><span id=""_COMPSCI402379"">&nbsp;novel </span><span id=""_COMPSCI402380"">visualisation systems, collaborative systems, and </span><span id=""_COMPSCI402381"">multimodal </span><span id=""_COMPSCI402382"">systems, and in ethical system design</span><span id=""_COMPSCI402383"">;</span></p><p id=""_COMPSCI402384""><span id=""_COMPSCI402385"">2. </span><span id=""_COMPSCI402386"">Identify the</span><span id=""_COMPSCI402387"">&nbsp;main</span><span id=""_COMPSCI402388"">&nbsp;issues </span><span id=""_COMPSCI402389"">and key concepts in evaluating such systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria</span><span id=""_COMPSCI402390"">;</span></p><p id=""_COMPSCI402391""><span id=""_COMPSCI402392"">3. </span><span id=""_COMPSCI402393"">Have</span><span id=""_COMPSCI402394"">&nbsp;experience designing </span><span id=""_COMPSCI402395"">such systems, by d</span><span id=""_COMPSCI402396"">esign</span><span id=""_COMPSCI402397"">ing</span><span id=""_COMPSCI402398"">, develop</span><span id=""_COMPSCI402399"">ing and evaluating</span><span id=""_COMPSCI4023100"">&nbsp;a significant piece of interactive software embodying key aspects of the course.</span></p>"
Glasgow_Scotland,COMPSCI4069,"<h2>Glasgow_Scotland COMPSCI4069</h2><h2>title</h2>Information Retrieval (H) COMPSCI4069<h2>summary</h2><p id=""_COMPSCI40690""><span id=""_COMPSCI40691"">To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.</span></p><p id=""_COMPSCI40692""><span id=""_COMPSCI40693"">To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.</span></p><h2>content</h2><p id=""_COMPSCI406928""><span id=""_COMPSCI406929"">To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.</span></p><p id=""_COMPSCI406930""><span id=""_COMPSCI406931"">To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.</span></p><h2>ilo</h2><p id=""_COMPSCI406934""><span id=""_COMPSCI406935"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI406936""><span id=""_COMPSCI406937"">1. </span><span id=""_COMPSCI406938"">Implement a standard information retrieval (IR) system;</span></p><p id=""_COMPSCI406939""><span id=""_COMPSCI406940"">2. </span><span id=""_COMPSCI406941"">Discuss the theoretical basis behind the standard models of IR (e.g. Boolean, Vector-space, and Probabilistic models);</span></p><p id=""_COMPSCI406942""><span id=""_COMPSCI406943"">3. </span><span id=""_COMPSCI406944"">Discuss how an IR system should be evaluated in terms of the system's performance and the user's satisfaction with the system;</span></p><p id=""_COMPSCI406945""><span id=""_COMPSCI406946"">4. </span><span id=""_COMPSCI406947"">Describe the techniques in organising information;</span></p><p id=""_COMPSCI406948""><span id=""_COMPSCI406949"">5. </span><span id=""_COMPSCI406950"">Describe the techniques involved in retrieving information from the World Wide Web;</span></p><p id=""_COMPSCI406951""><span id=""_COMPSCI406952"">6. </span><span id=""_COMPSCI406953"">Describe the practical engineering issues raised by the implementation of a search engine for the Web</span><span id=""_COMPSCI406954"">.</span></p>",Information Retrieval (H) COMPSCI4069,"<p id=""_COMPSCI40690""><span id=""_COMPSCI40691"">To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.</span></p><p id=""_COMPSCI40692""><span id=""_COMPSCI40693"">To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.</span></p>","<p id=""_COMPSCI406928""><span id=""_COMPSCI406929"">To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.</span></p><p id=""_COMPSCI406930""><span id=""_COMPSCI406931"">To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.</span></p>","<p id=""_COMPSCI406934""><span id=""_COMPSCI406935"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI406936""><span id=""_COMPSCI406937"">1. </span><span id=""_COMPSCI406938"">Implement a standard information retrieval (IR) system;</span></p><p id=""_COMPSCI406939""><span id=""_COMPSCI406940"">2. </span><span id=""_COMPSCI406941"">Discuss the theoretical basis behind the standard models of IR (e.g. Boolean, Vector-space, and Probabilistic models);</span></p><p id=""_COMPSCI406942""><span id=""_COMPSCI406943"">3. </span><span id=""_COMPSCI406944"">Discuss how an IR system should be evaluated in terms of the system's performance and the user's satisfaction with the system;</span></p><p id=""_COMPSCI406945""><span id=""_COMPSCI406946"">4. </span><span id=""_COMPSCI406947"">Describe the techniques in organising information;</span></p><p id=""_COMPSCI406948""><span id=""_COMPSCI406949"">5. </span><span id=""_COMPSCI406950"">Describe the techniques involved in retrieving information from the World Wide Web;</span></p><p id=""_COMPSCI406951""><span id=""_COMPSCI406952"">6. </span><span id=""_COMPSCI406953"">Describe the practical engineering issues raised by the implementation of a search engine for the Web</span><span id=""_COMPSCI406954"">.</span></p>"
Glasgow_Scotland,COMPSCI4061,"<h2>Glasgow_Scotland COMPSCI4061</h2><h2>title</h2>Machine Learning (H) COMPSCI4061<h2>summary</h2><p id=""_COMPSCI40610""><span id=""_COMPSCI40611"">A practical introduction to the foundations of machine learning.</span></p><h2>content</h2><p id=""_COMPSCI406132""><span id=""_COMPSCI406133"">To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.</span></p><h2>ilo</h2><p id=""_COMPSCI406134""><span id=""_COMPSCI406135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI406136""><span id=""_COMPSCI406137"">1. </span><span id=""_COMPSCI406138"">Discuss the principle of learning from data;</span></p><p id=""_COMPSCI406139""><span id=""_COMPSCI406140"">2. </span><span id=""_COMPSCI406141"">Describe the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;</span></p><p id=""_COMPSCI406142""><span id=""_COMPSCI406143"">3. </span><span id=""_COMPSCI406144"">Use a selection of common machine learning algorithms and be aware of when one is to be favoured over other;</span></p><p id=""_COMPSCI406145""><span id=""_COMPSCI406146"">4. </span><span id=""_COMPSCI406147"">Implement and use machine learning algorithms in </span><span id=""_COMPSCI406148"">Matlab</span><span id=""_COMPSCI406149"">;</span></p><p id=""_COMPSCI406150""><span id=""_COMPSCI406151"">5. </span><span id=""_COMPSCI406152"">Discuss the major machine learning application area in, for example, Information Retrieval,</span></p><p id=""_COMPSCI406153""><span id=""_COMPSCI406154"">6. </span><span id=""_COMPSCI406155"">Human Computer Interaction, Bioinformatics and Computer Visions &amp; Graphics;</span></p><p id=""_COMPSCI406156""><span id=""_COMPSCI406157"">7. </span><span id=""_COMPSCI406158"">Detail emerging machine learning approaches such as non-parametric methods and sampling techniques</span><span id=""_COMPSCI406159"">;</span></p><p id=""_COMPSCI406160""><span id=""_COMPSCI406161"">8. </span><span id=""_COMPSCI406162"">Produce a Multimedia System.</span></p>",Machine Learning (H) COMPSCI4061,"<p id=""_COMPSCI40610""><span id=""_COMPSCI40611"">A practical introduction to the foundations of machine learning.</span></p>","<p id=""_COMPSCI406132""><span id=""_COMPSCI406133"">To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.</span></p>","<p id=""_COMPSCI406134""><span id=""_COMPSCI406135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI406136""><span id=""_COMPSCI406137"">1. </span><span id=""_COMPSCI406138"">Discuss the principle of learning from data;</span></p><p id=""_COMPSCI406139""><span id=""_COMPSCI406140"">2. </span><span id=""_COMPSCI406141"">Describe the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;</span></p><p id=""_COMPSCI406142""><span id=""_COMPSCI406143"">3. </span><span id=""_COMPSCI406144"">Use a selection of common machine learning algorithms and be aware of when one is to be favoured over other;</span></p><p id=""_COMPSCI406145""><span id=""_COMPSCI406146"">4. </span><span id=""_COMPSCI406147"">Implement and use machine learning algorithms in </span><span id=""_COMPSCI406148"">Matlab</span><span id=""_COMPSCI406149"">;</span></p><p id=""_COMPSCI406150""><span id=""_COMPSCI406151"">5. </span><span id=""_COMPSCI406152"">Discuss the major machine learning application area in, for example, Information Retrieval,</span></p><p id=""_COMPSCI406153""><span id=""_COMPSCI406154"">6. </span><span id=""_COMPSCI406155"">Human Computer Interaction, Bioinformatics and Computer Visions &amp; Graphics;</span></p><p id=""_COMPSCI406156""><span id=""_COMPSCI406157"">7. </span><span id=""_COMPSCI406158"">Detail emerging machine learning approaches such as non-parametric methods and sampling techniques</span><span id=""_COMPSCI406159"">;</span></p><p id=""_COMPSCI406160""><span id=""_COMPSCI406161"">8. </span><span id=""_COMPSCI406162"">Produce a Multimedia System.</span></p>"
Glasgow_Scotland,COMPSCI4068,"<h2>Glasgow_Scotland COMPSCI4068</h2><h2>title</h2>Mobile Human-Computer Interaction (H) COMPSCI4068<h2>summary</h2><p id=""_COMPSCI40680""><span id=""_COMPSCI40681"">Mobile Human-Computer Interaction </span><span id=""_COMPSCI40682"">(H) </span><span id=""_COMPSCI40683"">gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.</span></p><h2>content</h2><p id=""_COMPSCI406827""><span id=""_COMPSCI406828"">This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and </span><span id=""_COMPSCI406829"">methods</span><span id=""_COMPSCI406830"">&nbsp;</span><span id=""_COMPSCI406831"">for</span><span id=""_COMPSCI406832"">&nbsp;prototyping novel interactions.</span></p><h2>ilo</h2><p id=""_COMPSCI406833""><span id=""_COMPSCI406834"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI406835""><span id=""_COMPSCI406836"">1. </span><span id=""_COMPSCI406837"">Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.</span></p><p id=""_COMPSCI406838""><span id=""_COMPSCI406839"">2. </span><span id=""_COMPSCI406840"">Critically analyse a proposed mobile interactive system considering its intended usage context.</span></p><p id=""_COMPSCI406841""><span id=""_COMPSCI406842"">3. </span><span id=""_COMPSCI406843"">Design usable mobile interactive systems for a given problem or application area.</span></p><p id=""_COMPSCI406844""><span id=""_COMPSCI406845"">4. </span><span id=""_COMPSCI406846"">Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.</span></p><p id=""_COMPSCI406847""><span id=""_COMPSCI406848"">5. </span><span id=""_COMPSCI406849"">Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.</span></p>",Mobile Human-Computer Interaction (H) COMPSCI4068,"<p id=""_COMPSCI40680""><span id=""_COMPSCI40681"">Mobile Human-Computer Interaction </span><span id=""_COMPSCI40682"">(H) </span><span id=""_COMPSCI40683"">gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.</span></p>","<p id=""_COMPSCI406827""><span id=""_COMPSCI406828"">This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and </span><span id=""_COMPSCI406829"">methods</span><span id=""_COMPSCI406830"">&nbsp;</span><span id=""_COMPSCI406831"">for</span><span id=""_COMPSCI406832"">&nbsp;prototyping novel interactions.</span></p>","<p id=""_COMPSCI406833""><span id=""_COMPSCI406834"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI406835""><span id=""_COMPSCI406836"">1. </span><span id=""_COMPSCI406837"">Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.</span></p><p id=""_COMPSCI406838""><span id=""_COMPSCI406839"">2. </span><span id=""_COMPSCI406840"">Critically analyse a proposed mobile interactive system considering its intended usage context.</span></p><p id=""_COMPSCI406841""><span id=""_COMPSCI406842"">3. </span><span id=""_COMPSCI406843"">Design usable mobile interactive systems for a given problem or application area.</span></p><p id=""_COMPSCI406844""><span id=""_COMPSCI406845"">4. </span><span id=""_COMPSCI406846"">Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.</span></p><p id=""_COMPSCI406847""><span id=""_COMPSCI406848"">5. </span><span id=""_COMPSCI406849"">Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.</span></p>"
Glasgow_Scotland,COMPSCI4031,"<h2>Glasgow_Scotland COMPSCI4031</h2><h2>title</h2>Modelling Reactive Systems (H) COMPSCI4031<h2>summary</h2><p id=""_COMPSCI40310""><span id=""_COMPSCI40311"">Modelling concurrent, communicating systems using non-probabilistic and probabilistic techniques, verification us</span><span id=""_COMPSCI40312"">ing the SPIN and PRISM model checkers</span><span id=""_COMPSCI40313"">, </span><span id=""_COMPSCI40314"">and </span><span id=""_COMPSCI40315"">introduction to reactive </span><span id=""_COMPSCI40316"">synthesis.</span></p><h2>content</h2><p id=""_COMPSCI403126""><span id=""_COMPSCI403127"">Reactive systems are widely and increasingly used throughout society (e.g. telecommunications, flight control, railway signalling, medical devices).  An understanding of the fundamentals of these systems, at an abstract level, is essential for the developm</span><span id=""_COMPSCI403128"">ent of process control systems and should be a pre-requisite for anyone developing software for such applications.  This course provides in-depth study of key formal techniques used in designing and analysing concurrent, reactive systems; and to </span><span id=""_COMPSCI403129"">present th</span><span id=""_COMPSCI403130"">e practical issues raised by using </span><span id=""_COMPSCI403131"">a number of</span><span id=""_COMPSCI403132"">&nbsp;such formalisms and associated software tools, particularly within the context of developing communi</span><span id=""_COMPSCI403133"">cations protocols and other </span><span id=""_COMPSCI403134"">communications applications.</span><span id=""_COMPSCI403135"">&nbsp;</span></p><p id=""_COMPSCI403136""><span id=""_COMPSCI403137"">Students will learn to model systems using the Pro</span><span id=""_COMPSCI403138"">mela specification language and associated verification tool SPIN. In addition, probabilistic systems will be modelled as Discrete Time Markov Chains using the PRISM language and tool. </span></p><p id=""_COMPSCI403139""><span id=""_COMPSCI403140"">L</span><span id=""_COMPSCI403141"">astly, students will</span><span id=""_COMPSCI403142"">&nbsp;be made aware of </span><span id=""_COMPSCI403143"">fundamental</span><span id=""_COMPSCI403144"">&nbsp;concepts</span><span id=""_COMPSCI403145"">&nbsp;of</span><span id=""_COMPSCI403146"">&nbsp;</span><span id=""_COMPSCI403147"">reactive</span><span id=""_COMPSCI403148"">&nbsp;synthesis</span><span id=""_COMPSCI403149"">.</span></p><h2>ilo</h2><p id=""_COMPSCI403150""><span id=""_COMPSCI403151"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI403152"">&nbsp;</p><p id=""_COMPSCI403153""><span id=""_COMPSCI403154"">1: Clearly differentiate issues that arise in concurrent, reactive, and distributed systems;</span></p><p id=""_COMPSCI403155""><span id=""_COMPSCI403156"">2: Explain the various concepts of concurrency and communication that arise </span><span id=""_COMPSCI403157"">in such systems;</span></p><p id=""_COMPSCI403158""><span id=""_COMPSCI403159"">3: Demonstrate understanding of the concepts of signalling and control and associated modelling issues;</span></p><p id=""_COMPSCI403160""><span id=""_COMPSCI403161"">4: Develop message sequence charts for a reactive system;</span></p><p id=""_COMPSCI403162""><span id=""_COMPSCI403163"">5: Enumerate the differences between non-probabilistic and probabilistic form</span><span id=""_COMPSCI403164"">alisms;</span></p><p id=""_COMPSCI403165""><span id=""_COMPSCI403166"">6: Design and analyse a reactive system, including a communication protocol, using appropriate design techniques and mechanised analysis tools (SPIN and PRISM)</span><span id=""_COMPSCI403167"">;</span></p><p id=""_COMPSCI403168""><span id=""_COMPSCI403169"">7:</span><span id=""_COMPSCI403170"">&nbsp;Explain concepts </span><span id=""_COMPSCI403171"">of</span><span id=""_COMPSCI403172"">&nbsp;</span><span id=""_COMPSCI403173"">reactive </span><span id=""_COMPSCI403174"">synthesis</span><span id=""_COMPSCI403175"">.</span></p>",Modelling Reactive Systems (H) COMPSCI4031,"<p id=""_COMPSCI40310""><span id=""_COMPSCI40311"">Modelling concurrent, communicating systems using non-probabilistic and probabilistic techniques, verification us</span><span id=""_COMPSCI40312"">ing the SPIN and PRISM model checkers</span><span id=""_COMPSCI40313"">, </span><span id=""_COMPSCI40314"">and </span><span id=""_COMPSCI40315"">introduction to reactive </span><span id=""_COMPSCI40316"">synthesis.</span></p>","<p id=""_COMPSCI403126""><span id=""_COMPSCI403127"">Reactive systems are widely and increasingly used throughout society (e.g. telecommunications, flight control, railway signalling, medical devices).  An understanding of the fundamentals of these systems, at an abstract level, is essential for the developm</span><span id=""_COMPSCI403128"">ent of process control systems and should be a pre-requisite for anyone developing software for such applications.  This course provides in-depth study of key formal techniques used in designing and analysing concurrent, reactive systems; and to </span><span id=""_COMPSCI403129"">present th</span><span id=""_COMPSCI403130"">e practical issues raised by using </span><span id=""_COMPSCI403131"">a number of</span><span id=""_COMPSCI403132"">&nbsp;such formalisms and associated software tools, particularly within the context of developing communi</span><span id=""_COMPSCI403133"">cations protocols and other </span><span id=""_COMPSCI403134"">communications applications.</span><span id=""_COMPSCI403135"">&nbsp;</span></p><p id=""_COMPSCI403136""><span id=""_COMPSCI403137"">Students will learn to model systems using the Pro</span><span id=""_COMPSCI403138"">mela specification language and associated verification tool SPIN. In addition, probabilistic systems will be modelled as Discrete Time Markov Chains using the PRISM language and tool. </span></p><p id=""_COMPSCI403139""><span id=""_COMPSCI403140"">L</span><span id=""_COMPSCI403141"">astly, students will</span><span id=""_COMPSCI403142"">&nbsp;be made aware of </span><span id=""_COMPSCI403143"">fundamental</span><span id=""_COMPSCI403144"">&nbsp;concepts</span><span id=""_COMPSCI403145"">&nbsp;of</span><span id=""_COMPSCI403146"">&nbsp;</span><span id=""_COMPSCI403147"">reactive</span><span id=""_COMPSCI403148"">&nbsp;synthesis</span><span id=""_COMPSCI403149"">.</span></p>","<p id=""_COMPSCI403150""><span id=""_COMPSCI403151"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI403152"">&nbsp;</p><p id=""_COMPSCI403153""><span id=""_COMPSCI403154"">1: Clearly differentiate issues that arise in concurrent, reactive, and distributed systems;</span></p><p id=""_COMPSCI403155""><span id=""_COMPSCI403156"">2: Explain the various concepts of concurrency and communication that arise </span><span id=""_COMPSCI403157"">in such systems;</span></p><p id=""_COMPSCI403158""><span id=""_COMPSCI403159"">3: Demonstrate understanding of the concepts of signalling and control and associated modelling issues;</span></p><p id=""_COMPSCI403160""><span id=""_COMPSCI403161"">4: Develop message sequence charts for a reactive system;</span></p><p id=""_COMPSCI403162""><span id=""_COMPSCI403163"">5: Enumerate the differences between non-probabilistic and probabilistic form</span><span id=""_COMPSCI403164"">alisms;</span></p><p id=""_COMPSCI403165""><span id=""_COMPSCI403166"">6: Design and analyse a reactive system, including a communication protocol, using appropriate design techniques and mechanised analysis tools (SPIN and PRISM)</span><span id=""_COMPSCI403167"">;</span></p><p id=""_COMPSCI403168""><span id=""_COMPSCI403169"">7:</span><span id=""_COMPSCI403170"">&nbsp;Explain concepts </span><span id=""_COMPSCI403171"">of</span><span id=""_COMPSCI403172"">&nbsp;</span><span id=""_COMPSCI403173"">reactive </span><span id=""_COMPSCI403174"">synthesis</span><span id=""_COMPSCI403175"">.</span></p>"
Glasgow_Scotland,COMPSCI4012,"<h2>Glasgow_Scotland COMPSCI4012</h2><h2>title</h2>Networked Systems (H) COMPSCI4012<h2>summary</h2><p id=""_COMPSCI40120""><span id=""_COMPSCI40121"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI40122""><span id=""_COMPSCI40123"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI40124""><span id=""_COMPSCI40125"">To introduce low-level network programming concepts, and give students practice with systems programming in C;</span></p><p id=""_COMPSCI40126""><span id=""_COMPSCI40127"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p><h2>content</h2><p id=""_COMPSCI401247""><span id=""_COMPSCI401248"">■&nbsp;</span><span id=""_COMPSCI401249"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI401250""><span id=""_COMPSCI401251"">■&nbsp;</span><span id=""_COMPSCI401252"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI401253""><span id=""_COMPSCI401254"">■&nbsp;</span><span id=""_COMPSCI401255"">To introduce low-level network </span><span id=""_COMPSCI401256"">programming concepts, and give students practice with systems programming in C</span><span id=""_COMPSCI401257"">;</span></p><p id=""_COMPSCI401258""><span id=""_COMPSCI401259"">■&nbsp;</span><span id=""_COMPSCI401260"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p><h2>ilo</h2><p id=""_COMPSCI401262""><span id=""_COMPSCI401263"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401264""><span id=""_COMPSCI401265"">1. </span><span id=""_COMPSCI401266"">Describe and compare capabilities of various communication technologies and techniques;</span></p><p id=""_COMPSCI401267""><span id=""_COMPSCI401268"">2. </span><span id=""_COMPSCI401269"">Point out differences between networks of different scale, and how these affect their design;</span></p><p id=""_COMPSCI401270""><span id=""_COMPSCI401271"">3. </span><span id=""_COMPSCI401272"">Describe the issues in connecting heterogeneous networks;</span></p><p id=""_COMPSCI401273""><span id=""_COMPSCI401274"">4. </span><span id=""_COMPSCI401275"">Describe importance of layering, and the OSI reference model;</span></p><p id=""_COMPSCI401276""><span id=""_COMPSCI401277"">5. </span><span id=""_COMPSCI401278"">Detail demands of different applications on quality of service requirements for the underlying communication network;</span></p><p id=""_COMPSCI401279""><span id=""_COMPSCI401280"">6. </span><span id=""_COMPSCI401281"">Demonstrate an understanding of the design and operation of an IP network, such as the Internet, and explain the purpose and function of its various components;</span></p><p id=""_COMPSCI401282""><span id=""_COMPSCI401283"">7. </span><span id=""_COMPSCI401284"">Write simple l</span><span id=""_COMPSCI401285"">ow-level communication software, showing awareness of good practice for correct and secure programming.</span></p>",Networked Systems (H) COMPSCI4012,"<p id=""_COMPSCI40120""><span id=""_COMPSCI40121"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI40122""><span id=""_COMPSCI40123"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI40124""><span id=""_COMPSCI40125"">To introduce low-level network programming concepts, and give students practice with systems programming in C;</span></p><p id=""_COMPSCI40126""><span id=""_COMPSCI40127"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p>","<p id=""_COMPSCI401247""><span id=""_COMPSCI401248"">■&nbsp;</span><span id=""_COMPSCI401249"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI401250""><span id=""_COMPSCI401251"">■&nbsp;</span><span id=""_COMPSCI401252"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI401253""><span id=""_COMPSCI401254"">■&nbsp;</span><span id=""_COMPSCI401255"">To introduce low-level network </span><span id=""_COMPSCI401256"">programming concepts, and give students practice with systems programming in C</span><span id=""_COMPSCI401257"">;</span></p><p id=""_COMPSCI401258""><span id=""_COMPSCI401259"">■&nbsp;</span><span id=""_COMPSCI401260"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p>","<p id=""_COMPSCI401262""><span id=""_COMPSCI401263"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401264""><span id=""_COMPSCI401265"">1. </span><span id=""_COMPSCI401266"">Describe and compare capabilities of various communication technologies and techniques;</span></p><p id=""_COMPSCI401267""><span id=""_COMPSCI401268"">2. </span><span id=""_COMPSCI401269"">Point out differences between networks of different scale, and how these affect their design;</span></p><p id=""_COMPSCI401270""><span id=""_COMPSCI401271"">3. </span><span id=""_COMPSCI401272"">Describe the issues in connecting heterogeneous networks;</span></p><p id=""_COMPSCI401273""><span id=""_COMPSCI401274"">4. </span><span id=""_COMPSCI401275"">Describe importance of layering, and the OSI reference model;</span></p><p id=""_COMPSCI401276""><span id=""_COMPSCI401277"">5. </span><span id=""_COMPSCI401278"">Detail demands of different applications on quality of service requirements for the underlying communication network;</span></p><p id=""_COMPSCI401279""><span id=""_COMPSCI401280"">6. </span><span id=""_COMPSCI401281"">Demonstrate an understanding of the design and operation of an IP network, such as the Internet, and explain the purpose and function of its various components;</span></p><p id=""_COMPSCI401282""><span id=""_COMPSCI401283"">7. </span><span id=""_COMPSCI401284"">Write simple l</span><span id=""_COMPSCI401285"">ow-level communication software, showing awareness of good practice for correct and secure programming.</span></p>"
Glasgow_Scotland,COMPSCI4011,"<h2>Glasgow_Scotland COMPSCI4011</h2><h2>title</h2>Operating Systems (H) COMPSCI4011<h2>summary</h2><p id=""_COMPSCI40110""><span id=""_COMPSCI40111"">To introduce the students to the styles of coding required with an OS; </span></p><p id=""_COMPSCI40112""><span id=""_COMPSCI40113"">To give a thorough presentation of the contents of a traditional OS, including the key abstractions;</span></p><p id=""_COMPSCI40114""><span id=""_COMPSCI40115"">To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour; </span></p><p id=""_COMPSCI40116""><span id=""_COMPSCI40117"">To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.</span></p><h2>content</h2><p id=""_COMPSCI401155""><span id=""_COMPSCI401156"">To introduce the students to the styles of coding required with an OS; </span></p><p id=""_COMPSCI401157""><span id=""_COMPSCI401158"">To give a thorough presentation of the contents of a traditional OS, including the key abstractions;</span></p><p id=""_COMPSCI401159""><span id=""_COMPSCI401160"">To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour; </span></p><p id=""_COMPSCI401161""><span id=""_COMPSCI401162"">To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.</span></p><h2>ilo</h2><p id=""_COMPSCI401164""><span id=""_COMPSCI401165"">By the end of this course, students will be able to: </span></p><p id=""_COMPSCI401166""><span id=""_COMPSCI401167"">1. </span><span id=""_COMPSCI401168"">Use current operating system terminology in correctly explaining the functions of an OS;</span></p><p id=""_COMPSCI401169""><span id=""_COMPSCI401170"">2. </span><span id=""_COMPSCI401171"">Relate operating system functions to computer hardware;</span></p><p id=""_COMPSCI401172""><span id=""_COMPSCI401173"">3. </span><span id=""_COMPSCI401174"">Describe the mechanisms of interrupts, context switching and address translation;</span></p><p id=""_COMPSCI401175""><span id=""_COMPSCI401176"">4. </span><span id=""_COMPSCI401177"">Describe the relation of operating system functions to language run-time systems;</span></p><p id=""_COMPSCI401178""><span id=""_COMPSCI401179"">5. </span><span id=""_COMPSCI401180"">Explain the significance of concurrency in operating system design;</span></p><p id=""_COMPSCI401181""><span id=""_COMPSCI401182"">6. </span><span id=""_COMPSCI401183"">Demonstrate an understanding of the semantics of operating system functions, including scheduling and memory management, by being able to describe their functioning;</span></p><p id=""_COMPSCI401184""><span id=""_COMPSCI401185"">7. </span><span id=""_COMPSCI401186"">Implement simple operating system components</span><span id=""_COMPSCI401187"">&nbsp;and basic algorithms (CPU scheduling, deadlock detection and avoidance algorithms);</span></p><p id=""_COMPSCI401188""><span id=""_COMPSCI401189"">8. </span><span id=""_COMPSCI401190"">Critique designs and implementations of OS components, </span><span id=""_COMPSCI401191"">eg</span><span id=""_COMPSCI401192"">&nbsp;the Unix file system;</span></p><p id=""_COMPSCI401193""><span id=""_COMPSCI401194"">9. </span><span id=""_COMPSCI401195"">Illustrate the influence of operating system functions on application behaviour;</span></p><p id=""_COMPSCI401196""><span id=""_COMPSCI401197"">10. </span><span id=""_COMPSCI401198"">Compare and contrast alternative approaches to hardware components such as the CPU and bus;</span></p><p id=""_COMPSCI401199""><span id=""_COMPSCI4011100"">11. </span><span id=""_COMPSCI4011101"">Engineer medium-sized (multi-file) software components for integration into larger C </span><span id=""_COMPSCI4011102"">and/or Java programs</span><span id=""_COMPSCI4011103"">.</span></p>",Operating Systems (H) COMPSCI4011,"<p id=""_COMPSCI40110""><span id=""_COMPSCI40111"">To introduce the students to the styles of coding required with an OS; </span></p><p id=""_COMPSCI40112""><span id=""_COMPSCI40113"">To give a thorough presentation of the contents of a traditional OS, including the key abstractions;</span></p><p id=""_COMPSCI40114""><span id=""_COMPSCI40115"">To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour; </span></p><p id=""_COMPSCI40116""><span id=""_COMPSCI40117"">To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.</span></p>","<p id=""_COMPSCI401155""><span id=""_COMPSCI401156"">To introduce the students to the styles of coding required with an OS; </span></p><p id=""_COMPSCI401157""><span id=""_COMPSCI401158"">To give a thorough presentation of the contents of a traditional OS, including the key abstractions;</span></p><p id=""_COMPSCI401159""><span id=""_COMPSCI401160"">To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour; </span></p><p id=""_COMPSCI401161""><span id=""_COMPSCI401162"">To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.</span></p>","<p id=""_COMPSCI401164""><span id=""_COMPSCI401165"">By the end of this course, students will be able to: </span></p><p id=""_COMPSCI401166""><span id=""_COMPSCI401167"">1. </span><span id=""_COMPSCI401168"">Use current operating system terminology in correctly explaining the functions of an OS;</span></p><p id=""_COMPSCI401169""><span id=""_COMPSCI401170"">2. </span><span id=""_COMPSCI401171"">Relate operating system functions to computer hardware;</span></p><p id=""_COMPSCI401172""><span id=""_COMPSCI401173"">3. </span><span id=""_COMPSCI401174"">Describe the mechanisms of interrupts, context switching and address translation;</span></p><p id=""_COMPSCI401175""><span id=""_COMPSCI401176"">4. </span><span id=""_COMPSCI401177"">Describe the relation of operating system functions to language run-time systems;</span></p><p id=""_COMPSCI401178""><span id=""_COMPSCI401179"">5. </span><span id=""_COMPSCI401180"">Explain the significance of concurrency in operating system design;</span></p><p id=""_COMPSCI401181""><span id=""_COMPSCI401182"">6. </span><span id=""_COMPSCI401183"">Demonstrate an understanding of the semantics of operating system functions, including scheduling and memory management, by being able to describe their functioning;</span></p><p id=""_COMPSCI401184""><span id=""_COMPSCI401185"">7. </span><span id=""_COMPSCI401186"">Implement simple operating system components</span><span id=""_COMPSCI401187"">&nbsp;and basic algorithms (CPU scheduling, deadlock detection and avoidance algorithms);</span></p><p id=""_COMPSCI401188""><span id=""_COMPSCI401189"">8. </span><span id=""_COMPSCI401190"">Critique designs and implementations of OS components, </span><span id=""_COMPSCI401191"">eg</span><span id=""_COMPSCI401192"">&nbsp;the Unix file system;</span></p><p id=""_COMPSCI401193""><span id=""_COMPSCI401194"">9. </span><span id=""_COMPSCI401195"">Illustrate the influence of operating system functions on application behaviour;</span></p><p id=""_COMPSCI401196""><span id=""_COMPSCI401197"">10. </span><span id=""_COMPSCI401198"">Compare and contrast alternative approaches to hardware components such as the CPU and bus;</span></p><p id=""_COMPSCI401199""><span id=""_COMPSCI4011100"">11. </span><span id=""_COMPSCI4011101"">Engineer medium-sized (multi-file) software components for integration into larger C </span><span id=""_COMPSCI4011102"">and/or Java programs</span><span id=""_COMPSCI4011103"">.</span></p>"
Glasgow_Scotland,COMPSCI4016,"<h2>Glasgow_Scotland COMPSCI4016</h2><h2>title</h2>Programming Languages (H) COMPSCI4016<h2>summary</h2><p id=""_COMPSCI40160""><span id=""_COMPSCI40161"">This course aims to:</span></p><p id=""_COMPSCI40162""><span id=""_COMPSCI40163"">P</span><span id=""_COMPSCI40164"">rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;</span></p><p id=""_COMPSCI40165""><span id=""_COMPSCI40166"">S</span><span id=""_COMPSCI40167"">how how the syntax of a programming language can be formalized;</span></p><p id=""_COMPSCI40168""><span id=""_COMPSCI40169"">E</span><span id=""_COMPSCI401610"">xplain the functions of compilers and interpreters, how they interact, and how they work;</span></p><p id=""_COMPSCI401611""><span id=""_COMPSCI401612"">S</span><span id=""_COMPSCI401613"">how how to implement a compiler using compiler-generation tools.</span></p><h2>content</h2><p id=""_COMPSCI401644""><span id=""_COMPSCI401645"">This course aims to:</span></p><p id=""_COMPSCI401646""><span id=""_COMPSCI401647"">P</span><span id=""_COMPSCI401648"">rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;</span></p><p id=""_COMPSCI401649""><span id=""_COMPSCI401650"">S</span><span id=""_COMPSCI401651"">how how the syntax of a programming language can be formalized;</span></p><p id=""_COMPSCI401652""><span id=""_COMPSCI401653"">E</span><span id=""_COMPSCI401654"">xplain the functions of compilers and interpreters, how they interact, and how they work;</span></p><p id=""_COMPSCI401655""><span id=""_COMPSCI401656"">S</span><span id=""_COMPSCI401657"">how how to implement a compiler using compiler-generation tools.</span></p><h2>ilo</h2><p id=""_COMPSCI401659""><span id=""_COMPSCI401660"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401661""><span id=""_COMPSCI401662"">1. </span><span id=""_COMPSCI401663"">Describe the relationships between the imperative, object-oriented, and functional programming paradigms;</span></p><p id=""_COMPSCI401664""><span id=""_COMPSCI401665"">2. </span><span id=""_COMPSCI401666"">Explain fundamental programming language concepts such as values and types, variables and lifetime, bindings and scope, procedural abstraction, data abstraction, and generic abstraction;</span></p><p id=""_COMPSCI401667""><span id=""_COMPSCI401668"">3. </span><span id=""_COMPSCI401669"">Explain the distinction between syntax and semantics, and read and write syntactic specifications of programming languages;</span></p><p id=""_COMPSCI401670""><span id=""_COMPSCI401671"">4. </span><span id=""_COMPSCI401672"">Explain the functions of compilers and interpreters, and compiler-interpreter interactions such as multi-stage compilers, interpretive compilers, and just-in-time compilers;</span></p><p id=""_COMPSCI401673""><span id=""_COMPSCI401674"">5. </span><span id=""_COMPSCI401675"">Implement a compiler and interpreter for a very simple programming language using compiler-generation tools.</span></p>",Programming Languages (H) COMPSCI4016,"<p id=""_COMPSCI40160""><span id=""_COMPSCI40161"">This course aims to:</span></p><p id=""_COMPSCI40162""><span id=""_COMPSCI40163"">P</span><span id=""_COMPSCI40164"">rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;</span></p><p id=""_COMPSCI40165""><span id=""_COMPSCI40166"">S</span><span id=""_COMPSCI40167"">how how the syntax of a programming language can be formalized;</span></p><p id=""_COMPSCI40168""><span id=""_COMPSCI40169"">E</span><span id=""_COMPSCI401610"">xplain the functions of compilers and interpreters, how they interact, and how they work;</span></p><p id=""_COMPSCI401611""><span id=""_COMPSCI401612"">S</span><span id=""_COMPSCI401613"">how how to implement a compiler using compiler-generation tools.</span></p>","<p id=""_COMPSCI401644""><span id=""_COMPSCI401645"">This course aims to:</span></p><p id=""_COMPSCI401646""><span id=""_COMPSCI401647"">P</span><span id=""_COMPSCI401648"">rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;</span></p><p id=""_COMPSCI401649""><span id=""_COMPSCI401650"">S</span><span id=""_COMPSCI401651"">how how the syntax of a programming language can be formalized;</span></p><p id=""_COMPSCI401652""><span id=""_COMPSCI401653"">E</span><span id=""_COMPSCI401654"">xplain the functions of compilers and interpreters, how they interact, and how they work;</span></p><p id=""_COMPSCI401655""><span id=""_COMPSCI401656"">S</span><span id=""_COMPSCI401657"">how how to implement a compiler using compiler-generation tools.</span></p>","<p id=""_COMPSCI401659""><span id=""_COMPSCI401660"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401661""><span id=""_COMPSCI401662"">1. </span><span id=""_COMPSCI401663"">Describe the relationships between the imperative, object-oriented, and functional programming paradigms;</span></p><p id=""_COMPSCI401664""><span id=""_COMPSCI401665"">2. </span><span id=""_COMPSCI401666"">Explain fundamental programming language concepts such as values and types, variables and lifetime, bindings and scope, procedural abstraction, data abstraction, and generic abstraction;</span></p><p id=""_COMPSCI401667""><span id=""_COMPSCI401668"">3. </span><span id=""_COMPSCI401669"">Explain the distinction between syntax and semantics, and read and write syntactic specifications of programming languages;</span></p><p id=""_COMPSCI401670""><span id=""_COMPSCI401671"">4. </span><span id=""_COMPSCI401672"">Explain the functions of compilers and interpreters, and compiler-interpreter interactions such as multi-stage compilers, interpretive compilers, and just-in-time compilers;</span></p><p id=""_COMPSCI401673""><span id=""_COMPSCI401674"">5. </span><span id=""_COMPSCI401675"">Implement a compiler and interpreter for a very simple programming language using compiler-generation tools.</span></p>"
Glasgow_Scotland,COMPSCI4075,"<h2>Glasgow_Scotland COMPSCI4075</h2><h2>title</h2>Recommender Systems (H) COMPSCI4075<h2>summary</h2><p id=""_COMPSCI40750""><span id=""_COMPSCI40751"">This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. Recommender systems are</span><span id=""_COMPSCI40752"">&nbsp;widely used by many users on a day-to-day basis: </span><span id=""_COMPSCI40753"">while </span><span id=""_COMPSCI40754"">recommender systems </span><span id=""_COMPSCI40755"">have been pioneered by </span><span id=""_COMPSCI40756"">e-commerce sites such</span><span id=""_COMPSCI40757"">&nbsp;as</span><span id=""_COMPSCI40758"">&nbsp;Amazon</span><span id=""_COMPSCI40759"">&nbsp;and Netflix, they are widely used ranging in areas from marketing (e.g. personalized product recommendations </span><span id=""_COMPSCI407510"">with</span><span id=""_COMPSCI407511"">&nbsp;your </span><span id=""_COMPSCI407512"">supermarket loyalty card</span><span id=""_COMPSCI407513"">), education, social media, and financial services. This course discusses various techniques for making recommendations, including non-personalized, content-based, and collaborative recommendation techniques, </span><span id=""_COMPSCI407514"">and their evaluation.</span></p><h2>content</h2><p id=""_COMPSCI407534""><span id=""_COMPSCI407535"">Recommender systems are widely deployed stochastic retrieval systems - a search system that learns what to suggest to a user based upon no explicit user input (i.e. zero query), but make suggestions using what is known about the user or the demogr</span><span id=""_COMPSCI407536"">aphics that the user belongs to</span><span id=""_COMPSCI407537"">.</span><span id=""_COMPSCI407538"">&nbsp;With the prevalence of recommender systems, from e-commerce sites to supermarket loyalty cards, it can be seen </span><span id=""_COMPSCI407539"">recommendation technologies have the potential to be more ubiquitous than search technologies.</span><span id=""_COMPSCI407540"">&nbsp;</span><span id=""_COMPSCI407541"">This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. This course discusses various techniques for making recommendations that are widely used in industry, including non-personalized, content-based, and collaborative recommendation techniques, and their evaluation.</span></p><h2>ilo</h2><p id=""_COMPSCI407543""><span id=""_COMPSCI407544"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407545""><span id=""_COMPSCI407546"">1. </span><span id=""_COMPSCI407547"">Describe the techniques in making automatic recommendations and </span><span id=""_COMPSCI407548"">personalising</span><span id=""_COMPSCI407549"">&nbsp;them for individual users.</span></p><p id=""_COMPSCI407550""><span id=""_COMPSCI407551"">2. </span><span id=""_COMPSCI407552"">Describe different recommendation system </span><span id=""_COMPSCI407553"">scenarios,</span><span id=""_COMPSCI407554"">&nbsp;and models suitable for deployment therein</span><span id=""_COMPSCI407555"">.</span></p><p id=""_COMPSCI407556""><span id=""_COMPSCI407557"">3. </span><span id=""_COMPSCI407558"">Discuss how a recommender system should be evaluated in terms of the system's performance and the user's satisfaction with the system</span><span id=""_COMPSCI407559"">.</span></p><p id=""_COMPSCI407560""><span id=""_COMPSCI407561"">4. </span><span id=""_COMPSCI407562"">Describe the practical engineering issues raised by the implementation of a recommender system in a real deployment</span><span id=""_COMPSCI407563"">.</span></p><p id=""_COMPSCI407564""><span id=""_COMPSCI407565"">5. </span><span id=""_COMPSCI407566"">Implement </span><span id=""_COMPSCI407567"">and evaluate </span><span id=""_COMPSCI407568"">a standard recommender system.</span></p>",Recommender Systems (H) COMPSCI4075,"<p id=""_COMPSCI40750""><span id=""_COMPSCI40751"">This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. Recommender systems are</span><span id=""_COMPSCI40752"">&nbsp;widely used by many users on a day-to-day basis: </span><span id=""_COMPSCI40753"">while </span><span id=""_COMPSCI40754"">recommender systems </span><span id=""_COMPSCI40755"">have been pioneered by </span><span id=""_COMPSCI40756"">e-commerce sites such</span><span id=""_COMPSCI40757"">&nbsp;as</span><span id=""_COMPSCI40758"">&nbsp;Amazon</span><span id=""_COMPSCI40759"">&nbsp;and Netflix, they are widely used ranging in areas from marketing (e.g. personalized product recommendations </span><span id=""_COMPSCI407510"">with</span><span id=""_COMPSCI407511"">&nbsp;your </span><span id=""_COMPSCI407512"">supermarket loyalty card</span><span id=""_COMPSCI407513"">), education, social media, and financial services. This course discusses various techniques for making recommendations, including non-personalized, content-based, and collaborative recommendation techniques, </span><span id=""_COMPSCI407514"">and their evaluation.</span></p>","<p id=""_COMPSCI407534""><span id=""_COMPSCI407535"">Recommender systems are widely deployed stochastic retrieval systems - a search system that learns what to suggest to a user based upon no explicit user input (i.e. zero query), but make suggestions using what is known about the user or the demogr</span><span id=""_COMPSCI407536"">aphics that the user belongs to</span><span id=""_COMPSCI407537"">.</span><span id=""_COMPSCI407538"">&nbsp;With the prevalence of recommender systems, from e-commerce sites to supermarket loyalty cards, it can be seen </span><span id=""_COMPSCI407539"">recommendation technologies have the potential to be more ubiquitous than search technologies.</span><span id=""_COMPSCI407540"">&nbsp;</span><span id=""_COMPSCI407541"">This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. This course discusses various techniques for making recommendations that are widely used in industry, including non-personalized, content-based, and collaborative recommendation techniques, and their evaluation.</span></p>","<p id=""_COMPSCI407543""><span id=""_COMPSCI407544"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407545""><span id=""_COMPSCI407546"">1. </span><span id=""_COMPSCI407547"">Describe the techniques in making automatic recommendations and </span><span id=""_COMPSCI407548"">personalising</span><span id=""_COMPSCI407549"">&nbsp;them for individual users.</span></p><p id=""_COMPSCI407550""><span id=""_COMPSCI407551"">2. </span><span id=""_COMPSCI407552"">Describe different recommendation system </span><span id=""_COMPSCI407553"">scenarios,</span><span id=""_COMPSCI407554"">&nbsp;and models suitable for deployment therein</span><span id=""_COMPSCI407555"">.</span></p><p id=""_COMPSCI407556""><span id=""_COMPSCI407557"">3. </span><span id=""_COMPSCI407558"">Discuss how a recommender system should be evaluated in terms of the system's performance and the user's satisfaction with the system</span><span id=""_COMPSCI407559"">.</span></p><p id=""_COMPSCI407560""><span id=""_COMPSCI407561"">4. </span><span id=""_COMPSCI407562"">Describe the practical engineering issues raised by the implementation of a recommender system in a real deployment</span><span id=""_COMPSCI407563"">.</span></p><p id=""_COMPSCI407564""><span id=""_COMPSCI407565"">5. </span><span id=""_COMPSCI407566"">Implement </span><span id=""_COMPSCI407567"">and evaluate </span><span id=""_COMPSCI407568"">a standard recommender system.</span></p>"
Glasgow_Scotland,COMPSCI4076,"<h2>Glasgow_Scotland COMPSCI4076</h2><h2>title</h2>Robotics Foundations (H) COMPSCI4076<h2>summary</h2><p id=""_COMPSCI40760""><span id=""_COMPSCI40761"">This course will introduce students to the computational</span><span id=""_COMPSCI40762"">&nbsp;and mathematical</span><span id=""_COMPSCI40763"">&nbsp;concepts, information processing and software frameworks of robotic systems. It will also consider the sensory and actuation systems required by a robot to sense, understand and interact with its environment. The primary aim is to give students an understanding of how to prototype and implement </span><span id=""_COMPSCI40764"">autonomous </span><span id=""_COMPSCI40765"">robotic systems by making use of </span><span id=""_COMPSCI40766"">a </span><span id=""_COMPSCI40767"">sophisticated robotic middleware (e.g. Robot Operating System (ROS)), its associated data transmission channels</span><span id=""_COMPSCI40768"">, </span><span id=""_COMPSCI40769"">software </span><span id=""_COMPSCI407610"">robotic </span><span id=""_COMPSCI407611"">stacks</span><span id=""_COMPSCI407612"">&nbsp;and the underlying mathematics required to operate a robot</span><span id=""_COMPSCI407613"">. </span><span id=""_COMPSCI407614"">This</span><span id=""_COMPSCI407615"">&nbsp;is a hands-on course, designed to provide </span><span id=""_COMPSCI407616"">student</span><span id=""_COMPSCI407617"">s with the required programming</span><span id=""_COMPSCI407618"">, mathematical</span><span id=""_COMPSCI407619"">&nbsp;and debugging skill-set to implement robotic solutions based on</span><span id=""_COMPSCI407620"">&nbsp;the</span><span id=""_COMPSCI407621"">&nbsp;use of off-the-shelf commercially available real and virtual robots.</span><span id=""_COMPSCI407622"">&nbsp;P</span><span id=""_COMPSCI407623"">ython skills are a requirement for this course</span><span id=""_COMPSCI407624"">; </span><span id=""_COMPSCI407625"">C/C++ skills are desirable but not essential</span><span id=""_COMPSCI407626"">.</span></p><h2>content</h2><p id=""_COMPSCI407653""><span id=""_COMPSCI407654"">The aims of Robotics Foundations are:</span></p><p id=""_COMPSCI407655""><span id=""_COMPSCI407656"">■&nbsp;</span><span id=""_COMPSCI407657"">To facilitate students understanding of </span><span id=""_COMPSCI407658"">core concepts involved in robot</span><span id=""_COMPSCI407659"">ic software </span><span id=""_COMPSCI407660"">development</span><span id=""_COMPSCI407661"">, from perception to planning and action</span><span id=""_COMPSCI407662"">;</span></p><p id=""_COMPSCI407663""><span id=""_COMPSCI407664"">■&nbsp;</span><span id=""_COMPSCI407665"">To </span><span id=""_COMPSCI407666"">understand</span><span id=""_COMPSCI407667"">&nbsp;</span><span id=""_COMPSCI407668"">how sensed data and pre-obtained information, or world/domain ""knowledge"", is used to plan interaction with the environment</span></p><p id=""_COMPSCI407669""><span id=""_COMPSCI407670"">■&nbsp;</span><span id=""_COMPSCI407671"">To understand matrix and </span><span id=""_COMPSCI407672"">transformation </span><span id=""_COMPSCI407673"">mathematical </span><span id=""_COMPSCI407674"">operators to accomplish complex robotic motions.</span></p><p id=""_COMPSCI407675""><span id=""_COMPSCI407676"">■&nbsp;</span><span id=""_COMPSCI407677"">To develop the ability to implement, test</span><span id=""_COMPSCI407678"">, validate and deploy a </span><span id=""_COMPSCI407679"">mobile/manipulation robotic problem, based on </span><span id=""_COMPSCI407680"">the </span><span id=""_COMPSCI407681"">use of </span><span id=""_COMPSCI407682"">the</span><span id=""_COMPSCI407683"">&nbsp;</span><span id=""_COMPSCI407684"">R</span><span id=""_COMPSCI407685"">obot </span><span id=""_COMPSCI407686"">O</span><span id=""_COMPSCI407687"">perating </span><span id=""_COMPSCI407688"">S</span><span id=""_COMPSCI407689"">ystem</span><span id=""_COMPSCI407690"">.</span></p><p id=""_COMPSCI407691""><span id=""_COMPSCI407692"">■&nbsp;</span><span id=""_COMPSCI407693"">The relationship between physical robots and their virtual equivalents required for simulation, development </span><span id=""_COMPSCI407694"">and debugging</span><span id=""_COMPSCI407695"">&nbsp;will also be considered.</span></p><p id=""_COMPSCI407696""><span id=""_COMPSCI407697"">■&nbsp;</span><span id=""_COMPSCI407698"">To develop a complete robotic application using off-the-shelf virtual robotic platforms.</span></p><h2>ilo</h2><p id=""_COMPSCI4076100""><span id=""_COMPSCI4076101"">By the end of this course</span><span id=""_COMPSCI4076102"">,</span><span id=""_COMPSCI4076103"">&nbsp;students will be able to:</span></p><p id=""_COMPSCI4076104"">&nbsp;</p><p id=""_COMPSCI4076105""><span id=""_COMPSCI4076106"">1. </span><span id=""_COMPSCI4076107"">Describe </span><span id=""_COMPSCI4076108"">and understand </span><span id=""_COMPSCI4076109"">what constitutes a robot system</span></p><p id=""_COMPSCI4076110""><span id=""_COMPSCI4076111"">2. </span><span id=""_COMPSCI4076112"">Formulate</span><span id=""_COMPSCI4076113"">&nbsp;robot's information capabilities within robotic middleware and understand how data is transformed </span><span id=""_COMPSCI4076114"">from basic</span><span id=""_COMPSCI4076115"">&nbsp;control, sensor and perception functions to robot actions</span></p><p id=""_COMPSCI4076116""><span id=""_COMPSCI4076117"">3. </span><span id=""_COMPSCI4076118"">Create and implement</span><span id=""_COMPSCI4076119"">&nbsp;robot kinematics and motions in mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076120""><span id=""_COMPSCI4076121"">4. </span><span id=""_COMPSCI4076122"">Apply techniques for path and motion planning that allows a robot to move</span></p><p id=""_COMPSCI4076123""><span id=""_COMPSCI4076124"">5. </span><span id=""_COMPSCI4076125"">Design control/behaviour tasks for mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076126""><span id=""_COMPSCI4076127"">6. </span><span id=""_COMPSCI4076128"">Apply</span><span id=""_COMPSCI4076129"">&nbsp;practical software engineering principles during the development of a robotic application</span></p><p id=""_COMPSCI4076130""><span id=""_COMPSCI4076131"">7. </span><span id=""_COMPSCI4076132"">Understand the facilities provided by ROS and how to structure robot control software systems using ROS and vision systems in </span><span id=""_COMPSCI4076133"">OpenCV</span><span id=""_COMPSCI4076134"">.</span></p><p id=""_COMPSCI4076135""><span id=""_COMPSCI4076136"">8. </span><span id=""_COMPSCI4076137"">Be able to program a data processing pipeline consisting of a robot control system in the ROS environment to carry out a specific task, such as locating an object, grasping it and placing it in another location.</span></p>",Robotics Foundations (H) COMPSCI4076,"<p id=""_COMPSCI40760""><span id=""_COMPSCI40761"">This course will introduce students to the computational</span><span id=""_COMPSCI40762"">&nbsp;and mathematical</span><span id=""_COMPSCI40763"">&nbsp;concepts, information processing and software frameworks of robotic systems. It will also consider the sensory and actuation systems required by a robot to sense, understand and interact with its environment. The primary aim is to give students an understanding of how to prototype and implement </span><span id=""_COMPSCI40764"">autonomous </span><span id=""_COMPSCI40765"">robotic systems by making use of </span><span id=""_COMPSCI40766"">a </span><span id=""_COMPSCI40767"">sophisticated robotic middleware (e.g. Robot Operating System (ROS)), its associated data transmission channels</span><span id=""_COMPSCI40768"">, </span><span id=""_COMPSCI40769"">software </span><span id=""_COMPSCI407610"">robotic </span><span id=""_COMPSCI407611"">stacks</span><span id=""_COMPSCI407612"">&nbsp;and the underlying mathematics required to operate a robot</span><span id=""_COMPSCI407613"">. </span><span id=""_COMPSCI407614"">This</span><span id=""_COMPSCI407615"">&nbsp;is a hands-on course, designed to provide </span><span id=""_COMPSCI407616"">student</span><span id=""_COMPSCI407617"">s with the required programming</span><span id=""_COMPSCI407618"">, mathematical</span><span id=""_COMPSCI407619"">&nbsp;and debugging skill-set to implement robotic solutions based on</span><span id=""_COMPSCI407620"">&nbsp;the</span><span id=""_COMPSCI407621"">&nbsp;use of off-the-shelf commercially available real and virtual robots.</span><span id=""_COMPSCI407622"">&nbsp;P</span><span id=""_COMPSCI407623"">ython skills are a requirement for this course</span><span id=""_COMPSCI407624"">; </span><span id=""_COMPSCI407625"">C/C++ skills are desirable but not essential</span><span id=""_COMPSCI407626"">.</span></p>","<p id=""_COMPSCI407653""><span id=""_COMPSCI407654"">The aims of Robotics Foundations are:</span></p><p id=""_COMPSCI407655""><span id=""_COMPSCI407656"">■&nbsp;</span><span id=""_COMPSCI407657"">To facilitate students understanding of </span><span id=""_COMPSCI407658"">core concepts involved in robot</span><span id=""_COMPSCI407659"">ic software </span><span id=""_COMPSCI407660"">development</span><span id=""_COMPSCI407661"">, from perception to planning and action</span><span id=""_COMPSCI407662"">;</span></p><p id=""_COMPSCI407663""><span id=""_COMPSCI407664"">■&nbsp;</span><span id=""_COMPSCI407665"">To </span><span id=""_COMPSCI407666"">understand</span><span id=""_COMPSCI407667"">&nbsp;</span><span id=""_COMPSCI407668"">how sensed data and pre-obtained information, or world/domain ""knowledge"", is used to plan interaction with the environment</span></p><p id=""_COMPSCI407669""><span id=""_COMPSCI407670"">■&nbsp;</span><span id=""_COMPSCI407671"">To understand matrix and </span><span id=""_COMPSCI407672"">transformation </span><span id=""_COMPSCI407673"">mathematical </span><span id=""_COMPSCI407674"">operators to accomplish complex robotic motions.</span></p><p id=""_COMPSCI407675""><span id=""_COMPSCI407676"">■&nbsp;</span><span id=""_COMPSCI407677"">To develop the ability to implement, test</span><span id=""_COMPSCI407678"">, validate and deploy a </span><span id=""_COMPSCI407679"">mobile/manipulation robotic problem, based on </span><span id=""_COMPSCI407680"">the </span><span id=""_COMPSCI407681"">use of </span><span id=""_COMPSCI407682"">the</span><span id=""_COMPSCI407683"">&nbsp;</span><span id=""_COMPSCI407684"">R</span><span id=""_COMPSCI407685"">obot </span><span id=""_COMPSCI407686"">O</span><span id=""_COMPSCI407687"">perating </span><span id=""_COMPSCI407688"">S</span><span id=""_COMPSCI407689"">ystem</span><span id=""_COMPSCI407690"">.</span></p><p id=""_COMPSCI407691""><span id=""_COMPSCI407692"">■&nbsp;</span><span id=""_COMPSCI407693"">The relationship between physical robots and their virtual equivalents required for simulation, development </span><span id=""_COMPSCI407694"">and debugging</span><span id=""_COMPSCI407695"">&nbsp;will also be considered.</span></p><p id=""_COMPSCI407696""><span id=""_COMPSCI407697"">■&nbsp;</span><span id=""_COMPSCI407698"">To develop a complete robotic application using off-the-shelf virtual robotic platforms.</span></p>","<p id=""_COMPSCI4076100""><span id=""_COMPSCI4076101"">By the end of this course</span><span id=""_COMPSCI4076102"">,</span><span id=""_COMPSCI4076103"">&nbsp;students will be able to:</span></p><p id=""_COMPSCI4076104"">&nbsp;</p><p id=""_COMPSCI4076105""><span id=""_COMPSCI4076106"">1. </span><span id=""_COMPSCI4076107"">Describe </span><span id=""_COMPSCI4076108"">and understand </span><span id=""_COMPSCI4076109"">what constitutes a robot system</span></p><p id=""_COMPSCI4076110""><span id=""_COMPSCI4076111"">2. </span><span id=""_COMPSCI4076112"">Formulate</span><span id=""_COMPSCI4076113"">&nbsp;robot's information capabilities within robotic middleware and understand how data is transformed </span><span id=""_COMPSCI4076114"">from basic</span><span id=""_COMPSCI4076115"">&nbsp;control, sensor and perception functions to robot actions</span></p><p id=""_COMPSCI4076116""><span id=""_COMPSCI4076117"">3. </span><span id=""_COMPSCI4076118"">Create and implement</span><span id=""_COMPSCI4076119"">&nbsp;robot kinematics and motions in mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076120""><span id=""_COMPSCI4076121"">4. </span><span id=""_COMPSCI4076122"">Apply techniques for path and motion planning that allows a robot to move</span></p><p id=""_COMPSCI4076123""><span id=""_COMPSCI4076124"">5. </span><span id=""_COMPSCI4076125"">Design control/behaviour tasks for mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076126""><span id=""_COMPSCI4076127"">6. </span><span id=""_COMPSCI4076128"">Apply</span><span id=""_COMPSCI4076129"">&nbsp;practical software engineering principles during the development of a robotic application</span></p><p id=""_COMPSCI4076130""><span id=""_COMPSCI4076131"">7. </span><span id=""_COMPSCI4076132"">Understand the facilities provided by ROS and how to structure robot control software systems using ROS and vision systems in </span><span id=""_COMPSCI4076133"">OpenCV</span><span id=""_COMPSCI4076134"">.</span></p><p id=""_COMPSCI4076135""><span id=""_COMPSCI4076136"">8. </span><span id=""_COMPSCI4076137"">Be able to program a data processing pipeline consisting of a robot control system in the ROS environment to carry out a specific task, such as locating an object, grasping it and placing it in another location.</span></p>"
Glasgow_Scotland,COMPSCI4087,"<h2>Glasgow_Scotland COMPSCI4087</h2><h2>title</h2>Startup Growth Engineering (H) COMPSCI4087<h2>summary</h2><p id=""_COMPSCI40870""><span id=""_COMPSCI40871"">Start-up Growth Engineering comprises the techniques and best practices applied by the world's most successful tech companies to exponentially grow from the start-up phase into large-scale organisations, with millions of users.  These techniques have been distilled from best practices employed across start-ups in the Silicon Valley and elsewhere.   Start-up Growth Engineering moves beyond traditional product development and marketing activities into an integrated, scientific approach to introducing a new product idea into a market and driving viral user growth.    </span></p><p id=""_COMPSCI40872"">&nbsp;</p><p id=""_COMPSCI40873""><span id=""_COMPSCI40874"">The Start-up Growth Engineering course combines theory with a large number of practical examples taken from well-known organisations.  It equips students with the skills to employ their software engineering and product development skills more effectively, in a real-world environment.</span></p><h2>content</h2><p id=""_COMPSCI408740""><span id=""_COMPSCI408741"">To familiarise students with the fundamental techniques used by tech companies to drive exponential user growth, including user retention techniques, the different types of compounding growth mechanisms, and optimization techniques.</span></p><p id=""_COMPSCI408742"">&nbsp;</p><p id=""_COMPSCI408743""><span id=""_COMPSCI408744"">To equip students with the analytical and strategy skills necessary to analyse real-world start-up growth trajectories and construct predictive and optimisation models to drive user growth.    </span></p><p id=""_COMPSCI408745"">&nbsp;</p><p id=""_COMPSCI408746""><span id=""_COMPSCI408747"">To enable students to apply these techniques in team situations and to gain an understanding of the typical Growth Engineering team structures and processes employed in Silicon Valley and other leading start-up incubation areas</span><span id=""_COMPSCI408748"">.</span></p><h2>ilo</h2><p id=""_COMPSCI408750""><span id=""_COMPSCI408751"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI408752""><span id=""_COMPSCI408753"">1. </span><span id=""_COMPSCI408754"">explain and apply the techniques used to create viral user growth in tech companies;</span></p><p id=""_COMPSCI408755""><span id=""_COMPSCI408756"">2. </span><span id=""_COMPSCI408757"">create a growth strategy for a start-up, designed to drive exponential growth.</span></p><p id=""_COMPSCI408758""><span id=""_COMPSCI408759"">3. </span><span id=""_COMPSCI408760"">explain the key metrics involved in driving start-up exponential growth, and how to optimise those metrics;</span></p><p id=""_COMPSCI408761""><span id=""_COMPSCI408762"">4. </span><span id=""_COMPSCI408763"">qualitatively and quantitatively predict the growth performance of a product or start-up based on current growth metrics</span></p><p id=""_COMPSCI408764""><span id=""_COMPSCI408765"">5. </span><span id=""_COMPSCI408766"">analyse and explain why some start-ups grow into very large-scale organisations, while others with similar products fail;</span></p><p id=""_COMPSCI408767""><span id=""_COMPSCI408768"">6. </span><span id=""_COMPSCI408769"">explain how growth teams are configured inside leading start-ups and the development models used by them.</span></p>",Startup Growth Engineering (H) COMPSCI4087,"<p id=""_COMPSCI40870""><span id=""_COMPSCI40871"">Start-up Growth Engineering comprises the techniques and best practices applied by the world's most successful tech companies to exponentially grow from the start-up phase into large-scale organisations, with millions of users.  These techniques have been distilled from best practices employed across start-ups in the Silicon Valley and elsewhere.   Start-up Growth Engineering moves beyond traditional product development and marketing activities into an integrated, scientific approach to introducing a new product idea into a market and driving viral user growth.    </span></p><p id=""_COMPSCI40872"">&nbsp;</p><p id=""_COMPSCI40873""><span id=""_COMPSCI40874"">The Start-up Growth Engineering course combines theory with a large number of practical examples taken from well-known organisations.  It equips students with the skills to employ their software engineering and product development skills more effectively, in a real-world environment.</span></p>","<p id=""_COMPSCI408740""><span id=""_COMPSCI408741"">To familiarise students with the fundamental techniques used by tech companies to drive exponential user growth, including user retention techniques, the different types of compounding growth mechanisms, and optimization techniques.</span></p><p id=""_COMPSCI408742"">&nbsp;</p><p id=""_COMPSCI408743""><span id=""_COMPSCI408744"">To equip students with the analytical and strategy skills necessary to analyse real-world start-up growth trajectories and construct predictive and optimisation models to drive user growth.    </span></p><p id=""_COMPSCI408745"">&nbsp;</p><p id=""_COMPSCI408746""><span id=""_COMPSCI408747"">To enable students to apply these techniques in team situations and to gain an understanding of the typical Growth Engineering team structures and processes employed in Silicon Valley and other leading start-up incubation areas</span><span id=""_COMPSCI408748"">.</span></p>","<p id=""_COMPSCI408750""><span id=""_COMPSCI408751"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI408752""><span id=""_COMPSCI408753"">1. </span><span id=""_COMPSCI408754"">explain and apply the techniques used to create viral user growth in tech companies;</span></p><p id=""_COMPSCI408755""><span id=""_COMPSCI408756"">2. </span><span id=""_COMPSCI408757"">create a growth strategy for a start-up, designed to drive exponential growth.</span></p><p id=""_COMPSCI408758""><span id=""_COMPSCI408759"">3. </span><span id=""_COMPSCI408760"">explain the key metrics involved in driving start-up exponential growth, and how to optimise those metrics;</span></p><p id=""_COMPSCI408761""><span id=""_COMPSCI408762"">4. </span><span id=""_COMPSCI408763"">qualitatively and quantitatively predict the growth performance of a product or start-up based on current growth metrics</span></p><p id=""_COMPSCI408764""><span id=""_COMPSCI408765"">5. </span><span id=""_COMPSCI408766"">analyse and explain why some start-ups grow into very large-scale organisations, while others with similar products fail;</span></p><p id=""_COMPSCI408767""><span id=""_COMPSCI408768"">6. </span><span id=""_COMPSCI408769"">explain how growth teams are configured inside leading start-ups and the development models used by them.</span></p>"
Glasgow_Scotland,COMPSCI4074,"<h2>Glasgow_Scotland COMPSCI4074</h2><h2>title</h2>Text as Data - An Introduction to Document Analytics (H) COMPSCI4074<h2>summary</h2><p id=""_COMPSCI40740""><span id=""_COMPSCI40741"">This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches.</span><span id=""_COMPSCI40742"">&nbsp;</span><span id=""_COMPSCI40743"">The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka/Spark Mlib).</span></p><h2>content</h2><p id=""_COMPSCI407418""><span id=""_COMPSCI407419"">This course aims to introduce students to </span><span id=""_COMPSCI407420"">language modelling, geometric interpretations of documents, information theory, network models and in general the use of </span><span id=""_COMPSCI407421"">stochastic thinking (including building on the probability theory learned during the </span><span id=""_COMPSCI407422"">Data Fundamentals</span><span id=""_COMPSCI407423"">&nbsp;c</span><span id=""_COMPSCI407424"">ourse). This is</span><span id=""_COMPSCI407425"">&nbsp;illustrated through </span><span id=""_COMPSCI407426"">a number of</span><span id=""_COMPSCI407427"">&nbsp;supervised and unsupervised text processing and analytics approaches</span><span id=""_COMPSCI407428"">&nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics</span><span id=""_COMPSCI407429"">. </span><span id=""_COMPSCI407430"">&nbsp;</span><span id=""_COMPSCI407431"">The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka/Spark </span><span id=""_COMPSCI407432"">Mlib</span><span id=""_COMPSCI407433"">).</span></p><h2>ilo</h2><p id=""_COMPSCI407436""><span id=""_COMPSCI407437"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407438""><span id=""_COMPSCI407439"">1. </span><span id=""_COMPSCI407440"">Describe classical models</span><span id=""_COMPSCI407441"">&nbsp;for textual representations</span><span id=""_COMPSCI407442"">&nbsp;such as the vector space, network graphs, language modelling.</span></p><p id=""_COMPSCI407443""><span id=""_COMPSCI407444"">2. </span><span id=""_COMPSCI407445"">Identify potential applications of text analytics in practice.  </span></p><p id=""_COMPSCI407446""><span id=""_COMPSCI407447"">3. </span><span id=""_COMPSCI407448"">Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.</span></p><p id=""_COMPSCI407449""><span id=""_COMPSCI407450"">4. </span><span id=""_COMPSCI407451"">Represent data as features to serve as input to machine learning models. </span></p><p id=""_COMPSCI407452""><span id=""_COMPSCI407453"">5. </span><span id=""_COMPSCI407454"">Assess machine learning model quality in terms</span><span id=""_COMPSCI407455"">&nbsp;of relevant error metrics for</span><span id=""_COMPSCI407456"">&nbsp;document processing tasks, in an appropriate experimental design.</span></p><p id=""_COMPSCI407457""><span id=""_COMPSCI407458"">6. </span><span id=""_COMPSCI407459"">Deploy unsupervised and machine learned approaches for document/text analytics tasks.</span></p>",Text as Data - An Introduction to Document Analytics (H) COMPSCI4074,"<p id=""_COMPSCI40740""><span id=""_COMPSCI40741"">This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches.</span><span id=""_COMPSCI40742"">&nbsp;</span><span id=""_COMPSCI40743"">The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka/Spark Mlib).</span></p>","<p id=""_COMPSCI407418""><span id=""_COMPSCI407419"">This course aims to introduce students to </span><span id=""_COMPSCI407420"">language modelling, geometric interpretations of documents, information theory, network models and in general the use of </span><span id=""_COMPSCI407421"">stochastic thinking (including building on the probability theory learned during the </span><span id=""_COMPSCI407422"">Data Fundamentals</span><span id=""_COMPSCI407423"">&nbsp;c</span><span id=""_COMPSCI407424"">ourse). This is</span><span id=""_COMPSCI407425"">&nbsp;illustrated through </span><span id=""_COMPSCI407426"">a number of</span><span id=""_COMPSCI407427"">&nbsp;supervised and unsupervised text processing and analytics approaches</span><span id=""_COMPSCI407428"">&nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics</span><span id=""_COMPSCI407429"">. </span><span id=""_COMPSCI407430"">&nbsp;</span><span id=""_COMPSCI407431"">The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka/Spark </span><span id=""_COMPSCI407432"">Mlib</span><span id=""_COMPSCI407433"">).</span></p>","<p id=""_COMPSCI407436""><span id=""_COMPSCI407437"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407438""><span id=""_COMPSCI407439"">1. </span><span id=""_COMPSCI407440"">Describe classical models</span><span id=""_COMPSCI407441"">&nbsp;for textual representations</span><span id=""_COMPSCI407442"">&nbsp;such as the vector space, network graphs, language modelling.</span></p><p id=""_COMPSCI407443""><span id=""_COMPSCI407444"">2. </span><span id=""_COMPSCI407445"">Identify potential applications of text analytics in practice.  </span></p><p id=""_COMPSCI407446""><span id=""_COMPSCI407447"">3. </span><span id=""_COMPSCI407448"">Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.</span></p><p id=""_COMPSCI407449""><span id=""_COMPSCI407450"">4. </span><span id=""_COMPSCI407451"">Represent data as features to serve as input to machine learning models. </span></p><p id=""_COMPSCI407452""><span id=""_COMPSCI407453"">5. </span><span id=""_COMPSCI407454"">Assess machine learning model quality in terms</span><span id=""_COMPSCI407455"">&nbsp;of relevant error metrics for</span><span id=""_COMPSCI407456"">&nbsp;document processing tasks, in an appropriate experimental design.</span></p><p id=""_COMPSCI407457""><span id=""_COMPSCI407458"">6. </span><span id=""_COMPSCI407459"">Deploy unsupervised and machine learned approaches for document/text analytics tasks.</span></p>"
Glasgow_Scotland,COMPSCI4072,"<h2>Glasgow_Scotland COMPSCI4072</h2><h2>title</h2>Theory of Computation (H) COMPSCI4072<h2>summary</h2><p id=""_COMPSCI40720""><span id=""_COMPSCI40721"">This course covers the theory of sequential and concurrent computation. The main topics include the lambda calculus as a foundation for functional computation and the pi calculus as a foundation for concurrent computation; the theory of operational semantics and type systems for both these calculi.</span></p><h2>content</h2><p id=""_COMPSCI407222""><span id=""_COMPSCI407223"">The aim of the course is to show how these two models of computation can be formally defined in order to give a rigorous foundation for sequential and concurrent programming paradigms.</span></p><h2>ilo</h2><p id=""_COMPSCI407224""><span id=""_COMPSCI407225"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407226""><span id=""_COMPSCI407227"">1. </span><span id=""_COMPSCI407228"">Express concepts such as syntax, semantics and typing rules in a formal way;</span></p><p id=""_COMPSCI407229""><span id=""_COMPSCI407230"">2. </span><span id=""_COMPSCI407231"">Evaluate expressions in lambda calculus according to the definition of the reduction relation</span><span id=""_COMPSCI407232"">;</span></p><p id=""_COMPSCI407233""><span id=""_COMPSCI407234"">3. </span><span id=""_COMPSCI407235"">Determine whether or not expressions in lambda calculus are typable in the simple type system</span><span id=""_COMPSCI407236"">;</span></p><p id=""_COMPSCI407237""><span id=""_COMPSCI407238"">4. </span><span id=""_COMPSCI407239"">Implement lambda calculus expressions in a functional language such as Haskell or ML, or the functional fragment of Python</span><span id=""_COMPSCI407240"">;</span></p><p id=""_COMPSCI407241""><span id=""_COMPSCI407242"">5. </span><span id=""_COMPSCI407243"">Execute pi calculus processes according to the definition </span><span id=""_COMPSCI407244"">of the reduction relation, and determine </span><span id=""_COMPSCI407245"">bisimulation</span><span id=""_COMPSCI407246"">&nbsp;relationships between processes;</span></p><p id=""_COMPSCI407247""><span id=""_COMPSCI407248"">6. </span><span id=""_COMPSCI407249"">Determine whether or not processes in pi calculus are typable in the simple type system</span><span id=""_COMPSCI407250"">;</span></p><p id=""_COMPSCI407251""><span id=""_COMPSCI407252"">7. </span><span id=""_COMPSCI407253"">Implement pi calculus processes in a simulation environment or in an appropriate fragment of the Go programming language</span><span id=""_COMPSCI407254"">;</span></p><p id=""_COMPSCI407255""><span id=""_COMPSCI407256"">8. </span><span id=""_COMPSCI407257"">Connect both the lambda calculus and the pi calculus to logic under Curry-Howard correspondences, which make the foundation for functional and concurrent programming.</span></p>",Theory of Computation (H) COMPSCI4072,"<p id=""_COMPSCI40720""><span id=""_COMPSCI40721"">This course covers the theory of sequential and concurrent computation. The main topics include the lambda calculus as a foundation for functional computation and the pi calculus as a foundation for concurrent computation; the theory of operational semantics and type systems for both these calculi.</span></p>","<p id=""_COMPSCI407222""><span id=""_COMPSCI407223"">The aim of the course is to show how these two models of computation can be formally defined in order to give a rigorous foundation for sequential and concurrent programming paradigms.</span></p>","<p id=""_COMPSCI407224""><span id=""_COMPSCI407225"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407226""><span id=""_COMPSCI407227"">1. </span><span id=""_COMPSCI407228"">Express concepts such as syntax, semantics and typing rules in a formal way;</span></p><p id=""_COMPSCI407229""><span id=""_COMPSCI407230"">2. </span><span id=""_COMPSCI407231"">Evaluate expressions in lambda calculus according to the definition of the reduction relation</span><span id=""_COMPSCI407232"">;</span></p><p id=""_COMPSCI407233""><span id=""_COMPSCI407234"">3. </span><span id=""_COMPSCI407235"">Determine whether or not expressions in lambda calculus are typable in the simple type system</span><span id=""_COMPSCI407236"">;</span></p><p id=""_COMPSCI407237""><span id=""_COMPSCI407238"">4. </span><span id=""_COMPSCI407239"">Implement lambda calculus expressions in a functional language such as Haskell or ML, or the functional fragment of Python</span><span id=""_COMPSCI407240"">;</span></p><p id=""_COMPSCI407241""><span id=""_COMPSCI407242"">5. </span><span id=""_COMPSCI407243"">Execute pi calculus processes according to the definition </span><span id=""_COMPSCI407244"">of the reduction relation, and determine </span><span id=""_COMPSCI407245"">bisimulation</span><span id=""_COMPSCI407246"">&nbsp;relationships between processes;</span></p><p id=""_COMPSCI407247""><span id=""_COMPSCI407248"">6. </span><span id=""_COMPSCI407249"">Determine whether or not processes in pi calculus are typable in the simple type system</span><span id=""_COMPSCI407250"">;</span></p><p id=""_COMPSCI407251""><span id=""_COMPSCI407252"">7. </span><span id=""_COMPSCI407253"">Implement pi calculus processes in a simulation environment or in an appropriate fragment of the Go programming language</span><span id=""_COMPSCI407254"">;</span></p><p id=""_COMPSCI407255""><span id=""_COMPSCI407256"">8. </span><span id=""_COMPSCI407257"">Connect both the lambda calculus and the pi calculus to logic under Curry-Howard correspondences, which make the foundation for functional and concurrent programming.</span></p>"
Glasgow_Scotland,COMPSCI4077,"<h2>Glasgow_Scotland COMPSCI4077</h2><h2>title</h2>Web Science (H) COMPSCI4077<h2>summary</h2><p id=""_COMPSCI40770""><span id=""_COMPSCI40771"">Web Science is the study of the World Wide Web (WWW), its components, facets and characteristics and the impact it has on both society and technology. The World Wide Web changed the way in which we create information, communicate and interact. New models of social networks (LinkedIn, Facebook, etc.) create opportunities, which were not </span><span id=""_COMPSCI40772"">available</span><span id=""_COMPSCI40773"">&nbsp;before. Exploiting such data and networks for the benefit of individuals and organizations has become a key in our knowledge society.</span></p><h2>content</h2><p id=""_COMPSCI407717""><span id=""_COMPSCI407718"">The objective of </span><span id=""_COMPSCI407719"">this course</span><span id=""_COMPSCI407720"">&nbsp;is to </span><span id=""_COMPSCI407721"">introduce students to the field of web science and critically examine methodologies and techniques used in the field.</span></p><h2>ilo</h2><p id=""_COMPSCI407727""><span id=""_COMPSCI407728"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407729""><span id=""_COMPSCI407730"">1. </span><span id=""_COMPSCI407731"">Skills to analyse and implement technical solutions on social web applications</span></p><p id=""_COMPSCI407732""><span id=""_COMPSCI407733"">2. </span><span id=""_COMPSCI407734"">Describe the techniques employed in developing advertising models on the web</span></p><p id=""_COMPSCI407735""><span id=""_COMPSCI407736"">3. </span><span id=""_COMPSCI407737"">Describe the techniques needed to analyse social networks</span></p><p id=""_COMPSCI407738""><span id=""_COMPSCI407739"">4. </span><span id=""_COMPSCI407740"">Ability to understand and rationalise privacy threats and mitigation strategies in online communities</span></p><p id=""_COMPSCI407741""><span id=""_COMPSCI407742"">5. </span><span id=""_COMPSCI407743"">Describe</span><span id=""_COMPSCI407744"">&nbsp;methodologies to conduct large scale data analysis</span><span id=""_COMPSCI407745"">&nbsp;to analyse user behaviour on the web,</span><span id=""_COMPSCI407746"">&nbsp;to predict user demographics and purchase behaviours</span></p><p id=""_COMPSCI407747""><span id=""_COMPSCI407748"">6. </span><span id=""_COMPSCI407749"">Describe</span><span id=""_COMPSCI407750"">&nbsp;sentiment and emotion extraction techniques</span><span id=""_COMPSCI407751"">&nbsp;and employ them.</span></p>",Web Science (H) COMPSCI4077,"<p id=""_COMPSCI40770""><span id=""_COMPSCI40771"">Web Science is the study of the World Wide Web (WWW), its components, facets and characteristics and the impact it has on both society and technology. The World Wide Web changed the way in which we create information, communicate and interact. New models of social networks (LinkedIn, Facebook, etc.) create opportunities, which were not </span><span id=""_COMPSCI40772"">available</span><span id=""_COMPSCI40773"">&nbsp;before. Exploiting such data and networks for the benefit of individuals and organizations has become a key in our knowledge society.</span></p>","<p id=""_COMPSCI407717""><span id=""_COMPSCI407718"">The objective of </span><span id=""_COMPSCI407719"">this course</span><span id=""_COMPSCI407720"">&nbsp;is to </span><span id=""_COMPSCI407721"">introduce students to the field of web science and critically examine methodologies and techniques used in the field.</span></p>","<p id=""_COMPSCI407727""><span id=""_COMPSCI407728"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407729""><span id=""_COMPSCI407730"">1. </span><span id=""_COMPSCI407731"">Skills to analyse and implement technical solutions on social web applications</span></p><p id=""_COMPSCI407732""><span id=""_COMPSCI407733"">2. </span><span id=""_COMPSCI407734"">Describe the techniques employed in developing advertising models on the web</span></p><p id=""_COMPSCI407735""><span id=""_COMPSCI407736"">3. </span><span id=""_COMPSCI407737"">Describe the techniques needed to analyse social networks</span></p><p id=""_COMPSCI407738""><span id=""_COMPSCI407739"">4. </span><span id=""_COMPSCI407740"">Ability to understand and rationalise privacy threats and mitigation strategies in online communities</span></p><p id=""_COMPSCI407741""><span id=""_COMPSCI407742"">5. </span><span id=""_COMPSCI407743"">Describe</span><span id=""_COMPSCI407744"">&nbsp;methodologies to conduct large scale data analysis</span><span id=""_COMPSCI407745"">&nbsp;to analyse user behaviour on the web,</span><span id=""_COMPSCI407746"">&nbsp;to predict user demographics and purchase behaviours</span></p><p id=""_COMPSCI407747""><span id=""_COMPSCI407748"">6. </span><span id=""_COMPSCI407749"">Describe</span><span id=""_COMPSCI407750"">&nbsp;sentiment and emotion extraction techniques</span><span id=""_COMPSCI407751"">&nbsp;and employ them.</span></p>"
Uppsala_Sweden,1DL301,"<h2>Uppsala_Sweden 1DL301</h2><h2>title</h2>Database Design I<h2>content</h2> <li>an introduction to the database area and database terminology,</li> <li>entitets-relations (ER) modelling and expanded entitets-relations (EER) modelling,</li> <li>an overview of the relational data model and relational algebra and transformation of the data representation from the ER data model to the relational data model,</li> <li>an introduction to physical database design with functional dependencies and normalisation,</li> <li>an introduction to queries, updates and data definition with help of the query language SQL,</li> <li>an introduction to transactions, basic techniques for transaction management and concurrency control and recovery,</li> <li>an introduction to physical database design with file organisation, single level index and tree index,</li> <li>an introduction to procedural SQL and the application interface, and</li> <li>an orientation in advanced database applications and techniques.</li><h2>ilo</h2> <li>create conceptual models of relational databases based on requirement specification documents;</li> <li>translate a conceptual model to the relational model;</li> <li>create, modify and query relational databases using the SQL language;</li> <li>apply normalization techniques to reduce data redundancy and improve data integrity;</li> <li>create computer programs which store, modify and query data stored in databases;</li> <li>set up indexes and use other techniques to improve the performance of databases;</li> <li>set up users and their privileges;</li> <li>explain principles of security in database systems and apply protection mechanisms.</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level.</li>",Database Design I,," <li>an introduction to the database area and database terminology,</li> <li>entitets-relations (ER) modelling and expanded entitets-relations (EER) modelling,</li> <li>an overview of the relational data model and relational algebra and transformation of the data representation from the ER data model to the relational data model,</li> <li>an introduction to physical database design with functional dependencies and normalisation,</li> <li>an introduction to queries, updates and data definition with help of the query language SQL,</li> <li>an introduction to transactions, basic techniques for transaction management and concurrency control and recovery,</li> <li>an introduction to physical database design with file organisation, single level index and tree index,</li> <li>an introduction to procedural SQL and the application interface, and</li> <li>an orientation in advanced database applications and techniques.</li>"," <li>create conceptual models of relational databases based on requirement specification documents;</li> <li>translate a conceptual model to the relational model;</li> <li>create, modify and query relational databases using the SQL language;</li> <li>apply normalization techniques to reduce data redundancy and improve data integrity;</li> <li>create computer programs which store, modify and query data stored in databases;</li> <li>set up indexes and use other techniques to improve the performance of databases;</li> <li>set up users and their privileges;</li> <li>explain principles of security in database systems and apply protection mechanisms.</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level.</li>"
Uppsala_Sweden,1DL311,"<h2>Uppsala_Sweden 1DL311</h2><h2>title</h2>Semantics of Programming Languages<h2>content</h2><h2>ilo</h2> <li>explain and apply formal semantic descriptions of programming languages and other formal languages, particularly in operational semantics.</li> <li>construct simple semantic descriptions in operational semantics, and</li> <li>apply methods to prove basic properties of semantic descriptions.</li>",Semantics of Programming Languages,,," <li>explain and apply formal semantic descriptions of programming languages and other formal languages, particularly in operational semantics.</li> <li>construct simple semantic descriptions in operational semantics, and</li> <li>apply methods to prove basic properties of semantic descriptions.</li>"
Uppsala_Sweden,1DT052,<h2>Uppsala_Sweden 1DT052</h2><h2>title</h2>Computer Networks I<h2>content</h2><h2>ilo</h2> <li>Explain in a concise manner how the Internet is constructed and functions.</li> <li>Reason about design choices at different layers in the TCP/IP protocol stack.</li> <li>Use standard tools to debug a network path.</li> <li>Theorize about establishing and maintaining communication at different levels of abstraction.</li> <li>Identify and discuss usual security issues regarding computer network protocols and applications.</li>,Computer Networks I,,, <li>Explain in a concise manner how the Internet is constructed and functions.</li> <li>Reason about design choices at different layers in the TCP/IP protocol stack.</li> <li>Use standard tools to debug a network path.</li> <li>Theorize about establishing and maintaining communication at different levels of abstraction.</li> <li>Identify and discuss usual security issues regarding computer network protocols and applications.</li>
Uppsala_Sweden,1TD403,<h2>Uppsala_Sweden 1TD403</h2><h2>title</h2>Numerical Methods and Simulation<h2>content</h2><h2>ilo</h2>,Numerical Methods and Simulation,,,
Uppsala_Sweden,1DL231,"<h2>Uppsala_Sweden 1DL231</h2><h2>title</h2>Algorithms and Data Structures II<h2>content</h2><h2>ilo</h2> <li>use the notation of asymptotic growth of functions and be able to use this notation to describe the complexity of algorithms and computational problems</li> <li>derive equations for the complexity of algorithms and solve such equations</li> <li>work with common algorithmic techniques such as dynamic programming, greedy algorithms, etc.</li> <li>deal with basic problems using graph algorithms, string matching and flow networks.</li> <li>define the complexity classes P and NP, and discuss the open question whether P=NP.</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>",Algorithms and Data Structures II,,," <li>use the notation of asymptotic growth of functions and be able to use this notation to describe the complexity of algorithms and computational problems</li> <li>derive equations for the complexity of algorithms and solve such equations</li> <li>work with common algorithmic techniques such as dynamic programming, greedy algorithms, etc.</li> <li>deal with basic problems using graph algorithms, string matching and flow networks.</li> <li>define the complexity classes P and NP, and discuss the open question whether P=NP.</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>"
Uppsala_Sweden,1DL321,"<h2>Uppsala_Sweden 1DL321</h2><h2>title</h2>Compiler Design I<h2>content</h2><h2>ilo</h2> <li>structure a compiler as a sequence of distinct translation steps</li> <li>use regular languages to describe the lexical elements of a programming language</li> <li>describe lexical analysis using a finite automaton</li> <li>use context free languages to describe the syntactic structure of a programming language</li> <li>use the parsing methods top-down (recursive descent) and bottom-up (LR)</li> <li>use abstract syntax trees to represent the results of the syntactic analysis</li> <li>break down statements and expressions to simpler designs, and translate syntax trees to intermediate code</li> <li>describe how recursive procedure calls can be implemented by means of stacks, activation posts and machine registers</li> <li>translate the simplified intermediate code of a program to machine-specific instructions</li>",Compiler Design I,,," <li>structure a compiler as a sequence of distinct translation steps</li> <li>use regular languages to describe the lexical elements of a programming language</li> <li>describe lexical analysis using a finite automaton</li> <li>use context free languages to describe the syntactic structure of a programming language</li> <li>use the parsing methods top-down (recursive descent) and bottom-up (LR)</li> <li>use abstract syntax trees to represent the results of the syntactic analysis</li> <li>break down statements and expressions to simpler designs, and translate syntax trees to intermediate code</li> <li>describe how recursive procedure calls can be implemented by means of stacks, activation posts and machine registers</li> <li>translate the simplified intermediate code of a program to machine-specific instructions</li>"
Uppsala_Sweden,1DT072,"<h2>Uppsala_Sweden 1DT072</h2><h2>title</h2>Secure Computer Systems I<h2>content</h2><h2>ilo</h2> <li>explain basic concepts, theories and principles for security in computer systems, such as identification, authenticity and access control</li> <li>explain principles for attacks and protective measures in different aspects of computer systems, such as operating systems, software, networks and web based systems</li> <li>identify weaknesses and strengths concerning the security in computer systems</li> <li>discuss ethical aspects of computer systems security and its application</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level</li>",Secure Computer Systems I,,," <li>explain basic concepts, theories and principles for security in computer systems, such as identification, authenticity and access control</li> <li>explain principles for attacks and protective measures in different aspects of computer systems, such as operating systems, software, networks and web based systems</li> <li>identify weaknesses and strengths concerning the security in computer systems</li> <li>discuss ethical aspects of computer systems security and its application</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level</li>"
Uppsala_Sweden,1DL481,"<h2>Uppsala_Sweden 1DL481</h2><h2>title</h2>Algorithms and Data Structures III<h2>content</h2><h2>ilo</h2> <li>analyse NP-completeness of an algorithmic problem;</li> <li>use advanced algorithm analysis methods, such as amortised analysis and probabilistic analysis;</li> <li>use advanced algorithm design methods in order to approach hard algorithmic problems in a pragmatic way, such as by using randomised algorithms (such as universal hashing), approximation algorithms, stochastic local search (such as simulated annealing and tabu search), integer programming, propositional satisfiability (SAT), and SAT modulo theories (SMT).</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>",Algorithms and Data Structures III,,," <li>analyse NP-completeness of an algorithmic problem;</li> <li>use advanced algorithm analysis methods, such as amortised analysis and probabilistic analysis;</li> <li>use advanced algorithm design methods in order to approach hard algorithmic problems in a pragmatic way, such as by using randomised algorithms (such as universal hashing), approximation algorithms, stochastic local search (such as simulated annealing and tabu search), integer programming, propositional satisfiability (SAT), and SAT modulo theories (SMT).</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>"
Uppsala_Sweden,1MD001,<h2>Uppsala_Sweden 1MD001</h2><h2>title</h2>Advanced Interaction Design<h2>content</h2><h2>ilo</h2>,Advanced Interaction Design,,,
Uppsala_Sweden,1TD169,"<h2>Uppsala_Sweden 1TD169</h2><h2>title</h2>Data Engineering I<h2>content</h2><h2>ilo</h2> <li>use public and private cloud infrastructure;</li> <li>discuss key concepts in cloud computing such as Infrastructure as a Service (IaaS), Platform as a service (PaaS) och Software as a Service (SaaS);</li> <li>apply cloud security best practices in solutions;</li> <li>use modern systems for handling massive datasets;</li> <li>analyse properties of data-intensive applications and based on this suggest suitable strategies and architectures to meet application needs;</li> <li>implement software based on analysis as in the previous point and using technology presented in the course;</li> <li>critically analyse, discuss and present solutions and implementations in writing and orally.</li>",Data Engineering I,,," <li>use public and private cloud infrastructure;</li> <li>discuss key concepts in cloud computing such as Infrastructure as a Service (IaaS), Platform as a service (PaaS) och Software as a Service (SaaS);</li> <li>apply cloud security best practices in solutions;</li> <li>use modern systems for handling massive datasets;</li> <li>analyse properties of data-intensive applications and based on this suggest suitable strategies and architectures to meet application needs;</li> <li>implement software based on analysis as in the previous point and using technology presented in the course;</li> <li>critically analyse, discuss and present solutions and implementations in writing and orally.</li>"
Uppsala_Sweden,1TD388,"<h2>Uppsala_Sweden 1TD388</h2><h2>title</h2>Computer Graphics<h2>content</h2><h2>ilo</h2> <li>describe the data flow in a graphics rendering system;</li> <p></p><p class=""linebreak""> </p><li>use matrix algebra in computer graphics applications;</li> <p></p><p class=""linebreak""> </p><li>implement fundamental algorithms and transformations involved in viewing models, projection models, illumination models and the handling of hidden surfaces in polygon-based computer graphics;</li> <p></p><p class=""linebreak""> </p><li>describe effects such as texture mapping, bump mapping and antialiasing;</li> <p></p><p class=""linebreak""> </p><li>describe curves and surfaces that can be represented by splines;</li> <p></p><p class=""linebreak""> </p><li>use the OpenGL API with C++ in 3D graphics programming;</li> <p></p><p class=""linebreak""> </p><li>program GPU hardware, so called shader programming;</li>",Computer Graphics,,," <li>describe the data flow in a graphics rendering system;</li> <p></p><p class=""linebreak""> </p><li>use matrix algebra in computer graphics applications;</li> <p></p><p class=""linebreak""> </p><li>implement fundamental algorithms and transformations involved in viewing models, projection models, illumination models and the handling of hidden surfaces in polygon-based computer graphics;</li> <p></p><p class=""linebreak""> </p><li>describe effects such as texture mapping, bump mapping and antialiasing;</li> <p></p><p class=""linebreak""> </p><li>describe curves and surfaces that can be represented by splines;</li> <p></p><p class=""linebreak""> </p><li>use the OpenGL API with C++ in 3D graphics programming;</li> <p></p><p class=""linebreak""> </p><li>program GPU hardware, so called shader programming;</li>"
Uppsala_Sweden,1TD062,<h2>Uppsala_Sweden 1TD062</h2><h2>title</h2>High Performance Programming<h2>content</h2><h2>ilo</h2> <li>implement computational algorithms to efficient C-code for modern computer architectures;</li> <li>use tools for performance optimisation and debugging;</li> <li>propose and implement efficient performance optimisations;</li> <li>identify factors that restrict parallelism in an algorithm or a program;</li> <li>present written performance analysis in a clear and explicit way.</li>,High Performance Programming,,, <li>implement computational algorithms to efficient C-code for modern computer architectures;</li> <li>use tools for performance optimisation and debugging;</li> <li>propose and implement efficient performance optimisations;</li> <li>identify factors that restrict parallelism in an algorithm or a program;</li> <li>present written performance analysis in a clear and explicit way.</li>
Uppsala_Sweden,1DL034,<h2>Uppsala_Sweden 1DL034</h2><h2>title</h2>Introduction to Machine Learning<h2>content</h2><h2>ilo</h2> <li>explain and compare basic machine learning methods;</li> <li>use machine learning software in practical applications;</li> <li>evaluate the applicability of the studied methods.</li>,Introduction to Machine Learning,,, <li>explain and compare basic machine learning methods;</li> <li>use machine learning software in practical applications;</li> <li>evaluate the applicability of the studied methods.</li>
Uppsala_Sweden,1MD004,"<h2>Uppsala_Sweden 1MD004</h2><h2>title</h2>IT, Ethics and Organisation<h2>content</h2><h2>ilo</h2> <li>report for which ethical theories and organisation theories that are relevant to use at analysis at design and using IT-system;</li> <li>handle and solve ethical problems in connection with design and using IT-systems;</li> <li>using questionnaires, surveys, interviews and the like in connection with software development and IT-use.</li>","IT, Ethics and Organisation",,," <li>report for which ethical theories and organisation theories that are relevant to use at analysis at design and using IT-system;</li> <li>handle and solve ethical problems in connection with design and using IT-systems;</li> <li>using questionnaires, surveys, interviews and the like in connection with software development and IT-use.</li>"
Uppsala_Sweden,1DT075,"<h2>Uppsala_Sweden 1DT075</h2><h2>title</h2>Cryptology<h2>content</h2><h2>ilo</h2> <li>give examples of how theories, principles, and techniques based on cryptology can be used to achieve data security.</li> <li>explain the theories underpinning common cryptographic methods, such as different types of hash-functions, symmetric and asymmetric ciphers, digital signatures and random numbers.</li> <li>analyse, use and implement such methods and reflect on their limits and applicability.</li>",Cryptology,,," <li>give examples of how theories, principles, and techniques based on cryptology can be used to achieve data security.</li> <li>explain the theories underpinning common cryptographic methods, such as different types of hash-functions, symmetric and asymmetric ciphers, digital signatures and random numbers.</li> <li>analyse, use and implement such methods and reflect on their limits and applicability.</li>"
Uppsala_Sweden,1DL550,"<h2>Uppsala_Sweden 1DL550</h2><h2>title</h2>Low-Level Parallel Programming<h2>content</h2><h2>ilo</h2> <li>explain key issues of parallel programming, including data distribution, load balancing, locking and synchronisation</li> <li>construct parallel algorithms, i.e., identify parallelism in a given algorithm, implement this parallelism, and identify factors that limit the parallelism in a program or algorithm</li> <li>compare several parallel programming frameworks in terms of performance and efficiency of development</li> <li>use several high-performance parallel programming frameworks and choose an appropriate framework under given circumstances such as computer architecture, application and efficiency</li>",Low-Level Parallel Programming,,," <li>explain key issues of parallel programming, including data distribution, load balancing, locking and synchronisation</li> <li>construct parallel algorithms, i.e., identify parallelism in a given algorithm, implement this parallelism, and identify factors that limit the parallelism in a program or algorithm</li> <li>compare several parallel programming frameworks in terms of performance and efficiency of development</li> <li>use several high-performance parallel programming frameworks and choose an appropriate framework under given circumstances such as computer architecture, application and efficiency</li>"
Uppsala_Sweden,1DL251,"<h2>Uppsala_Sweden 1DL251</h2><h2>title</h2>Software Engineering and Project Management<h2>content</h2><h2>ilo</h2> <li>describe the principal tasks of software project managers, and basic concepts in software projects</li> <li>plan software projects, including risk and quality management</li> <li>explain basic concepts and principles of components of software engineering, e.g., of requirements engineering, system design, software implementation, testing and maintenance, and how these components contribute to the software process</li> <li>evaluate and relate different software processes, system models and architetural designs and assess their suitability in a given context</li> <li>explain, using theory of group dynamics, how the project manager can act to influence success of the project</li> <li>present and discuss course contents, orally and in writing.</li>",Software Engineering and Project Management,,," <li>describe the principal tasks of software project managers, and basic concepts in software projects</li> <li>plan software projects, including risk and quality management</li> <li>explain basic concepts and principles of components of software engineering, e.g., of requirements engineering, system design, software implementation, testing and maintenance, and how these components contribute to the software process</li> <li>evaluate and relate different software processes, system models and architetural designs and assess their suitability in a given context</li> <li>explain, using theory of group dynamics, how the project manager can act to influence success of the project</li> <li>present and discuss course contents, orally and in writing.</li>"
Uppsala_Sweden,1MD300,<h2>Uppsala_Sweden 1MD300</h2><h2>title</h2>Social Robotics and Human-Robot Interaction<h2>content</h2><h2>ilo</h2> <li>understand principles and theories of human-robot interaction</li> <li>carry out user requirement analysis and design of human-robot interaction in concrete scenarios</li> <li>design and develop social skills for human-robot interaction using a physical robotic platform</li> <li>use quantitative and qualitative approaches for evaluation and analysis of human-robot interaction data</li> <li>evaluate the impact that social robots may have on ethical values like privacy and autonomy that are important for users and society at large</li>,Social Robotics and Human-Robot Interaction,,, <li>understand principles and theories of human-robot interaction</li> <li>carry out user requirement analysis and design of human-robot interaction in concrete scenarios</li> <li>design and develop social skills for human-robot interaction using a physical robotic platform</li> <li>use quantitative and qualitative approaches for evaluation and analysis of human-robot interaction data</li> <li>evaluate the impact that social robots may have on ethical values like privacy and autonomy that are important for users and society at large</li>
CAU_Germany,Inf-NumProg,"<h2>CAU_Germany Inf-NumProg</h2><h2>title</h2>Numerical Programming
<h2>summary</h2>Using simple examples of algorithms, the essential problems, basic knowledge, concepts and techniques of numerical programming are taught and practiced in programming tasks.<h2>content</h2>Examples of simple numerical simulations
Floating point arithmetic and numeric calculations
Algorithm stability
Condition of numerical problems
Performance and optimization (e.g. cache, pipelining, latency, throughput)
Object Orientation and Numerical Algorithms
Interactive visualization
Typical algorithms of numerical problems
Basic principles of iterative numerical algorithms
Basic principles of programming efficient and parallelizable algorithms
<h2>ilo</h2>Skills in the implementation of simple numerical algorithms (especially with regard to efficiency), skills in the visualization of numerical results, knowledge of the special requirements of numerical programming and the related application of computer science methods.","Numerical Programming
","Using simple examples of algorithms, the essential problems, basic knowledge, concepts and techniques of numerical programming are taught and practiced in programming tasks.","Examples of simple numerical simulations
Floating point arithmetic and numeric calculations
Algorithm stability
Condition of numerical problems
Performance and optimization (e.g. cache, pipelining, latency, throughput)
Object Orientation and Numerical Algorithms
Interactive visualization
Typical algorithms of numerical problems
Basic principles of iterative numerical algorithms
Basic principles of programming efficient and parallelizable algorithms
","Skills in the implementation of simple numerical algorithms (especially with regard to efficiency), skills in the visualization of numerical results, knowledge of the special requirements of numerical programming and the related application of computer science methods."
CAU_Germany,Inf-NNDL,"<h2>CAU_Germany Inf-NNDL</h2><h2>title</h2>Neural networks and deep learning<h2>summary</h2>Neural Networks and Deep Learning recently have gained strong interest (Deep Learning has been considered one of 10 breakthrough technologies by the MIT Technology Review 2013). The aim of the course is to provide a fundamental understanding of important concepts, algorithms, techniques and architectures of neural networks and deep learning.<h2>content</h2>Biological basis (neuron and networks)
Artificial neuron models
Artificial neural networks: Architectures and the learning problem
Feedforward neural networks, multi-layer perceptron
Learning in neural networks and the backpropagation algorithm
Deep Learning: Motivation and concepts
Convolutional neural networks
(If time permits:) Recurrent neural networks: Long Short Term Memory (LSTM)
(If time permits:) Unsupervised learning: Autoencoders
(If time permits:) Generative models: Variational Autoencoder, Generative Adversarial Networks<h2>ilo</h2>After completing the course, students should

have a basic overview over neural network and deep learning concepts, algorithms and architectures, suitable applications, capabilities and limitations,
be able to apply suitable neural network and deep learning techniques to new problems,
analyze the outcome of neural network and deep learning experiments and explore potential methods to improve performance.",Neural networks and deep learning,"Neural Networks and Deep Learning recently have gained strong interest (Deep Learning has been considered one of 10 breakthrough technologies by the MIT Technology Review 2013). The aim of the course is to provide a fundamental understanding of important concepts, algorithms, techniques and architectures of neural networks and deep learning.","Biological basis (neuron and networks)
Artificial neuron models
Artificial neural networks: Architectures and the learning problem
Feedforward neural networks, multi-layer perceptron
Learning in neural networks and the backpropagation algorithm
Deep Learning: Motivation and concepts
Convolutional neural networks
(If time permits:) Recurrent neural networks: Long Short Term Memory (LSTM)
(If time permits:) Unsupervised learning: Autoencoders
(If time permits:) Generative models: Variational Autoencoder, Generative Adversarial Networks","After completing the course, students should

have a basic overview over neural network and deep learning concepts, algorithms and architectures, suitable applications, capabilities and limitations,
be able to apply suitable neural network and deep learning techniques to new problems,
analyze the outcome of neural network and deep learning experiments and explore potential methods to improve performance."
CAU_Germany,inf-EnlOpt,"<h2>CAU_Germany inf-EnlOpt</h2><h2>title</h2>Introduction to Nonlinear Optimization<h2>summary</h2>Theory and algorithms for solving general, non-linear optimization problems with and without constraints from various fields of application.<h2>content</h2>Classification of optimization problems
Optimality criteria for unconstrained problems
Algorithms for unconstrained problems, gradient-based and derivative-free methods
Algorithmic Differentiation
Optimality criteria for problems with constraints
Algorithms for constraint problems<h2>ilo</h2>Modeling and formalization of optimization tasks given in text form
Classify optimization problems
Apply optimality criteria
Implement and apply algorithms to solve optimization tasks
Evaluate and evaluate the results of optimization algorithms",Introduction to Nonlinear Optimization,"Theory and algorithms for solving general, non-linear optimization problems with and without constraints from various fields of application.","Classification of optimization problems
Optimality criteria for unconstrained problems
Algorithms for unconstrained problems, gradient-based and derivative-free methods
Algorithmic Differentiation
Optimality criteria for problems with constraints
Algorithms for constraint problems","Modeling and formalization of optimization tasks given in text form
Classify optimization problems
Apply optimality criteria
Implement and apply algorithms to solve optimization tasks
Evaluate and evaluate the results of optimization algorithms"
CAU_Germany,inf-EAeS,"<h2>CAU_Germany inf-EAeS</h2><h2>title</h2>Methods for Efficient Similarity Search in Large Data Sets<h2>summary</h2>The lecture presents new techniques for similarity search, especially feature-based similarity search in databases with complexly structured objects. The treated substance is used in many (non-computer science) sciences in which data-driven exploration is becoming an increasingly important topic, such as archaeology, medicine, and other natural sciences and humanities. This data includes, in particular, multimedia objects and general Multi-attribute objects objects with spatial expansion (e.g. CAD data, geo-objects, bio-molecules, etc.) Time series and sequence data (e.g. audio sequences, video sequences, etc.)<h2>content</h2>Introduction to feature-based similarity search
Feature rooms and distance measurements
Algorithmic paradigms for request processing
Index structures for feature rooms and metric spaces
Area inquiries
Next-neighbours inquiries
Reverse Next Neighbors Request
Skyline requests and Pareto optimality
Evaluation of methods for finding similarity
Feature extraction of spatially extended objects
Feature extraction of time series
Neighborhood search in network graphs<h2>ilo</h2>The students know algorithmic techniques for the efficiency and effectiveness of the presented techniques for neighborhood search and neighborhood inquiry in non-standard databases (data sets) and can apply them practically. In addition, they have understood index-based search and multi-stage request processing as well as feature extraction methods for spatial and temporal data.",Methods for Efficient Similarity Search in Large Data Sets,"The lecture presents new techniques for similarity search, especially feature-based similarity search in databases with complexly structured objects. The treated substance is used in many (non-computer science) sciences in which data-driven exploration is becoming an increasingly important topic, such as archaeology, medicine, and other natural sciences and humanities. This data includes, in particular, multimedia objects and general Multi-attribute objects objects with spatial expansion (e.g. CAD data, geo-objects, bio-molecules, etc.) Time series and sequence data (e.g. audio sequences, video sequences, etc.)","Introduction to feature-based similarity search
Feature rooms and distance measurements
Algorithmic paradigms for request processing
Index structures for feature rooms and metric spaces
Area inquiries
Next-neighbours inquiries
Reverse Next Neighbors Request
Skyline requests and Pareto optimality
Evaluation of methods for finding similarity
Feature extraction of spatially extended objects
Feature extraction of time series
Neighborhood search in network graphs","The students know algorithmic techniques for the efficiency and effectiveness of the presented techniques for neighborhood search and neighborhood inquiry in non-standard databases (data sets) and can apply them practically. In addition, they have understood index-based search and multi-stage request processing as well as feature extraction methods for spatial and temporal data."
CAU_Germany,Inf-GraphDraw ,"<h2>CAU_Germany Inf-GraphDraw </h2><h2>title</h2>Automatic Graph Drawing<h2>summary</h2>Graphs are found in numerous areas of computer science and beyond. For example, software engineers make regular use of class diagrams, automata or flow charts. Hardware design makes use of net lists and circuit diagrams. The drawing of a graph is its visual representation. The manual creation of a well-readable drawing, such as the design of a UML diagram with a software engineering tool, can be a very time consuming activity.

This class covers approaches for the efficient, automatic creation of well-readable diagrams. This is an application-driven form of algorithm engineering, where cognitive psychology plays an important role. Graph drawing methods are used increasingly for example in ""auto-layout"" features of development tools.

The tool stretches from theoretical foundations to practical implementations. We here make use of the Eclipse-based open source tool KIELER (Kiel Integrated Environment for Layout) and the Eclipse Layout Kernel (ELK). Both of these projects are developed at the RTSYS research group, ELK is now an official Eclipse project.<h2>content</h2>Foundations of graph theory
Aesthetics criteria
Tooling, usage of ELK and KIELER
Drawing trees
Force-based drawing
Hierarchical graph drawing
Planarization-based graph drawing
Labeling approaches<h2>ilo</h2>Properly classify different types of graphs and use correct terminology for graph aspects and properties
Explain basic graph analyses and their computational complexity
Select and apply suitably algorithmic approaches for the automatic drawing of different types of diagrams
Extend existing approaches for specific types of diagrams
Evaluate graphs concerning common aesthetics criteria
After successful completion of this module students will be able to judge for a given type of graph whether it can be drawn automatically and which algorithmic approaches are suitable. They will also be able to adapt existing drawing algorithms or to develop new approaches. Finally, students should also be able to perform a thesis project (Bachelor or Master) on the subject of graph drawing and to contribute to ELK and KIELER.",Automatic Graph Drawing,"Graphs are found in numerous areas of computer science and beyond. For example, software engineers make regular use of class diagrams, automata or flow charts. Hardware design makes use of net lists and circuit diagrams. The drawing of a graph is its visual representation. The manual creation of a well-readable drawing, such as the design of a UML diagram with a software engineering tool, can be a very time consuming activity.

This class covers approaches for the efficient, automatic creation of well-readable diagrams. This is an application-driven form of algorithm engineering, where cognitive psychology plays an important role. Graph drawing methods are used increasingly for example in ""auto-layout"" features of development tools.

The tool stretches from theoretical foundations to practical implementations. We here make use of the Eclipse-based open source tool KIELER (Kiel Integrated Environment for Layout) and the Eclipse Layout Kernel (ELK). Both of these projects are developed at the RTSYS research group, ELK is now an official Eclipse project.","Foundations of graph theory
Aesthetics criteria
Tooling, usage of ELK and KIELER
Drawing trees
Force-based drawing
Hierarchical graph drawing
Planarization-based graph drawing
Labeling approaches","Properly classify different types of graphs and use correct terminology for graph aspects and properties
Explain basic graph analyses and their computational complexity
Select and apply suitably algorithmic approaches for the automatic drawing of different types of diagrams
Extend existing approaches for specific types of diagrams
Evaluate graphs concerning common aesthetics criteria
After successful completion of this module students will be able to judge for a given type of graph whether it can be drawn automatically and which algorithmic approaches are suitable. They will also be able to adapt existing drawing algorithms or to develop new approaches. Finally, students should also be able to perform a thesis project (Bachelor or Master) on the subject of graph drawing and to contribute to ELK and KIELER."
CAU_Germany,inf-TM,"<h2>CAU_Germany inf-TM</h2><h2>title</h2>Text Mining<h2>summary</h2>The digital age and the success of the Internet in particular has led to a huge amount of publicly available documents and textual information. The task of text mining is to process this unstructured information and extract knowledge. To this end, we will present methods, algorithms, and models that support a diverse set of text mining applications, ranging from regular expressions and lexicon-based sentiment analysis, to more complex methods using machine learning, such as probabilistic topic models.

<h2>content</h2>
Foundation of linguistics Information extraction Named entities Opinion mining & sentiment analysis Preprocessing of textual data Representation of documents Word associations Topic Modeling Foundations of machine learning Document classification Clustering Sequence labeling Visualizing textual data Ethics & bias<h2>ilo</h2>
Students are able to...

understand basic concepts of text mining and their commercial application
explain, apply, and evaluate text mining methods
implement text mining applications in Python
",Text Mining,"The digital age and the success of the Internet in particular has led to a huge amount of publicly available documents and textual information. The task of text mining is to process this unstructured information and extract knowledge. To this end, we will present methods, algorithms, and models that support a diverse set of text mining applications, ranging from regular expressions and lexicon-based sentiment analysis, to more complex methods using machine learning, such as probabilistic topic models.

","
Foundation of linguistics Information extraction Named entities Opinion mining & sentiment analysis Preprocessing of textual data Representation of documents Word associations Topic Modeling Foundations of machine learning Document classification Clustering Sequence labeling Visualizing textual data Ethics & bias","
Students are able to...

understand basic concepts of text mining and their commercial application
explain, apply, and evaluate text mining methods
implement text mining applications in Python
"
CAU_Germany,inf-AuLearn,"<h2>CAU_Germany inf-AuLearn</h2><h2>title</h2>Autonomous Learning<h2>summary</h2>Autonomous Learning research aims at understanding how autonomous systems can efficiently learn from the interaction with the environment, especially by having an integrated approach to decision making and learning, allowing systems to autonomously decide on actions, representations, hyper-parameters and model structures for the purpose of efficient learning. The term ""autonomous"" refers to the ability of the system to learn without or with only very limited external support, which includes manual intervention of humans, availability of pre-defined models or expert knowledge, and availability of large sets of sample data. Specific research topics are: Adaptation of the learning models / techniques based on observations, learning from interaction with the environment, re-using knowledge from one domain in another domain, detection of behaviour that deviates from 'usual' or expected behaviour, and learning from and with other systems of the same kind. The lecture gives an introduction to the field of autonomous learning with a particular focus on a utilisation of the different techniques within intelligent systems. Autonomous Learning is cutting edge research, which means that parts of the lecture are based on current research articles rather than on textbooks. Furthermore, a practitioner's perspective is combined with theoretical understanding of the concepts: the lecture units are combined with traditional exercises but also with practical tasks that have to be solved by making use of techniques discussed in the lecture.<h2>content</h2>
a) Introduction and organisation

b) Machine learning basics

c) Reinforcement Learning

d) Anomaly/Novelty Detection

e) Active Learning

Further (depending on time and scope), the following topics may be covered as well:

f) Transfer Learning

g) Model selection (hyper-parameter optimisation and evaluation)

h) Collaborative Learning

i) Summary and outlook (incl. meta-learning)<h2>ilo</h2>
The overall goal of the course is to derive a basic understanding of the motivation, the general concept, and particularly important methods covering the most prominent parts of the field of autonomous learning. This includes techniques for the following aspects of machine learning:

Fully autonomous learning behaviour: hyper-parameter optimisation, transfer learning, (self-)evaluation,
self-awareness or environment-awareness with a major focus on anomaly/novelty detection
By interaction with the environment via sensors and actuators: reinforcement learning
By efficiently integrating humans into the learning process: active learning
By interacting with other intelligent systems: collaborative learning
By using all the above: meta-learning
Particular goals are:

a) Knowledge / Skills:

Understanding of methods for achieving ""intelligence"" in technical systems, control of learning behaviour with minimal user interaction, continuous self-improvement of system behaviour, cooperation in learning between distributed technical systems

b) Abilities:

Selection and application of techniques of machine learning in technical systems under real-world conditions to control autonomous system behaviour

c) Competencies:

Ability to analyse autonomous learning processes and their behaviour, to determine and interpret relevant assessment parameters / Competence to plan, design and develop intelligent technical systems with the ability to learn autonomously
",Autonomous Learning,"Autonomous Learning research aims at understanding how autonomous systems can efficiently learn from the interaction with the environment, especially by having an integrated approach to decision making and learning, allowing systems to autonomously decide on actions, representations, hyper-parameters and model structures for the purpose of efficient learning. The term ""autonomous"" refers to the ability of the system to learn without or with only very limited external support, which includes manual intervention of humans, availability of pre-defined models or expert knowledge, and availability of large sets of sample data. Specific research topics are: Adaptation of the learning models / techniques based on observations, learning from interaction with the environment, re-using knowledge from one domain in another domain, detection of behaviour that deviates from 'usual' or expected behaviour, and learning from and with other systems of the same kind. The lecture gives an introduction to the field of autonomous learning with a particular focus on a utilisation of the different techniques within intelligent systems. Autonomous Learning is cutting edge research, which means that parts of the lecture are based on current research articles rather than on textbooks. Furthermore, a practitioner's perspective is combined with theoretical understanding of the concepts: the lecture units are combined with traditional exercises but also with practical tasks that have to be solved by making use of techniques discussed in the lecture.","
a) Introduction and organisation

b) Machine learning basics

c) Reinforcement Learning

d) Anomaly/Novelty Detection

e) Active Learning

Further (depending on time and scope), the following topics may be covered as well:

f) Transfer Learning

g) Model selection (hyper-parameter optimisation and evaluation)

h) Collaborative Learning

i) Summary and outlook (incl. meta-learning)","
The overall goal of the course is to derive a basic understanding of the motivation, the general concept, and particularly important methods covering the most prominent parts of the field of autonomous learning. This includes techniques for the following aspects of machine learning:

Fully autonomous learning behaviour: hyper-parameter optimisation, transfer learning, (self-)evaluation,
self-awareness or environment-awareness with a major focus on anomaly/novelty detection
By interaction with the environment via sensors and actuators: reinforcement learning
By efficiently integrating humans into the learning process: active learning
By interacting with other intelligent systems: collaborative learning
By using all the above: meta-learning
Particular goals are:

a) Knowledge / Skills:

Understanding of methods for achieving ""intelligence"" in technical systems, control of learning behaviour with minimal user interaction, continuous self-improvement of system behaviour, cooperation in learning between distributed technical systems

b) Abilities:

Selection and application of techniques of machine learning in technical systems under real-world conditions to control autonomous system behaviour

c) Competencies:

Ability to analyse autonomous learning processes and their behaviour, to determine and interpret relevant assessment parameters / Competence to plan, design and develop intelligent technical systems with the ability to learn autonomously
"
CAU_Germany,inf-CI,"<h2>CAU_Germany inf-CI</h2><h2>title</h2>Computational Intelligence<h2>summary</h2>The term ""Computational Intelligence"" (CI) describes a branch of artificial intelligence. Essentially, it summarizes three biologically motivated areas of information processing: Based on algorithms of fuzzy logic and artificial neural networks as well as on the evolutionary algorithms, the mastery of complex systems is sought and combined with other, typically biologically-inspired, processes. Originally coined in the 1990s by the Institute of Electrical and Electronics Engineers (IEEE), the term is often used synonymously with soft computing nowadays. All included sub-areas have in common that they make mechanisms of natural (i.e. in particular biological, physical or social) problem-solving strategies usable for mathematical or engineering-technical issues. This is not aimed at a direct transfer or ""technical copy"", but at an understanding and imitation of the basic mechanisms. The procedures developed in this way are in contrast to exact mathematical procedures - one rather freely follows the motto: ""Permitted is what works"".

<h2>content</h2>Introduction and organization
Complex systems: definition, environment and mastery of complexity
Emergence and self-organization
Fractal
Cellular Automata
Evolutionary algorithms
Particle swarm optimization
Ant algorithms
bee algorithms
Neural networks
Summary<h2>ilo</h2>The aim of the event is to provide a first overview of the field of computational intelligence in theory and practice. Based on this, students should be taught a basic understanding and appropriate approaches, so that the following goals in particular are achieved:

Students have a basic understanding of the complexity of technical systems and know how to master them.
You know how seemingly complex relationships with mechanisms of computational intelligence can be easily described.
Techniques from the field of Computational Intelligence / Soft Computing as well as their advantages and disadvantages in comparison are known.",Computational Intelligence,"The term ""Computational Intelligence"" (CI) describes a branch of artificial intelligence. Essentially, it summarizes three biologically motivated areas of information processing: Based on algorithms of fuzzy logic and artificial neural networks as well as on the evolutionary algorithms, the mastery of complex systems is sought and combined with other, typically biologically-inspired, processes. Originally coined in the 1990s by the Institute of Electrical and Electronics Engineers (IEEE), the term is often used synonymously with soft computing nowadays. All included sub-areas have in common that they make mechanisms of natural (i.e. in particular biological, physical or social) problem-solving strategies usable for mathematical or engineering-technical issues. This is not aimed at a direct transfer or ""technical copy"", but at an understanding and imitation of the basic mechanisms. The procedures developed in this way are in contrast to exact mathematical procedures - one rather freely follows the motto: ""Permitted is what works"".

","Introduction and organization
Complex systems: definition, environment and mastery of complexity
Emergence and self-organization
Fractal
Cellular Automata
Evolutionary algorithms
Particle swarm optimization
Ant algorithms
bee algorithms
Neural networks
Summary","The aim of the event is to provide a first overview of the field of computational intelligence in theory and practice. Based on this, students should be taught a basic understanding and appropriate approaches, so that the following goals in particular are achieved:

Students have a basic understanding of the complexity of technical systems and know how to master them.
You know how seemingly complex relationships with mechanisms of computational intelligence can be easily described.
Techniques from the field of Computational Intelligence / Soft Computing as well as their advantages and disadvantages in comparison are known."
CAU_Germany,Inf-DigSig,"<h2>CAU_Germany Inf-DigSig</h2><h2>title</h2>Multimedia Signal Processing and Data Compression
<h2>summary</h2>There will be basic features of audiovisual information processing with applications in the compression and coding of audiovisual data. The basics of digital signal processing occupy a wide space (50%). Themes:

Basics of human perception (psycho-optics and psycho-acoustics)
Basics of digital signal processing
Basics of data compression
Compression of multimedia data using the example of JPEG and MPEG<h2>content</h2>

1) Basics of human perception

Psycho-optics
Psycho-acoustics
2) Basics of signal processing

Signal models and system models
Continuous and discrete signals
Continuous and discreet Fourier transformation
Filtering of audio signals
3) Basics of data compression

Entropy codes (Huffmann Code, Arithmetic Code)
Dictionaries (Lempel-Ziv)
4) Application in the field of audiovisual information processing

JPEG
MPEG Video
MPEG Audio<h2>ilo</h2>

The processing of real-world signals in the computer is a central task of digital signal processing. In this lecture, the basics of continuous and discrete signals as well as their representation and processing in the time and frequency range are discussed. These basics are explained in more detail in the context of data compression of multimedia data (JPEG, MPEG).

The lecture deals with the basics of signal processing (50%) as well as its use in the compression of audiovisual data (50%). The students learn the theoretical basics and apply them practically using the example of audio and video compression. Exercises are performed in Matlab/Oktav.","Multimedia Signal Processing and Data Compression
","There will be basic features of audiovisual information processing with applications in the compression and coding of audiovisual data. The basics of digital signal processing occupy a wide space (50%). Themes:

Basics of human perception (psycho-optics and psycho-acoustics)
Basics of digital signal processing
Basics of data compression
Compression of multimedia data using the example of JPEG and MPEG","

1) Basics of human perception

Psycho-optics
Psycho-acoustics
2) Basics of signal processing

Signal models and system models
Continuous and discrete signals
Continuous and discreet Fourier transformation
Filtering of audio signals
3) Basics of data compression

Entropy codes (Huffmann Code, Arithmetic Code)
Dictionaries (Lempel-Ziv)
4) Application in the field of audiovisual information processing

JPEG
MPEG Video
MPEG Audio","

The processing of real-world signals in the computer is a central task of digital signal processing. In this lecture, the basics of continuous and discrete signals as well as their representation and processing in the time and frequency range are discussed. These basics are explained in more detail in the context of data compression of multimedia data (JPEG, MPEG).

The lecture deals with the basics of signal processing (50%) as well as its use in the compression of audiovisual data (50%). The students learn the theoretical basics and apply them practically using the example of audio and video compression. Exercises are performed in Matlab/Oktav."
CAU_Germany,inf-IoT,"<h2>CAU_Germany inf-IoT</h2><h2>title</h2>Internet of Things and Wireless Networks <h2>summary</h2>This course will introduce and discuss the underlying concepts and mechanisms that drive wireless networks and the Internet of Things (IoT). The lectures provide you with the required knowledge, and the labs give you a hands-on experience in developing networking and applications in the Internet of Things and exploring their real-world challenges.<h2>content</h2>
We begin the course with an introduction to basic concepts of IoT Systems and Applications and the challenges they pose. We continue with the main course content and focus on:

Wireless networking
low-power wireless communication (NFC, BLE and 802.15.4)
IoT networking (RPL, TSCH, and Thread)
web-technologies for IoT such as COAP
Operating Systems for IoT
Security in IoT
Selected IoT Applications
Our lectures provide students with the required fundamentals, and exercise and projects give students a hands-on experience in developing IoT systems & applications and exploring their real-world challenges. This course offers learning experiences that involve hands-on experimentation and analysis as they reinforce student understanding of concepts and their application to real-world problems. Overall, this course provides the students the ability to understand fundamental issues in the design of methods for IoT systems and applications.<h2>ilo</h2>Knowledge and understanding: Show knowledge of basic concepts and challenges of wireless networking and the Internet of Things, low-power wireless communication, NFC, BLE and 802.15.4), IoT networking (RPL, TSCH, and Thread), Operating Systems for IoT, Security in IoT, and IoT Applications. Describe applications of the Internet of Things and the mechanisms these use to provide their services. Discuss and analyze the challenges and requirements that the different approaches have. Compare and summarize the strength and weaknesses associated with the individual mechanisms.
Skills and abilities: Develop and evaluate small-scale wireless networks and IoT systems & applications using fundamental mechanisms introduced in the lectures. Demonstration of these software developments in advanced settings including unreliable wireless links and resource constraints (e.g., battery driven).
Judgment and approach: Describe and analyze existing and new methods for IoT systems and application design. In particular, the system's ability for low-power wireless networking and operation under strong resource constraints.
Lehrinhalte:
Aim: What is the Internet of Things and its applications? How can we build reliable and resource efficient IoT systems and applications? How do its devices in the Internet of Things communicate? How do wireless networks work? These are a few questions that this course addresses. The goal of the courses is to understand the design of the Internet of Things and discuss the underlying principles and mechanisms. Our lectures provide you with the required fundamentals, and our labs give you a hands-on experience in developing IoT systems and applications and exploring their real-world challenges.
",Internet of Things and Wireless Networks ,"This course will introduce and discuss the underlying concepts and mechanisms that drive wireless networks and the Internet of Things (IoT). The lectures provide you with the required knowledge, and the labs give you a hands-on experience in developing networking and applications in the Internet of Things and exploring their real-world challenges.","
We begin the course with an introduction to basic concepts of IoT Systems and Applications and the challenges they pose. We continue with the main course content and focus on:

Wireless networking
low-power wireless communication (NFC, BLE and 802.15.4)
IoT networking (RPL, TSCH, and Thread)
web-technologies for IoT such as COAP
Operating Systems for IoT
Security in IoT
Selected IoT Applications
Our lectures provide students with the required fundamentals, and exercise and projects give students a hands-on experience in developing IoT systems & applications and exploring their real-world challenges. This course offers learning experiences that involve hands-on experimentation and analysis as they reinforce student understanding of concepts and their application to real-world problems. Overall, this course provides the students the ability to understand fundamental issues in the design of methods for IoT systems and applications.","Knowledge and understanding: Show knowledge of basic concepts and challenges of wireless networking and the Internet of Things, low-power wireless communication, NFC, BLE and 802.15.4), IoT networking (RPL, TSCH, and Thread), Operating Systems for IoT, Security in IoT, and IoT Applications. Describe applications of the Internet of Things and the mechanisms these use to provide their services. Discuss and analyze the challenges and requirements that the different approaches have. Compare and summarize the strength and weaknesses associated with the individual mechanisms.
Skills and abilities: Develop and evaluate small-scale wireless networks and IoT systems & applications using fundamental mechanisms introduced in the lectures. Demonstration of these software developments in advanced settings including unreliable wireless links and resource constraints (e.g., battery driven).
Judgment and approach: Describe and analyze existing and new methods for IoT systems and application design. In particular, the system's ability for low-power wireless networking and operation under strong resource constraints.
Lehrinhalte:
Aim: What is the Internet of Things and its applications? How can we build reliable and resource efficient IoT systems and applications? How do its devices in the Internet of Things communicate? How do wireless networks work? These are a few questions that this course addresses. The goal of the courses is to understand the design of the Internet of Things and discuss the underlying principles and mechanisms. Our lectures provide you with the required fundamentals, and our labs give you a hands-on experience in developing IoT systems and applications and exploring their real-world challenges.
"
CAU_Germany,Inf-CombWords,"<h2>CAU_Germany Inf-CombWords</h2><h2>title</h2>Combinatorics on Words<h2>summary</h2>This course is an extended introduction into the theory of combinatorics on words (aka strings or sequences). Connections to applications of string algorithms will be drawn in providing the combinatorial background to the course Algorithms on Sequences.
<h2>content</h2>
We consider advanced properties of periods in finite and infinite words, word equations, circular words, subword complexity, fixed point words and avoidability questions.<h2>ilo</h2>
A successful student of this course will have an in-depth knowledge combinatorial properties of sequential structures.",Combinatorics on Words,"This course is an extended introduction into the theory of combinatorics on words (aka strings or sequences). Connections to applications of string algorithms will be drawn in providing the combinatorial background to the course Algorithms on Sequences.
","
We consider advanced properties of periods in finite and infinite words, word equations, circular words, subword complexity, fixed point words and avoidability questions.","
A successful student of this course will have an in-depth knowledge combinatorial properties of sequential structures."
CAU_Germany,WInf-eBeM,"<h2>CAU_Germany WInf-eBeM</h2><h2>title</h2>E-Business und E-Marketing<h2>summary</h2>In this module, important application systems and their implementation are considered as examples. In addition, the integration of subcomponents is considered. Deployment concepts are developed from a business point of view.<h2>content</h2>

The subject of the event is the following areas and subsystems of electronic commerce:

Web shops and eProcurement
Customer Relationship Management Systems (CRM)
Public administration systems (e.g. B. E-Government)
mobile trade
Integration of systems, e.g. web shop with CRM and merchandise management systems
Trade between companies and marketing concepts is considered.<h2>ilo</h2>The participants have an in-depth understanding of selected sub-areas of electronic commerce and other operational application systems. The theoretical aspects known from other events are supplemented by an understanding of the practical procedure. The students have experience in the practical use of the systems and know procedures for the systematic procedure. They have developed the first business models and can understand business models that are typical of electronic commerce.
",E-Business und E-Marketing,"In this module, important application systems and their implementation are considered as examples. In addition, the integration of subcomponents is considered. Deployment concepts are developed from a business point of view.","

The subject of the event is the following areas and subsystems of electronic commerce:

Web shops and eProcurement
Customer Relationship Management Systems (CRM)
Public administration systems (e.g. B. E-Government)
mobile trade
Integration of systems, e.g. web shop with CRM and merchandise management systems
Trade between companies and marketing concepts is considered.","The participants have an in-depth understanding of selected sub-areas of electronic commerce and other operational application systems. The theoretical aspects known from other events are supplemented by an understanding of the practical procedure. The students have experience in the practical use of the systems and know procedures for the systematic procedure. They have developed the first business models and can understand business models that are typical of electronic commerce.
"
CAU_Germany,inf-EERP,"<h2>CAU_Germany inf-EERP</h2><h2>title</h2>Implementation of ERP systems
<h2>summary</h2>The core task of ERP systems is the volume and value-related planning, recording and settlement of all essential business transactions of a company. ERP systems are therefore one of the central components of the IT landscape of larger companies today. Accordingly, new introductions or changes of these systems in larger companies are often highly complex and thus complex and expensive large-scale IT projects.

The high value of such software for companies can also be seen from the fact that the group with the currently largest market capitalization within the German stock index DAX® is neither a car manufacturer nor a classic industrial group, but a provider of corresponding business software. In this module, using the example of its ERP system (a) the knowledge about the support of operational processes by standard software is further deepened, (b) shows with which project management procedures and methods corresponding large-scale IT projects are carried out in practice, and (c) shows how an entire ecosystem can be formed around such a software product.<h2>content</h2>Overview of standard operational software using the example of the product portfolio of SAP SE from a business point of view (ERP, analytics, business networks) and from a technical point of view (database, application, user interface, data integration, artificial intelligence)
Mapping of common, operational processes in ERP standard software (stainable data, quantity and value flows)
Procedures for the introduction and conversion of standard operational software using the example of large introductions of SAP® ERP software (classic, SAP® Activate/Focus Build, global rollout strategies) and organization of corresponding projects (ecosystem, project management processes)
Strategies for the further development of standard operational software in the company (governance structures and processes)
Trends (current situation in companies, technological innovations)<h2>ilo</h2>The students;

have an in-depth understanding of the range of applications of standard operational software
have an idea of the objectives, tasks and challenges of the introduction or Conversion of standard operational software
know the usual procedures for large-scale IT projects","Implementation of ERP systems
","The core task of ERP systems is the volume and value-related planning, recording and settlement of all essential business transactions of a company. ERP systems are therefore one of the central components of the IT landscape of larger companies today. Accordingly, new introductions or changes of these systems in larger companies are often highly complex and thus complex and expensive large-scale IT projects.

The high value of such software for companies can also be seen from the fact that the group with the currently largest market capitalization within the German stock index DAX® is neither a car manufacturer nor a classic industrial group, but a provider of corresponding business software. In this module, using the example of its ERP system (a) the knowledge about the support of operational processes by standard software is further deepened, (b) shows with which project management procedures and methods corresponding large-scale IT projects are carried out in practice, and (c) shows how an entire ecosystem can be formed around such a software product.","Overview of standard operational software using the example of the product portfolio of SAP SE from a business point of view (ERP, analytics, business networks) and from a technical point of view (database, application, user interface, data integration, artificial intelligence)
Mapping of common, operational processes in ERP standard software (stainable data, quantity and value flows)
Procedures for the introduction and conversion of standard operational software using the example of large introductions of SAP® ERP software (classic, SAP® Activate/Focus Build, global rollout strategies) and organization of corresponding projects (ecosystem, project management processes)
Strategies for the further development of standard operational software in the company (governance structures and processes)
Trends (current situation in companies, technological innovations)","The students;

have an in-depth understanding of the range of applications of standard operational software
have an idea of the objectives, tasks and challenges of the introduction or Conversion of standard operational software
know the usual procedures for large-scale IT projects"
Kennesaw_USA,CGDD2012L,"<h2>Kennesaw_USA CGDD2012L</h2><h2>title</h2>Fundamentals of Game Design Lab<h2>summary</h2>This course is the lab component of CGDD-2012. Students will learn to develop computer based video games using a modern game engine and a programming language. Students are required to develop a computer based prototype of an original game.<h2>ilo</h2>1. Develop a basic prototype of video games
2. Demonstrate advanced skills in programming utilizing a high level game engine",Fundamentals of Game Design Lab,This course is the lab component of CGDD-2012. Students will learn to develop computer based video games using a modern game engine and a programming language. Students are required to develop a computer based prototype of an original game.,,"1. Develop a basic prototype of video games
2. Demonstrate advanced skills in programming utilizing a high level game engine"
Kennesaw_USA,IT4123,"<h2>Kennesaw_USA IT4123</h2><h2>title</h2>Electronic Commerce<h2>summary</h2>This course will examine the aspects of electronic commerce. Topics include internet development, EDS, security, network connectivity and privacy. Basic business practices using electronic commerce will also be covered.<h2>ilo</h2>1. Analyze the needs of a business in relation to what requirements are needed to support the functions of the company for an e-commerce business plan.
2. Describe the business models of e-commerce, including the process of e-commerce payment systems, e-commerce marketing concepts and e-commerce site preparation.
3. Design and build a working e-commerce web-site prototype.
4. Describe the basic parts of security for an e-commerce site, including how encryption works.
5. Discuss and debate the pros and cons of the supply chain management model, and how new digital media support e-commerce.
6. Understand the e-commerce concepts of auctions, portals and on-line communities, and describe the ethical, social and political issues of e-commerce.",Electronic Commerce,"This course will examine the aspects of electronic commerce. Topics include internet development, EDS, security, network connectivity and privacy. Basic business practices using electronic commerce will also be covered.",,"1. Analyze the needs of a business in relation to what requirements are needed to support the functions of the company for an e-commerce business plan.
2. Describe the business models of e-commerce, including the process of e-commerce payment systems, e-commerce marketing concepts and e-commerce site preparation.
3. Design and build a working e-commerce web-site prototype.
4. Describe the basic parts of security for an e-commerce site, including how encryption works.
5. Discuss and debate the pros and cons of the supply chain management model, and how new digital media support e-commerce.
6. Understand the e-commerce concepts of auctions, portals and on-line communities, and describe the ethical, social and political issues of e-commerce."
Kennesaw_USA,IT4213,"<h2>Kennesaw_USA IT4213</h2><h2>title</h2>Mobile Web Development<h2>summary</h2>This course introduces the concepts, practices, and technologies to design, develop, and manage cross-platform web sites and applications running on modern mobile devices.<h2>ilo</h2>1. Compare and contrast user interactions with web sites and applications delivered as desktop web, mobile web, and mobile application.
2. Apply appropriate mobile user interface design principles and techniques to create responsive and touch friendly web user interfaces.
3. Use latest web technologies and programming languages to create cross platform web sites and applications.
4. Identify and use the appropriate development technologies, tools, and frameworks for mobile web development.",Mobile Web Development,"This course introduces the concepts, practices, and technologies to design, develop, and manage cross-platform web sites and applications running on modern mobile devices.",,"1. Compare and contrast user interactions with web sites and applications delivered as desktop web, mobile web, and mobile application.
2. Apply appropriate mobile user interface design principles and techniques to create responsive and touch friendly web user interfaces.
3. Use latest web technologies and programming languages to create cross platform web sites and applications.
4. Identify and use the appropriate development technologies, tools, and frameworks for mobile web development."
Kennesaw_USA,IT4203,"<h2>Kennesaw_USA IT4203</h2><h2>title</h2>Advanced Web Development<h2>summary</h2>This course covers more advanced topics on web site design and development including server pages, programming, database integration, and web server systems and security administration.<h2>ilo</h2>1. Demonstrate use of advanced JavaScript features, including anonymous functions and closures
2. Demonstrate use of advanced CSS features, including CSS 3 and responsive web pages
3. Use Ajax to update pages with server data without reloading
4. Use the features of HTML 5
5. Demonstrate effective use of the jQuery framework.",Advanced Web Development,"This course covers more advanced topics on web site design and development including server pages, programming, database integration, and web server systems and security administration.",,"1. Demonstrate use of advanced JavaScript features, including anonymous functions and closures
2. Demonstrate use of advanced CSS features, including CSS 3 and responsive web pages
3. Use Ajax to update pages with server data without reloading
4. Use the features of HTML 5
5. Demonstrate effective use of the jQuery framework."
Kennesaw_USA,CGDD4113,"<h2>Kennesaw_USA CGDD4113</h2><h2>title</h2>3D Modeling and Animation<h2>summary</h2>This course explores the theory and application of 3D geometric model generation and animation. Topics include mesh and Non-uniform Rational B-Spline (NURB) modeling, textures, subdivision and levels of model detail, rigid/constrained body dynamics, and non-rigid/fluid dynamics. Students will be required to develop and animate a complex model, and a significant project is required <h2>ilo</h2>1. Describe the mathematics of 3D modeling and animation
2. Apply 3D modeling animation in generating a complex rendered scene
3. Utilize modern applications that streamline the modeling and animation process
4. Discuss the complexity of modeling and animation and trade-offs between fidelity and performance",3D Modeling and Animation,"This course explores the theory and application of 3D geometric model generation and animation. Topics include mesh and Non-uniform Rational B-Spline (NURB) modeling, textures, subdivision and levels of model detail, rigid/constrained body dynamics, and non-rigid/fluid dynamics. Students will be required to develop and animate a complex model, and a significant project is required ",,"1. Describe the mathematics of 3D modeling and animation
2. Apply 3D modeling animation in generating a complex rendered scene
3. Utilize modern applications that streamline the modeling and animation process
4. Discuss the complexity of modeling and animation and trade-offs between fidelity and performance"
Kennesaw_USA,CGDD4603,"<h2>Kennesaw_USA CGDD4603</h2><h2>title</h2>Production Pipeline and Asset Management<h2>summary</h2>This course provides an in-depth exploration of the production of media content. This course covers elements of the production pipeline from concept to content generation to post production and quality assurance. Topics include asset creation and management, cost-quality tradeoffs, and phases of production. Current and emerging models of the production pipeline such as user-generated content and participation will also be discussed. A significant, team-based project is required. <h2>ilo</h2>1. Describe the phases of game and media production
2. Apply quality-assurance concepts in a game and media setting
3. Work within a team environment to produce game media content
4. Describe current and emerging models of game production and user-generated content",Production Pipeline and Asset Management,"This course provides an in-depth exploration of the production of media content. This course covers elements of the production pipeline from concept to content generation to post production and quality assurance. Topics include asset creation and management, cost-quality tradeoffs, and phases of production. Current and emerging models of the production pipeline such as user-generated content and participation will also be discussed. A significant, team-based project is required. ",,"1. Describe the phases of game and media production
2. Apply quality-assurance concepts in a game and media setting
3. Work within a team environment to produce game media content
4. Describe current and emerging models of game production and user-generated content"
Kennesaw_USA,CS3626,"<h2>Kennesaw_USA CS3626</h2><h2>title</h2>Cryptography<h2>summary</h2>The course covers both mathematical and practical foundations of cryptography. Topics include basic number theory for cryptography, conversion of text, and implementation using a programming language. The course includes historical cryptography, symmetric cryptography, asymmetric cryptography, hash functions, and well-known attack strategies with countermeasures. Exercises cover programming of simple cryptography in a programming language. <h2>ilo</h2>1. Explain the concepts, components, methodology, and architecture of cryptography;
2. Discuss different foundations of cryptosystems;
3. Compare and contrast symmetric, asymmetric cryptographies and their pros/cons;
4. Explain vulnerability analysis and different layers of attacks;
5. Implement text conversion for a cryptographic foundation;
6. Implement a basic cryptography",Cryptography,"The course covers both mathematical and practical foundations of cryptography. Topics include basic number theory for cryptography, conversion of text, and implementation using a programming language. The course includes historical cryptography, symmetric cryptography, asymmetric cryptography, hash functions, and well-known attack strategies with countermeasures. Exercises cover programming of simple cryptography in a programming language. ",,"1. Explain the concepts, components, methodology, and architecture of cryptography;
2. Discuss different foundations of cryptosystems;
3. Compare and contrast symmetric, asymmetric cryptographies and their pros/cons;
4. Explain vulnerability analysis and different layers of attacks;
5. Implement text conversion for a cryptographic foundation;
6. Implement a basic cryptography"
Kennesaw_USA,CS3642,"<h2>Kennesaw_USA CS3642</h2><h2>title</h2>Artificial Intelligence<h2>summary</h2>The primary objective of this course is to provide a introduction to the basic principles and applications of Artificial Intelligence. It covers the basic areas of artificial intelligence including problem solving, knowledge representation, reasoning, decision making, planning, perception and action, and learning -- and their applications. Students will design and implement key components of intelligent agents of modern complexity and evaluate their performance. Students are expected to develop familiarity with current research problems, research methods, and the research literature in AI. <h2>ilo</h2>1. Demonstrate understanding knowledge of AI knowledge representation
2. Demonstrate understanding of advanced search and reasoning algorithms
3. Design an AI system with Lisp or Prolog for problem solving",Artificial Intelligence,"The primary objective of this course is to provide a introduction to the basic principles and applications of Artificial Intelligence. It covers the basic areas of artificial intelligence including problem solving, knowledge representation, reasoning, decision making, planning, perception and action, and learning -- and their applications. Students will design and implement key components of intelligent agents of modern complexity and evaluate their performance. Students are expected to develop familiarity with current research problems, research methods, and the research literature in AI. ",,"1. Demonstrate understanding knowledge of AI knowledge representation
2. Demonstrate understanding of advanced search and reasoning algorithms
3. Design an AI system with Lisp or Prolog for problem solving"
Kennesaw_USA,CS4265,"<h2>Kennesaw_USA CS4265</h2><h2>title</h2>Big Data Analytics<h2>summary</h2>This course covers algorithms and tools that are needed to build MapReduce applications with Hadoop or Spark for processing gigabyte, terabyte, or petabyte-sized datasets on clusters of commodity hardware. A wide range of data algorithms will be discussed in this course. <h2>ilo</h2>1. Explain MapReduce framework for big data analytics
2. Use Hadoop and Spark for big data analytics
3. Design and implement a wide range of data algorithms",Big Data Analytics,"This course covers algorithms and tools that are needed to build MapReduce applications with Hadoop or Spark for processing gigabyte, terabyte, or petabyte-sized datasets on clusters of commodity hardware. A wide range of data algorithms will be discussed in this course. ",,"1. Explain MapReduce framework for big data analytics
2. Use Hadoop and Spark for big data analytics
3. Design and implement a wide range of data algorithms"
Kennesaw_USA,CS4267,"<h2>Kennesaw_USA CS4267</h2><h2>title</h2>Machine Learning<h2>summary</h2>This course provides a broad introduction to machine learning and statistical pattern recognition including supervised, unsupervised, and ensemble learning. Topics include K-NN, Naïve Bayes Classifier, parametric and non-parametric methods, support vector machines, kernel machines, neural networks, clustering, dimensionality reduction, and model evaluation. The learning theory including bias/variance tradeoffs and large margins will be introduced. This course will also discuss recent applications of machine learning such as data mining, autonomous navigation, speech recognition, and text and web data processing. <h2>ilo</h2>1. Explain how supervised learning methods work
2. Explain how unsupervised learning methods work
3. Explain how ensemble methods work
4. Apply proper machine learning techniques to solve challenging problems",Machine Learning,"This course provides a broad introduction to machine learning and statistical pattern recognition including supervised, unsupervised, and ensemble learning. Topics include K-NN, Naïve Bayes Classifier, parametric and non-parametric methods, support vector machines, kernel machines, neural networks, clustering, dimensionality reduction, and model evaluation. The learning theory including bias/variance tradeoffs and large margins will be introduced. This course will also discuss recent applications of machine learning such as data mining, autonomous navigation, speech recognition, and text and web data processing. ",,"1. Explain how supervised learning methods work
2. Explain how unsupervised learning methods work
3. Explain how ensemble methods work
4. Apply proper machine learning techniques to solve challenging problems"
Kennesaw_USA,CS4277,"<h2>Kennesaw_USA CS4277</h2><h2>title</h2>Deep Learning<h2>summary</h2>This course covers the foundations of Deep Learning; how to build neural networks and how to design successful deep learning projects. The course topics include convolutional networks, sequence modeling such as recurrent and recursive neural networks (RNNs), long short-term memory (LSTM), Adam, Dropout, BatchNorm, Xavier/He initialization, state-of-the-art technologies, and research topics leveraging Deep Learning. The course includes programming assignments in Python and in TensorFlow. <h2>ilo</h2>1. Understand the state-of-the-art technologies and their trends driving Deep Learning
2. Build, train, and apply fully connected deep neural networks
3. Understand how to implement efficient neural networks
4. Understand key parameters in Deep Learning architecture
5. Explain how Deep Learning works
6. Demonstrate the capability of communication with peers for research ideas in Deep Learning related fields",Deep Learning,"This course covers the foundations of Deep Learning; how to build neural networks and how to design successful deep learning projects. The course topics include convolutional networks, sequence modeling such as recurrent and recursive neural networks (RNNs), long short-term memory (LSTM), Adam, Dropout, BatchNorm, Xavier/He initialization, state-of-the-art technologies, and research topics leveraging Deep Learning. The course includes programming assignments in Python and in TensorFlow. ",,"1. Understand the state-of-the-art technologies and their trends driving Deep Learning
2. Build, train, and apply fully connected deep neural networks
3. Understand how to implement efficient neural networks
4. Understand key parameters in Deep Learning architecture
5. Explain how Deep Learning works
6. Demonstrate the capability of communication with peers for research ideas in Deep Learning related fields"
Kennesaw_USA,CS4322,"<h2>Kennesaw_USA CS4322</h2><h2>title</h2>Mobile Software Development<h2>summary</h2>This course primarily focuses on mobile sensor application development and security of smartphones and mobile telecommunication systems. The goals of the course is to provide students with real world relevant mobile sensor app development and improve their knowledge and skills on mobile application development and mobile security. <h2>ilo</h2>1. Use Android Development Environment
2. Design a user interface for a mobile device
3. Use Android Development Libraries to develop mobile apps
4. Test mobile apps",Mobile Software Development,This course primarily focuses on mobile sensor application development and security of smartphones and mobile telecommunication systems. The goals of the course is to provide students with real world relevant mobile sensor app development and improve their knowledge and skills on mobile application development and mobile security. ,,"1. Use Android Development Environment
2. Design a user interface for a mobile device
3. Use Android Development Libraries to develop mobile apps
4. Test mobile apps"
Kennesaw_USA,CS4412,"<h2>Kennesaw_USA CS4412</h2><h2>title</h2>Data Mining<h2>summary</h2>This course covers fundamental data mining concepts and techniques for discovering interesting patterns from data in various applications. Topics include data preprocessing, data warehousing and OLAP, mining frequent patterns, classification, clustering, and tend analysis. <h2>ilo</h2>1. Explain fundamental data mining concepts and techniques
2. Implement typical data mining algorithms
3. Apply data mining techniques to solve real life problem
4. Design and construct data warehouse",Data Mining,"This course covers fundamental data mining concepts and techniques for discovering interesting patterns from data in various applications. Topics include data preprocessing, data warehousing and OLAP, mining frequent patterns, classification, clustering, and tend analysis. ",,"1. Explain fundamental data mining concepts and techniques
2. Implement typical data mining algorithms
3. Apply data mining techniques to solve real life problem
4. Design and construct data warehouse"
Kennesaw_USA,CS4422,"<h2>Kennesaw_USA CS4422</h2><h2>title</h2>Information Retrieval<h2>summary</h2>This course covers the fundamentals of Internet search engines, including Web crawlers, inverted indices, hyperlink analysis, and relevance ranking. Also covered are advanced topics including information extraction for knowledge base construction, question answering, search marketing and ad targeting, and activity mining for relevance optimization and personalization. <h2>ilo</h2>1. Master the fundamentals of Web search engines
2. Master the Web search related enabling technologies.
3. Explore information extraction for knowledge base construction
4. Explore search marketing and ad targeting
5. Explore relevance optimization",Information Retrieval,"This course covers the fundamentals of Internet search engines, including Web crawlers, inverted indices, hyperlink analysis, and relevance ranking. Also covered are advanced topics including information extraction for knowledge base construction, question answering, search marketing and ad targeting, and activity mining for relevance optimization and personalization. ",,"1. Master the fundamentals of Web search engines
2. Master the Web search related enabling technologies.
3. Explore information extraction for knowledge base construction
4. Explore search marketing and ad targeting
5. Explore relevance optimization"
Kennesaw_USA,CS4522,"<h2>Kennesaw_USA CS4522</h2><h2>title</h2>HPC & Parallel Programming<h2>summary</h2>This course will introduce parallel programming techniques for shared memory and distributed memory systems. Topics include threading, OpenMP, and MPI. <h2>ilo</h2>1. Discuss the different processor and memory configurations used in HPC
2. Implement programs for shared memory environments using OpenMP
3. Implement programs for distributed memory environments using MPI",HPC & Parallel Programming,"This course will introduce parallel programming techniques for shared memory and distributed memory systems. Topics include threading, OpenMP, and MPI. ",,"1. Discuss the different processor and memory configurations used in HPC
2. Implement programs for shared memory environments using OpenMP
3. Implement programs for distributed memory environments using MPI"
Kennesaw_USA,CS4524,"<h2>Kennesaw_USA CS4524</h2><h2>title</h2>Cloud Computing<h2>summary</h2>This course discusses the fundamental concepts and techniques of cloud computing. Students will develop an understanding of cloud computing architecture, Infrastructure as a Service (IaaS), Platform-as-a-Service (PaaS), Software as a Service (SaaS), Virtualization, and Application Development on Cloud. <h2>ilo</h2>1. Explain fundamental concepts and architecture of Cloud Computing
2. Explain the concepts of IaaS, PaaS, SaaS
3. Explain virtualization
4. Explain distributed computing environment on cloud
5. Develop applications on cloud
6. Conduct big data analytics on cloud",Cloud Computing,"This course discusses the fundamental concepts and techniques of cloud computing. Students will develop an understanding of cloud computing architecture, Infrastructure as a Service (IaaS), Platform-as-a-Service (PaaS), Software as a Service (SaaS), Virtualization, and Application Development on Cloud. ",,"1. Explain fundamental concepts and architecture of Cloud Computing
2. Explain the concepts of IaaS, PaaS, SaaS
3. Explain virtualization
4. Explain distributed computing environment on cloud
5. Develop applications on cloud
6. Conduct big data analytics on cloud"
Kennesaw_USA,CS4612,"<h2>Kennesaw_USA CS4612</h2><h2>title</h2>Software Security<h2>summary</h2>The course introduces the fundamental concepts and principles of software security. Topics covered include buffer overflows, defense mechanisms, return oriented programming, reverse engineering, vulnerabilities analysis. Additional topics: mobile security, hardware platform security, embedded system security. <h2>ilo</h2>1. Describe common vulnerabilities in software security and understand how to avoid such problems in software.
2. Explain how various attack work in software systems.
3. Evaluate and assess security threats, risks, and attack vectors for software systems.
4. Design and implement security mechanisms to protect software systems.
5. Understand security mechanisms in Android and iOS platforms.
6. Discover vulnerabilities of software using various techniques.",Software Security,"The course introduces the fundamental concepts and principles of software security. Topics covered include buffer overflows, defense mechanisms, return oriented programming, reverse engineering, vulnerabilities analysis. Additional topics: mobile security, hardware platform security, embedded system security. ",,"1. Describe common vulnerabilities in software security and understand how to avoid such problems in software.
2. Explain how various attack work in software systems.
3. Evaluate and assess security threats, risks, and attack vectors for software systems.
4. Design and implement security mechanisms to protect software systems.
5. Understand security mechanisms in Android and iOS platforms.
6. Discover vulnerabilities of software using various techniques."
Kennesaw_USA,CS4622,"<h2>Kennesaw_USA CS4622</h2><h2>title</h2>Computer Networks<h2>summary</h2>This course covers computer networking and includes software application-related, protocol-related and security-related issues involved in the Internet. Topics include basic network structures, mechanisms for application-to-application communications, protocol layering, Internet addressing, unicast and multicast routing, connection establishment and termination, data flow and congestion control, and error handling. A specific protocol suite will be examined in detail. More advanced topics that build on the student's understanding of network protocols are also introduced, such as network security, mobile networks and the future Internet. <h2>ilo</h2>1. Demonstrate an understanding of a protocol suite and the core functionality defined in the application, transport, network, and link layers,
2. Demonstrate an understanding of how network-based software applications interface with  and across  the network.
3. Demonstrate an understanding of network addressing and related protocols and issues
4. Demonstrate an understanding of network routing and theory, and related protocols
5. Demonstrate an understanding of network security and related protocols and mechanism, focusing at the application, transport and network layers
6. Acquire knowledge and expertise when introduced to emerging technologies relating to the mobile and wireless networks, and the Internet.",Computer Networks,"This course covers computer networking and includes software application-related, protocol-related and security-related issues involved in the Internet. Topics include basic network structures, mechanisms for application-to-application communications, protocol layering, Internet addressing, unicast and multicast routing, connection establishment and termination, data flow and congestion control, and error handling. A specific protocol suite will be examined in detail. More advanced topics that build on the student's understanding of network protocols are also introduced, such as network security, mobile networks and the future Internet. ",,"1. Demonstrate an understanding of a protocol suite and the core functionality defined in the application, transport, network, and link layers,
2. Demonstrate an understanding of how network-based software applications interface with  and across  the network.
3. Demonstrate an understanding of network addressing and related protocols and issues
4. Demonstrate an understanding of network routing and theory, and related protocols
5. Demonstrate an understanding of network security and related protocols and mechanism, focusing at the application, transport and network layers
6. Acquire knowledge and expertise when introduced to emerging technologies relating to the mobile and wireless networks, and the Internet."
Kennesaw_USA,CS4626,"<h2>Kennesaw_USA CS4626</h2><h2>title</h2>Computer and Network Security<h2>summary</h2>This course is a comprehensive study of the security principles and practices for computer systems and networks. Topics to be covered include basic security concepts, common network attack techniques and impacts, common security policies, Internet protocol vulnerabilities, basic cryptographic tools and secure protocols. Defense techniques such as authentication, access control, encryption, and network intrusion detection will be discussed. This course will also survey new and emerging network security topics, applications and technologies. Exercises for this course will include network programming in some language and using various tools in understanding and analyzing packet traces and network traffic. <h2>ilo</h2>1. Explain the concepts, components, methodology, and architecture of network security;
2. Identify, classify and discuss some common network attacks and threats;
3. Explain various network access control and authentication techniques, design principles, and protocols;
4. Explain various encryption techniques and their vulnerabilities;
5. Discuss some new and emerging network security topics, applications, and technologies.",Computer and Network Security,"This course is a comprehensive study of the security principles and practices for computer systems and networks. Topics to be covered include basic security concepts, common network attack techniques and impacts, common security policies, Internet protocol vulnerabilities, basic cryptographic tools and secure protocols. Defense techniques such as authentication, access control, encryption, and network intrusion detection will be discussed. This course will also survey new and emerging network security topics, applications and technologies. Exercises for this course will include network programming in some language and using various tools in understanding and analyzing packet traces and network traffic. ",,"1. Explain the concepts, components, methodology, and architecture of network security;
2. Identify, classify and discuss some common network attacks and threats;
3. Explain various network access control and authentication techniques, design principles, and protocols;
4. Explain various encryption techniques and their vulnerabilities;
5. Discuss some new and emerging network security topics, applications, and technologies."
Kennesaw_USA,CS4712,"<h2>Kennesaw_USA CS4712</h2><h2>title</h2>User Interface Engineering<h2>summary</h2>A comprehensive study of techniques in design and implementation of user interfaces engineering. Topics include the foundation of human-computer interaction and interface related to software lifecycle, building a graphic user interface engineering, interaction devices and technologies, human-computer dialogue, cognitive models, usability, the design and development process, user interface management systems (UIMS), interface style and techniques, user learning, and diversity in interaction styles. Major research and the building of a working graphic user interface are included. <h2>ilo</h2>1. Describe basic user interface engineering definitions, concepts, and principles.
2. Apply user interface concepts and principles to analyze and evaluate a variety of approaches to user interface design.
3. Acquire an understanding of needs analysis of user interactions/interfaces, legal, ethical, and social issues.
4. Design, develop, implement, and present a new user interface for an application applying concepts and principles of user interface.",User Interface Engineering,"A comprehensive study of techniques in design and implementation of user interfaces engineering. Topics include the foundation of human-computer interaction and interface related to software lifecycle, building a graphic user interface engineering, interaction devices and technologies, human-computer dialogue, cognitive models, usability, the design and development process, user interface management systems (UIMS), interface style and techniques, user learning, and diversity in interaction styles. Major research and the building of a working graphic user interface are included. ",,"1. Describe basic user interface engineering definitions, concepts, and principles.
2. Apply user interface concepts and principles to analyze and evaluate a variety of approaches to user interface design.
3. Acquire an understanding of needs analysis of user interactions/interfaces, legal, ethical, and social issues.
4. Design, develop, implement, and present a new user interface for an application applying concepts and principles of user interface."
Kennesaw_USA,CS4720,"<h2>Kennesaw_USA CS4720</h2><h2>title</h2>Internet Programming<h2>summary</h2>This course introduces current technologies for modeling, designing, implementing, and developing Web applications. Topics include developing for the server and the client, programming frameworks, server administration and integration with databases. Practice will involve platforms and language such as Linux, Python, PHP, Ruby and JavaScript. <h2>ilo</h2>1. Master the architecture and basic operations of IDE
2. Understand the fundamental concepts of web applications
3. Model a project based on the MVC model using an MVC diagram
4. Design a project with page-flow and dataflow, strategies for separating three layers, and methods for increasing software reusability and maintainability
5. Control database CRUD
6. Present term project and write documents",Internet Programming,"This course introduces current technologies for modeling, designing, implementing, and developing Web applications. Topics include developing for the server and the client, programming frameworks, server administration and integration with databases. Practice will involve platforms and language such as Linux, Python, PHP, Ruby and JavaScript. ",,"1. Master the architecture and basic operations of IDE
2. Understand the fundamental concepts of web applications
3. Model a project based on the MVC model using an MVC diagram
4. Design a project with page-flow and dataflow, strategies for separating three layers, and methods for increasing software reusability and maintainability
5. Control database CRUD
6. Present term project and write documents"
Kennesaw_USA,CS4732,"<h2>Kennesaw_USA CS4732</h2><h2>title</h2>Machine Vision<h2>summary</h2>This course introduces concepts and techniques in machine vision. Students successfully completing this course will be able to apply a variety of image processing techniques for the design and analysis of efficient algorithms for real-world applications, such as optical character recognition, face detection and recognition, motion estimation, human tracking, and gesture recognition. Topics include basic image enhancement, corner and edge detection, image morphology, linear and non-linear filters, image transformations, camera models, two-dimensional and three-dimensional image geometry, clustering and segmentation (and classification), object recognition and Bag-of-Words models, image texture, shape analysis, and tracking. <h2>ilo</h2>1. Demonstrate a basic understanding of the design concepts in machine vision and image processing,
2. Demonstrate understanding of a variety of efficient algorithms for machine vision such as basic image processing, face detection and recognition, motion estimation, human tracking, and gesture recognition,
3. Be able to apply machine vision techniques to solve real-world problems using OpenCV or Matlab or other languages,
4. Be able to utilize a state-of-the-art commercial machine vision package, and compare the computational complexity of different algorithms and analyze the time and space efficiency of the algorithms",Machine Vision,"This course introduces concepts and techniques in machine vision. Students successfully completing this course will be able to apply a variety of image processing techniques for the design and analysis of efficient algorithms for real-world applications, such as optical character recognition, face detection and recognition, motion estimation, human tracking, and gesture recognition. Topics include basic image enhancement, corner and edge detection, image morphology, linear and non-linear filters, image transformations, camera models, two-dimensional and three-dimensional image geometry, clustering and segmentation (and classification), object recognition and Bag-of-Words models, image texture, shape analysis, and tracking. ",,"1. Demonstrate a basic understanding of the design concepts in machine vision and image processing,
2. Demonstrate understanding of a variety of efficient algorithms for machine vision such as basic image processing, face detection and recognition, motion estimation, human tracking, and gesture recognition,
3. Be able to apply machine vision techniques to solve real-world problems using OpenCV or Matlab or other languages,
4. Be able to utilize a state-of-the-art commercial machine vision package, and compare the computational complexity of different algorithms and analyze the time and space efficiency of the algorithms"
Kennesaw_USA,CS4742,"<h2>Kennesaw_USA CS4742</h2><h2>title</h2>Natural Language Processing<h2>summary</h2>This course provides an introduction to the field of natural language processing (NLP). The topics include creating systems that can understand and produce language for applications such as information extraction, machine translation, automatic summarization, question-answering, and interactive dialogue systems. This course covers linguistic (knowledge-based) and statistical approaches to language processing in the areas of syntax (language structures), semantics (language meaning), and pragmatics/discourse (the interpretation of language in context). Students will design and develop programs for analyzing and extracting information from large online corpora. <h2>ilo</h2>1. Demonstrate understanding knowledge of NLP.
2. Demonstrate understanding of syntax (language structures).
3. Demonstrate understanding of semantics (language meaning), and
4. Demonstrate understanding of pragmatics/discourse (the interpretation of language in context).
5. Demonstrate the knowledge of NLP applications and implement NLP-related techniques with Python/Java/C++.",Natural Language Processing,"This course provides an introduction to the field of natural language processing (NLP). The topics include creating systems that can understand and produce language for applications such as information extraction, machine translation, automatic summarization, question-answering, and interactive dialogue systems. This course covers linguistic (knowledge-based) and statistical approaches to language processing in the areas of syntax (language structures), semantics (language meaning), and pragmatics/discourse (the interpretation of language in context). Students will design and develop programs for analyzing and extracting information from large online corpora. ",,"1. Demonstrate understanding knowledge of NLP.
2. Demonstrate understanding of syntax (language structures).
3. Demonstrate understanding of semantics (language meaning), and
4. Demonstrate understanding of pragmatics/discourse (the interpretation of language in context).
5. Demonstrate the knowledge of NLP applications and implement NLP-related techniques with Python/Java/C++."
Kennesaw_USA,CSE1300,"<h2>Kennesaw_USA CSE1300</h2><h2>title</h2>Introduction to Computing Principles<h2>summary</h2>This course is an introductory computing principles course. Instruction centers on an overview of the history, scope, and impact of computing as well as critical, algorithmic and computational thinking on problem decomposition and fundamental programming concepts. <h2>ilo</h2>1. Synthesize how software has influenced innovations in other fields and helped people organizations and society to solve problems
2. Use computational thinking to ask questions and find different ways to solve problems
3. Design a solution to a program as an algorithm and convert the algorithm into a procedural program
4. Objective 4 -Describe the differences between computing disciplines and identify possible job opportunities in the computing field",Introduction to Computing Principles,"This course is an introductory computing principles course. Instruction centers on an overview of the history, scope, and impact of computing as well as critical, algorithmic and computational thinking on problem decomposition and fundamental programming concepts. ",,"1. Synthesize how software has influenced innovations in other fields and helped people organizations and society to solve problems
2. Use computational thinking to ask questions and find different ways to solve problems
3. Design a solution to a program as an algorithm and convert the algorithm into a procedural program
4. Objective 4 -Describe the differences between computing disciplines and identify possible job opportunities in the computing field"
Kennesaw_USA,CSE3203,"<h2>Kennesaw_USA CSE3203</h2><h2>title</h2>Overview of Mobile Systems<h2>summary</h2>This course explores the use and issues of mobile applications in business including information security issues, connecting to cloud computing services, and mobile interface and programming. A significant design or development project will be created in the course. <h2>ilo</h2>1. Review basic elements of a mobile ecosystem
2. Explain major technical features of mobile systems including connectivity hardware and software
3. Compare major mobile app development approaches platforms and tools
4. Discuss relevant mobile app development issues including user experience and security
5. Develop native mobile apps",Overview of Mobile Systems,"This course explores the use and issues of mobile applications in business including information security issues, connecting to cloud computing services, and mobile interface and programming. A significant design or development project will be created in the course. ",,"1. Review basic elements of a mobile ecosystem
2. Explain major technical features of mobile systems including connectivity hardware and software
3. Compare major mobile app development approaches platforms and tools
4. Discuss relevant mobile app development issues including user experience and security
5. Develop native mobile apps"
Kennesaw_USA,CSE4983,"<h2>Kennesaw_USA CSE4983</h2><h2>title</h2>CSE Computing Internship<h2>summary</h2>This course helps students gain practical experience through real-world projects and professional work. Students will demonstrate an ability to apply computing principles and technologies relevant to their major in a specific real-world project jointly supervised by an industry mentor and a faculty advisor. Students will work in a project team in an enterprise environment demonstrating ethical behavior as a computing professional, an understanding of social, professional and ethical issues related to computing, and an ability to integrate the knowledge acquired in preceding courses. Communication skills and leadership are also evaluated as well as professional computing skills and knowledge. 150+ hours per semester required at an internship site. The course can not be repeated for credit. <h2>ilo</h2>1. Demonstrate an ability to apply computing principles and technologies relevant to their major in a specific real-world project.
2. Demonstrate an ability to work effectively in teams in a working environment.
3. Demonstrate ethical behavior as a computing professional and an understanding of social, professional and ethical issues related to computing.
4. Demonstrate both written and oral communication skills appropriate to the major to convey the tasks and accomplishments related to the internship assignment.
5. Display the skills and knowledge to be employable in positions that utilize computing principles and technologies.
6. Evaluate the skills and knowledge learned in the classroom in relation to the skills and knowledge required to complete the internship.",CSE Computing Internship,"This course helps students gain practical experience through real-world projects and professional work. Students will demonstrate an ability to apply computing principles and technologies relevant to their major in a specific real-world project jointly supervised by an industry mentor and a faculty advisor. Students will work in a project team in an enterprise environment demonstrating ethical behavior as a computing professional, an understanding of social, professional and ethical issues related to computing, and an ability to integrate the knowledge acquired in preceding courses. Communication skills and leadership are also evaluated as well as professional computing skills and knowledge. 150+ hours per semester required at an internship site. The course can not be repeated for credit. ",,"1. Demonstrate an ability to apply computing principles and technologies relevant to their major in a specific real-world project.
2. Demonstrate an ability to work effectively in teams in a working environment.
3. Demonstrate ethical behavior as a computing professional and an understanding of social, professional and ethical issues related to computing.
4. Demonstrate both written and oral communication skills appropriate to the major to convey the tasks and accomplishments related to the internship assignment.
5. Display the skills and knowledge to be employable in positions that utilize computing principles and technologies.
6. Evaluate the skills and knowledge learned in the classroom in relation to the skills and knowledge required to complete the internship."
Kennesaw_USA,CYBR3153,"<h2>Kennesaw_USA CYBR3153</h2><h2>title</h2>Database Systems<h2>summary</h2>The topics in this course span from a review of the traditional file processing systems to database management systems. Topics include files systems and file processing logic, planning, and major phases of database development: analysis, design and implementation. Labs use an SQL based database product such as Oracle. <h2>ilo</h2>1. Describe basic database terminology
2. Analyze an Enterprise using E R diagrams and develop the conceptual model through normalization
3. Describe basic parts of the relational database model the object-oriented model and file organizations
4. Create modify and query databases using the SQL language
5. Describe the client-server model for databases and how relational databases can be used on the internet
6. Create an application using a database",Database Systems,"The topics in this course span from a review of the traditional file processing systems to database management systems. Topics include files systems and file processing logic, planning, and major phases of database development: analysis, design and implementation. Labs use an SQL based database product such as Oracle. ",,"1. Describe basic database terminology
2. Analyze an Enterprise using E R diagrams and develop the conceptual model through normalization
3. Describe basic parts of the relational database model the object-oriented model and file organizations
4. Create modify and query databases using the SQL language
5. Describe the client-server model for databases and how relational databases can be used on the internet
6. Create an application using a database"
Kennesaw_USA,CYBR3220,"<h2>Kennesaw_USA CYBR3220</h2><h2>title</h2>Global IS Project Management<h2>summary</h2>In this course, students will be exposed to the basic principles of Global Project Management, effective teamwork and collaboration. It will prepare students to understand key issues in global project management such as project initiation, planning, scheduling, budgeting, risk analysis, quality management and communicating and collaborating across political and cultural boundaries. Tools such as Microsoft Project will be used to develop and track Information Systems projects. <h2>ilo</h2>1. Describe project design and management
2. Explain planning, design, and team concepts
3. Explain project control mechanisms, estimating techniques and risk assessment
4. Discuss budget planning, integration, reporting, and tracking in PM.
5. Demonstrate Microsoft Project, illustrate projects in writing and presentation
6. Integrate business law and ethics in Information Systems projects.
7. Use computer applications to solve common problems at school, work or home.  
8. Explain how diverse culture facilitates innovation and project success.",Global IS Project Management,"In this course, students will be exposed to the basic principles of Global Project Management, effective teamwork and collaboration. It will prepare students to understand key issues in global project management such as project initiation, planning, scheduling, budgeting, risk analysis, quality management and communicating and collaborating across political and cultural boundaries. Tools such as Microsoft Project will be used to develop and track Information Systems projects. ",,"1. Describe project design and management
2. Explain planning, design, and team concepts
3. Explain project control mechanisms, estimating techniques and risk assessment
4. Discuss budget planning, integration, reporting, and tracking in PM.
5. Demonstrate Microsoft Project, illustrate projects in writing and presentation
6. Integrate business law and ethics in Information Systems projects.
7. Use computer applications to solve common problems at school, work or home.  
8. Explain how diverse culture facilitates innovation and project success."
Kennesaw_USA,CYBR3223,"<h2>Kennesaw_USA CYBR3223</h2><h2>title</h2>Software Acquisition and Project Management<h2>summary</h2>The course provides a high level introduction to two areas that are crucial to the IT profession, namely project management and software acquisition. It introduces students to the phases both in the project management and software acquisition and implementation process. Since requirements are crucial to both activities, the course will provide students with an in-depth introduction to requirements engineering. The course will also introduce students to a widely used project management information system. <h2>ilo</h2>1. Discuss the elements of the basic Software Development Life Cycle and implement an analysis and design of a project using current project management tools
2. Compare and contrast the advantages and disadvantages of building vs buying a software system
3. Identify the elements and challenges of requirements engineering and project management
4. Identify the project phases and challenges of acquiring, integrating and implementing a software package
5. Evaluate a Request for Proposal for a software package",Software Acquisition and Project Management,"The course provides a high level introduction to two areas that are crucial to the IT profession, namely project management and software acquisition. It introduces students to the phases both in the project management and software acquisition and implementation process. Since requirements are crucial to both activities, the course will provide students with an in-depth introduction to requirements engineering. The course will also introduce students to a widely used project management information system. ",,"1. Discuss the elements of the basic Software Development Life Cycle and implement an analysis and design of a project using current project management tools
2. Compare and contrast the advantages and disadvantages of building vs buying a software system
3. Identify the elements and challenges of requirements engineering and project management
4. Identify the project phases and challenges of acquiring, integrating and implementing a software package
5. Evaluate a Request for Proposal for a software package"
Kennesaw_USA,CYBR3305,"<h2>Kennesaw_USA CYBR3305</h2><h2>title</h2>Technology and Criminal Justice<h2>summary</h2>This course involves an in-depth study of technology as it relates to crime and the criminal justice system. Topics discussed include technology associated with criminal investigations, law enforcement practices, offender monitoring and supervision, and homeland security. Legal issues and laws pertaining to the use of technology for investigative purposes, privacy issues, and fourth amendment issues are examined. Various technologies used by police, courts, and corrections are also addressed. <h2>ilo</h2>1. Identify specific technologies used by police, courts, corrections, and the privatecriminal justice sector in their daily operations.
2. Describe how technology is used in the criminal justice system to prevent andcontrol crime.
3. Examine empirical research which examines the effectiveness of technology inpreventing and controlling crime.
4. Appraise the value of technologies used to prevent and control crime.
5. Restate the effectiveness of technology in preventing and controlling crime.",Technology and Criminal Justice,"This course involves an in-depth study of technology as it relates to crime and the criminal justice system. Topics discussed include technology associated with criminal investigations, law enforcement practices, offender monitoring and supervision, and homeland security. Legal issues and laws pertaining to the use of technology for investigative purposes, privacy issues, and fourth amendment issues are examined. Various technologies used by police, courts, and corrections are also addressed. ",,"1. Identify specific technologies used by police, courts, corrections, and the privatecriminal justice sector in their daily operations.
2. Describe how technology is used in the criminal justice system to prevent andcontrol crime.
3. Examine empirical research which examines the effectiveness of technology inpreventing and controlling crime.
4. Appraise the value of technologies used to prevent and control crime.
5. Restate the effectiveness of technology in preventing and controlling crime."
Kennesaw_USA,CYBR3396,,Cooperative Study,"This is a supervised credit-earning work experience for a minimum of two academic semesters with a previously approved business firm, private agency, or government agency. For sophomore, junior, or senior students who wish to obtain on-the-job experience in conjunction with their academic education. ",,
Kennesaw_USA,CYBR3398,,Internship,"A supervised credit-earning work experience for one academic semester with a previously approved business firm, private agency, or government agency. The work experience may not be with a current employer. The course will be graded on an S/U basis. The number of credit hours applicable to degree requirements is limited. ",,
Kennesaw_USA,CYBR4305,,Technology and Cyber Crime,"This course provides an overview of cyber crime and computer-related crime issues facing the American criminal justice system, particularly law enforcement. Topic areas include prevalence and types of cyber crime, cyber crime victim and offender characteristics, and methods and types of technologies used to engage in cyber crime. Emphasis is placed on the criminal justice system's investigation and response to cyber crime. Future trends of cyber crime and computer-related crime are also discussed. ",,
Kennesaw_USA,CYBR4333,"<h2>Kennesaw_USA CYBR4333</h2><h2>title</h2>Network Configuration & Administration<h2>summary</h2>This course continues the study of networks. Topics include design and implementation of networks including synchronization, scheduling, exception and deadlock resolution, client server and web based collaborative systems. Network security will also be covered. Cost estimates and speed are examined from a management perspective. <h2>ilo</h2>1. Demonstrate how to manage network systems
2. Apply the various management strategies to managing networks
3. Describe concepts of network configuration management
4. Demonstrate knowledge of SNMP, SMI, MIB, RMONI, RMON
5. Demonstrate skills in configuring specialized network security software",Network Configuration & Administration,"This course continues the study of networks. Topics include design and implementation of networks including synchronization, scheduling, exception and deadlock resolution, client server and web based collaborative systems. Network security will also be covered. Cost estimates and speed are examined from a management perspective. ",,"1. Demonstrate how to manage network systems
2. Apply the various management strategies to managing networks
3. Describe concepts of network configuration management
4. Demonstrate knowledge of SNMP, SMI, MIB, RMONI, RMON
5. Demonstrate skills in configuring specialized network security software"
Kennesaw_USA,CYBR4350,"<h2>Kennesaw_USA CYBR4350</h2><h2>title</h2>Management of Digital Forensics and eDiscovery<h2>summary</h2>This course explores the key issues in digital forensics: the detection, isolation and response to security breaches and attacks. It provides specific procedures required to respond to a computer crime incident and also provides coverage of the entire digital forensic sequence and the eDiscovery process within organizations. <h2>ilo</h2>1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings.",Management of Digital Forensics and eDiscovery,"This course explores the key issues in digital forensics: the detection, isolation and response to security breaches and attacks. It provides specific procedures required to respond to a computer crime incident and also provides coverage of the entire digital forensic sequence and the eDiscovery process within organizations. ",,"1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings."
Kennesaw_USA,CYBR4700,,Cybersecurity Competitions,This course explores emerging issues in cybersecurity. The content of each offering will vary based on current issues and concerns in the cybersecurity industry. ,,
Kennesaw_USA,CYBR4833,"<h2>Kennesaw_USA CYBR4833</h2><h2>title</h2>Wireless Security<h2>summary</h2>This course explores the theory and practice of securing wireless networks from threats and attacks. Topics include Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, and Security in Wireless Ad Hoc Networks. <h2>ilo</h2>1. Describe the fundamental concepts of information security
2. Discuss the difference between wireless network security and wired network security
3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems
4. Outline the security issues and solutions in mobile security",Wireless Security,"This course explores the theory and practice of securing wireless networks from threats and attacks. Topics include Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, and Security in Wireless Ad Hoc Networks. ",,"1. Describe the fundamental concepts of information security
2. Discuss the difference between wireless network security and wired network security
3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems
4. Outline the security issues and solutions in mobile security"
Kennesaw_USA,CYBR4843,"<h2>Kennesaw_USA CYBR4843</h2><h2>title</h2>Ethical Hacking for Effective Defense<h2>summary</h2>This course explores the identification and validation of network and system vulnerabilities by taking an adversarial approach to network, system, and data access. Topics include network attacks and defenses, Operating System and application vulnerabilities, social engineering attacks, and malware. Ethical, legal implications of network attacks are also discussed. <h2>ilo</h2>1. Explain what an ethical hacker can and cannot do legally
2. Describe security threats and vulnerabilities
3. Use hacking tools to locate and fix security leaks
4. Identify operating systems vulnerabilities
5. Explain cryptosystems and describe attacks on cryptosystems
6. Analyze network security vulnerabilities and technical controls",Ethical Hacking for Effective Defense,"This course explores the identification and validation of network and system vulnerabilities by taking an adversarial approach to network, system, and data access. Topics include network attacks and defenses, Operating System and application vulnerabilities, social engineering attacks, and malware. Ethical, legal implications of network attacks are also discussed. ",,"1. Explain what an ethical hacker can and cannot do legally
2. Describe security threats and vulnerabilities
3. Use hacking tools to locate and fix security leaks
4. Identify operating systems vulnerabilities
5. Explain cryptosystems and describe attacks on cryptosystems
6. Analyze network security vulnerabilities and technical controls"
Kennesaw_USA,CYBR4853,"<h2>Kennesaw_USA CYBR4853</h2><h2>title</h2>Computer Forensics<h2>summary</h2>This course is an exploration of the tools and techniques used to conduct digital investigations. It will include digital evidence collection, recovery, and analysis. Topics are Legal issues relating to digital evidence, recovery of deleted files and discovery of hidden information, reconstruction of user activity from e-mail, temporary Internet files and cached data, assessment of the integrity of system memory and process architecture to reveal malicious code. <h2>ilo</h2>1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings",Computer Forensics,"This course is an exploration of the tools and techniques used to conduct digital investigations. It will include digital evidence collection, recovery, and analysis. Topics are Legal issues relating to digital evidence, recovery of deleted files and discovery of hidden information, reconstruction of user activity from e-mail, temporary Internet files and cached data, assessment of the integrity of system memory and process architecture to reveal malicious code. ",,"1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings"
Kennesaw_USA,CYBR4883,"<h2>Kennesaw_USA CYBR4883</h2><h2>title</h2>Infrastructure Defense<h2>summary</h2>This course provides an overview of the infrastructure assessment and penetration testing process and the processes and techniques for improving the defensibility of that infrastructure. <h2>ilo</h2>1. Apply problem solving skills, core IT concepts, best practices and standards to information technologies
2. Identify and evaluate organizational requirements and current and emerging technologies
3. Communicate effectively, both in writing and in speaking
4. Demonstrate an ability to participate effectively in the planning and execution of team projects",Infrastructure Defense,This course provides an overview of the infrastructure assessment and penetration testing process and the processes and techniques for improving the defensibility of that infrastructure. ,,"1. Apply problem solving skills, core IT concepts, best practices and standards to information technologies
2. Identify and evaluate organizational requirements and current and emerging technologies
3. Communicate effectively, both in writing and in speaking
4. Demonstrate an ability to participate effectively in the planning and execution of team projects"
Kennesaw_USA,CYBR4893,"<h2>Kennesaw_USA CYBR4893</h2><h2>title</h2>Internet of Things: Applications and Security<h2>summary</h2>This course introduces core knowledge and skills required to develop, design and secure IoT solutions. Students will analyze requirements, develop human-device interaction and learn about broader trends and characteristics in IoT. In addition, students will evaluate the security design of IoT-connected products. <h2>ilo</h2>1. Define the meaning of internet of things in various IoT application domains  smart cities, smart environment, eHealth, etc.
2. Illustrate the impact of IoT on existing business models and business use cases
3. Explain the IoT in conjunction with big data, applications, and mobility
4. Illustrate IoT security challenges and the impact of IoT on consumer privacy
5. Define the components required for the internet of things
6. Design and develop a smart device",Internet of Things: Applications and Security,"This course introduces core knowledge and skills required to develop, design and secure IoT solutions. Students will analyze requirements, develop human-device interaction and learn about broader trends and characteristics in IoT. In addition, students will evaluate the security design of IoT-connected products. ",,"1. Define the meaning of internet of things in various IoT application domains  smart cities, smart environment, eHealth, etc.
2. Illustrate the impact of IoT on existing business models and business use cases
3. Explain the IoT in conjunction with big data, applications, and mobility
4. Illustrate IoT security challenges and the impact of IoT on consumer privacy
5. Define the components required for the internet of things
6. Design and develop a smart device"
Kennesaw_USA,IT3503,"<h2>Kennesaw_USA IT3503</h2><h2>title</h2>Foundations of Health Information Technology<h2>summary</h2>This course introduces students to the field of health information technology (HIT). Students will become familiar with the content, use, and structure of the health care data and medical records, health information management, the fundamentals of healthcare workflow and process analysis and redesign as a necessary component of complete practice automation, and health information systems. Students will also become familiar with the health care delivery systems in the U.S. and IT organizations and resources. <h2>ilo</h2>1. Describe the healthcare delivery systems and different healthcare settings in the U.S. and the reimbursement methodologies utilized in healthcare organizations
2. Describe the factors that had led to a need for health information technology and Electronic Health Record systems
3. Provide examples of different types of health information technology used in the healthcare organizations
4. Explain the importance of health data management and performance improvement activities in the healthcare environment
5. Identify the effect the ethical and legal issues on health information technology
6. Explain HIPAA and HITECH regulations and analyze ways to maintain the privacy and security of protected health information
7. Recognize the future of health information technology in order to be an organizational resource in this topic area",Foundations of Health Information Technology,"This course introduces students to the field of health information technology (HIT). Students will become familiar with the content, use, and structure of the health care data and medical records, health information management, the fundamentals of healthcare workflow and process analysis and redesign as a necessary component of complete practice automation, and health information systems. Students will also become familiar with the health care delivery systems in the U.S. and IT organizations and resources. ",,"1. Describe the healthcare delivery systems and different healthcare settings in the U.S. and the reimbursement methodologies utilized in healthcare organizations
2. Describe the factors that had led to a need for health information technology and Electronic Health Record systems
3. Provide examples of different types of health information technology used in the healthcare organizations
4. Explain the importance of health data management and performance improvement activities in the healthcare environment
5. Identify the effect the ethical and legal issues on health information technology
6. Explain HIPAA and HITECH regulations and analyze ways to maintain the privacy and security of protected health information
7. Recognize the future of health information technology in order to be an organizational resource in this topic area"
Kennesaw_USA,IT3703,"<h2>Kennesaw_USA IT3703</h2><h2>title</h2>Introduction to Data Analytics and Technology<h2>summary</h2>This course provides a comprehensive overview of processing technologies, systems, and application. Latest trends in data analytics, big data, and data science will be introduced. <h2>ilo</h2>1. Describe the role of data and data technologies in todayâ€™s organizational environments.
2. Identify key functional areas and trends in data management and analytics.
3. Describe common data formats and models used in data driven solutions.
4. Compare and contrast technologies, systems, and approaches used for data and information management.
5. Analyze the general process and the methods involved in a data analytics solution.",Introduction to Data Analytics and Technology,"This course provides a comprehensive overview of processing technologies, systems, and application. Latest trends in data analytics, big data, and data science will be introduced. ",,"1. Describe the role of data and data technologies in todayâ€™s organizational environments.
2. Identify key functional areas and trends in data management and analytics.
3. Describe common data formats and models used in data driven solutions.
4. Compare and contrast technologies, systems, and approaches used for data and information management.
5. Analyze the general process and the methods involved in a data analytics solution."
Kennesaw_USA,IT4153,"<h2>Kennesaw_USA IT4153</h2><h2>title</h2>Advanced Database<h2>summary</h2>This course will study how databases are used with programming applications. Topics include advanced PL/SQL (or similar database programming language), database transaction, database security, database maintenance, and distributed and web databases. <h2>ilo</h2>1. Understand and describe current and emerging database models and technologies
2. Develop functions and procedures for data manipulation and database access auditing
3. Describe database monitoring and performance tuning
4. Describe database security and administration issues, including backup and recovery
5. Explain the concepts of data warehousing and data mining",Advanced Database,"This course will study how databases are used with programming applications. Topics include advanced PL/SQL (or similar database programming language), database transaction, database security, database maintenance, and distributed and web databases. ",,"1. Understand and describe current and emerging database models and technologies
2. Develop functions and procedures for data manipulation and database access auditing
3. Describe database monitoring and performance tuning
4. Describe database security and administration issues, including backup and recovery
5. Explain the concepts of data warehousing and data mining"
Kennesaw_USA,IT4333,"<h2>Kennesaw_USA IT4333</h2><h2>title</h2>Network Configuration & Administration<h2>summary</h2>This course continues the study of networks. Topics include design and implementation of networks including synchronization, scheduling, exception and deadlock resolution, client server and web based collaborative systems. Network security will also be covered. Cost estimates and speed are examined from a management perspective. <h2>ilo</h2>1. Demonstrate how to manage network systems
2. Apply the various management strategies to managing networks
3. Describe concepts of network configuration management
4. Demonstrate knowledge of SNMP, SMI, MIB, RMONI, RMON
5. Demonstrate skills in configuring specialized network security software",Network Configuration & Administration,"This course continues the study of networks. Topics include design and implementation of networks including synchronization, scheduling, exception and deadlock resolution, client server and web based collaborative systems. Network security will also be covered. Cost estimates and speed are examined from a management perspective. ",,"1. Demonstrate how to manage network systems
2. Apply the various management strategies to managing networks
3. Describe concepts of network configuration management
4. Demonstrate knowledge of SNMP, SMI, MIB, RMONI, RMON
5. Demonstrate skills in configuring specialized network security software"
Kennesaw_USA,IT4403,"<h2>Kennesaw_USA IT4403</h2><h2>title</h2>Advanced Web and Mobile Applications<h2>summary</h2>This course covers advanced topics on web and mobile applications with a focus on modern web application architectures and mobile friendly user interfaces. Students will complete one major development project using the latest web technologies. <h2>ilo</h2>1. Explain modern web application architectures and related concepts.
2. Compare major mobile and web development approaches, platforms, and tools.
3. Examine and use popular web APIs.
4. Apply appropriate web and mobile user interface design principles and techniques.
5. Create a cross-platform mobile web application using the latest web technologies and services.",Advanced Web and Mobile Applications,This course covers advanced topics on web and mobile applications with a focus on modern web application architectures and mobile friendly user interfaces. Students will complete one major development project using the latest web technologies. ,,"1. Explain modern web application architectures and related concepts.
2. Compare major mobile and web development approaches, platforms, and tools.
3. Examine and use popular web APIs.
4. Apply appropriate web and mobile user interface design principles and techniques.
5. Create a cross-platform mobile web application using the latest web technologies and services."
Kennesaw_USA,IT4423,"<h2>Kennesaw_USA IT4423</h2><h2>title</h2>Linux/Unix Administration<h2>summary</h2>This course introduces Linux/Unix operating systems. Topics include system administration, file systems and access permissions, regular expression, common tools and utilities, and network service configurations. Lessons will be enhanced using hands-on exercises. <h2>ilo</h2>1. Describe concepts and structure of the Linux/Unix operating system
2. Use common commands and utilities for general file system operations
3. Write shell scripts for common shell environment
4. Perform system administration tasks to manage files, software, storage, users, processes and services
5. Configure TCP/IP networking and common network/internet services and clients such as SSH, FTP, Web
6. Install critical software on Linux, such as Apache, MySQL, and Python  LAMP",Linux/Unix Administration,"This course introduces Linux/Unix operating systems. Topics include system administration, file systems and access permissions, regular expression, common tools and utilities, and network service configurations. Lessons will be enhanced using hands-on exercises. ",,"1. Describe concepts and structure of the Linux/Unix operating system
2. Use common commands and utilities for general file system operations
3. Write shell scripts for common shell environment
4. Perform system administration tasks to manage files, software, storage, users, processes and services
5. Configure TCP/IP networking and common network/internet services and clients such as SSH, FTP, Web
6. Install critical software on Linux, such as Apache, MySQL, and Python  LAMP"
Kennesaw_USA,IT4513,"<h2>Kennesaw_USA IT4513</h2><h2>title</h2>Electronic Health Record Systems & Applications<h2>summary</h2>This course provides an overview of the importance of key technical aspects of electronic health records, the overall architecture, features and functions of major EHR systems. Hands-on exercises with EHR systems allow students to learn by doing. <h2>ilo</h2>1. Explain the terminology, concept and functionality of EHR systems
2. Identify a set of widely adopted standards for EHR systems
3. Describe how EHRs change the healthcare delivery workflows and how to manage the change
4. Demonstrate a working knowledge of principles and practices of EHR systems in different healthcare settings
5. Analyze challenges and emerging trends of EHR systems
6. Recognize the future of health information technology in order to be an organizational resource in this topic area",Electronic Health Record Systems & Applications,"This course provides an overview of the importance of key technical aspects of electronic health records, the overall architecture, features and functions of major EHR systems. Hands-on exercises with EHR systems allow students to learn by doing. ",,"1. Explain the terminology, concept and functionality of EHR systems
2. Identify a set of widely adopted standards for EHR systems
3. Describe how EHRs change the healthcare delivery workflows and how to manage the change
4. Demonstrate a working knowledge of principles and practices of EHR systems in different healthcare settings
5. Analyze challenges and emerging trends of EHR systems
6. Recognize the future of health information technology in order to be an organizational resource in this topic area"
Kennesaw_USA,IT4523,"<h2>Kennesaw_USA IT4523</h2><h2>title</h2>Clinical Processes and Workflows: Analysis and Redesign<h2>summary</h2>This course introduces the fundamentals of healthcare workflow and process analysis and redesign as a necessary component of complete practice automation. Students will become familiar with the concepts of processes, process analysis and redesign in the healthcare settings. Workflow and process mapping in healthcare improvement including detailed guidance, helpful tools, and case studies are introduced. <h2>ilo</h2>1. Identify the elements involved in patient care in different health care settings that must be taken into consideration when examining and proposing changes in workflow processes
2. Use tools to create different diagrams of processes that support healthcare workflow analysis and redesign
3. Analyze the workflow processes in healthcare settings to determine their effectiveness
4. Evaluate and select ways in which quality improvement methods, tools and health information technology can be applied to improve healthcare workflow processes
5. Evaluate and select approaches that would ensure the success of workflow redesign from development and presentation of the implementation plan to facilitation of decision making meetings, implementation of the changes, evaluation of the new processes, sustainability of new workflow processes, and continuous quality improvement efforts to achieve meaningful use",Clinical Processes and Workflows: Analysis and Redesign,"This course introduces the fundamentals of healthcare workflow and process analysis and redesign as a necessary component of complete practice automation. Students will become familiar with the concepts of processes, process analysis and redesign in the healthcare settings. Workflow and process mapping in healthcare improvement including detailed guidance, helpful tools, and case studies are introduced. ",,"1. Identify the elements involved in patient care in different health care settings that must be taken into consideration when examining and proposing changes in workflow processes
2. Use tools to create different diagrams of processes that support healthcare workflow analysis and redesign
3. Analyze the workflow processes in healthcare settings to determine their effectiveness
4. Evaluate and select ways in which quality improvement methods, tools and health information technology can be applied to improve healthcare workflow processes
5. Evaluate and select approaches that would ensure the success of workflow redesign from development and presentation of the implementation plan to facilitation of decision making meetings, implementation of the changes, evaluation of the new processes, sustainability of new workflow processes, and continuous quality improvement efforts to achieve meaningful use"
Kennesaw_USA,IT4533,"<h2>Kennesaw_USA IT4533</h2><h2>title</h2>Health information Security and Privacy<h2>summary</h2>Health information security and privacy are of utmost importance in today's healthcare environment. This course introduces the concepts, practices and concerns of information privacy and security unique to the healthcare settings. The course provides the student with a thorough understanding of the HIPAA security and privacy rules, meaningful use security requirements, security risk assessment and management, and how to integrate privacy and security into medical practices. Resources of privacy and security in healthcare are provided. <h2>ilo</h2>1. Describe the concepts of information privacy and security in healthcare
2. Describe and use HIPAA privacy and security regulations and Meaningful Use  MU  security requirements
3. Discuss the components involved in an information security management program in the modern healthcare environment
4. Demonstrate familiarity with resources for information privacy and security in healthcare",Health information Security and Privacy,"Health information security and privacy are of utmost importance in today's healthcare environment. This course introduces the concepts, practices and concerns of information privacy and security unique to the healthcare settings. The course provides the student with a thorough understanding of the HIPAA security and privacy rules, meaningful use security requirements, security risk assessment and management, and how to integrate privacy and security into medical practices. Resources of privacy and security in healthcare are provided. ",,"1. Describe the concepts of information privacy and security in healthcare
2. Describe and use HIPAA privacy and security regulations and Meaningful Use  MU  security requirements
3. Discuss the components involved in an information security management program in the modern healthcare environment
4. Demonstrate familiarity with resources for information privacy and security in healthcare"
Kennesaw_USA,IT4603,"<h2>Kennesaw_USA IT4603</h2><h2>title</h2>Introduction to Blockchain Technologies<h2>summary</h2>This course covers the foundation of IT application and innovation. Topics include but not limited to blockchain and cryptocurrencies, Bitcoin, Ethereum, smart contracts, decentralized applications, machine learning and its applications in the enterprise, security and privacy concerns, operational risks as part of the IT support transformation. <h2>ilo</h2>1. Describe the core and novel sources of blockchain technologies, how does it work. 
2. Compare critical technology strategies and foundational technologies in blockchain 
3. Identify the differences between the most prominent blockchain structure.
4. Describe technologies underlying cryptocurrencies and blockchains.
5. Implement a blockchain, and how to write a “smart contract” in Python/Ethereum.",Introduction to Blockchain Technologies,"This course covers the foundation of IT application and innovation. Topics include but not limited to blockchain and cryptocurrencies, Bitcoin, Ethereum, smart contracts, decentralized applications, machine learning and its applications in the enterprise, security and privacy concerns, operational risks as part of the IT support transformation. ",,"1. Describe the core and novel sources of blockchain technologies, how does it work. 
2. Compare critical technology strategies and foundational technologies in blockchain 
3. Identify the differences between the most prominent blockchain structure.
4. Describe technologies underlying cryptocurrencies and blockchains.
5. Implement a blockchain, and how to write a “smart contract” in Python/Ethereum."
Kennesaw_USA,IT4673,,Virtual IT Systems,"This course explores the design, implementation and use of virtualization, including desktop and server aspects such as deployment, clustering, storage and security. A high level overview of the various certifications available will be discussed. A project will be completed as part of the course. ",,
Kennesaw_USA,IT4713,,Business Intelligence Systems,"This course introduces the concepts, practices, technologies and systems of business intelligence, which supports enterprise level data management, analytical processing, and reporting. ",,
Kennesaw_USA,IT4733,"<h2>Kennesaw_USA IT4733</h2><h2>title</h2>Big Data System Administration<h2>summary</h2>This course introduces contemporary distributed big data platforms and database systems. Topics include big data computing paradigms, big data platform architectures and administration, and big data database concepts and administration. <h2>ilo</h2>1. Explain the contemporary big data computing paradigm.
2. Compare NoSQL database systems with traditional database systems.
3. Perform system administration on contemporary big data platforms",Big Data System Administration,"This course introduces contemporary distributed big data platforms and database systems. Topics include big data computing paradigms, big data platform architectures and administration, and big data database concepts and administration. ",,"1. Explain the contemporary big data computing paradigm.
2. Compare NoSQL database systems with traditional database systems.
3. Perform system administration on contemporary big data platforms"
Kennesaw_USA,IT4773,"<h2>Kennesaw_USA IT4773</h2><h2>title</h2>Machine Learning for Enterprise Applications<h2>summary</h2>This course covers enterprise applications of machine learning on data analytics.  Topics span the complete life cycle of data analytics from envisioning the problem, identifying proper data, selecting suitable machine learning methods, evaluating modeling performance, and deploying the results to improve decision-making. <h2>ilo</h2>1. explain the concepts of supervised and unsupervised learning
2. explain the concepts of how machine learning fits in the organization/enterprise and leads to competitive advantages. 
3. Perform data analytics using supervised and unsupervised learning. 
4. Evaluate the performance of machine learning models on data analysis.",Machine Learning for Enterprise Applications,"This course covers enterprise applications of machine learning on data analytics.  Topics span the complete life cycle of data analytics from envisioning the problem, identifying proper data, selecting suitable machine learning methods, evaluating modeling performance, and deploying the results to improve decision-making. ",,"1. explain the concepts of supervised and unsupervised learning
2. explain the concepts of how machine learning fits in the organization/enterprise and leads to competitive advantages. 
3. Perform data analytics using supervised and unsupervised learning. 
4. Evaluate the performance of machine learning models on data analysis."
Kennesaw_USA,IT4793,"<h2>Kennesaw_USA IT4793</h2><h2>title</h2>Applied Data Driven Solutions<h2>summary</h2>This course will apply data technologies and applications in a chosen application domain and expose students to real world problems and issues. Students will analyze, design, and develop a practical and technical data driven solution in a chosen field, such as healthcare, finance, security, social media, academia, sports, and utilities. <h2>ilo</h2>1. Describe common data concepts, practices, and issues in a chosen domain.
2. Analyze practical problems and requirements in a context (a company, organization, or other entities).
3. Design and develop a technical solution driven by data technologies to address the problems identified.",Applied Data Driven Solutions,"This course will apply data technologies and applications in a chosen application domain and expose students to real world problems and issues. Students will analyze, design, and develop a practical and technical data driven solution in a chosen field, such as healthcare, finance, security, social media, academia, sports, and utilities. ",,"1. Describe common data concepts, practices, and issues in a chosen domain.
2. Analyze practical problems and requirements in a context (a company, organization, or other entities).
3. Design and develop a technical solution driven by data technologies to address the problems identified."
Kennesaw_USA,IT4833,"<h2>Kennesaw_USA IT4833</h2><h2>title</h2>Wireless Security<h2>summary</h2>This course covers methods and techniques to secure wireless networks against threats and attacks. The topics may include Security and Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, Security in Wireless Ad Hoc Network, Special Topics such as Mobile Security. <h2>ilo</h2>1. Describe the fundamental concepts of information security
2. Discuss the difference between wireless network security and wired network security
3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems
4. Outline the security issues and solutions in mobile security",Wireless Security,"This course covers methods and techniques to secure wireless networks against threats and attacks. The topics may include Security and Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, Security in Wireless Ad Hoc Network, Special Topics such as Mobile Security. ",,"1. Describe the fundamental concepts of information security
2. Discuss the difference between wireless network security and wired network security
3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems
4. Outline the security issues and solutions in mobile security"
Kennesaw_USA,IT4843,"<h2>Kennesaw_USA IT4843</h2><h2>title</h2>Ethical Hacking for Effective Defense<h2>summary</h2>This course focuses on detection of network and system vulnerabilities by taking an attacker-like approach to system, network, and data access. Topics include network attacks and defenses, Operating System and application vulnerabilities, social engineering attacks, and malware. Ethical, legal implications of network attacks are also discussed. <h2>ilo</h2>1. Explain what an ethical hacker can and cannot do legally
2. Describe security threats and vulnerabilities
3. Use hacking tools to locate and fix security leaks
4. Identify operating systems vulnerabilities
5. Explain cryptosystems and describe attacks on cryptosystems
6. Analyze network security vulnerabilities and technical controls",Ethical Hacking for Effective Defense,"This course focuses on detection of network and system vulnerabilities by taking an attacker-like approach to system, network, and data access. Topics include network attacks and defenses, Operating System and application vulnerabilities, social engineering attacks, and malware. Ethical, legal implications of network attacks are also discussed. ",,"1. Explain what an ethical hacker can and cannot do legally
2. Describe security threats and vulnerabilities
3. Use hacking tools to locate and fix security leaks
4. Identify operating systems vulnerabilities
5. Explain cryptosystems and describe attacks on cryptosystems
6. Analyze network security vulnerabilities and technical controls"
Kennesaw_USA,IT4853,"<h2>Kennesaw_USA IT4853</h2><h2>title</h2>Computer Forensics<h2>summary</h2>This course studies techniques and tools in computing investigation, digital evidence collection, recovery, and analysis. Topics include: Legal issues relating to digital evidence, recover deleted files and discover hidden information, reconstruct user activity from e-mail, temporary Internet files and cached data, assess the integrity of system memory and process architecture to reveal malicious code. <h2>ilo</h2>1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings",Computer Forensics,"This course studies techniques and tools in computing investigation, digital evidence collection, recovery, and analysis. Topics include: Legal issues relating to digital evidence, recover deleted files and discover hidden information, reconstruct user activity from e-mail, temporary Internet files and cached data, assess the integrity of system memory and process architecture to reveal malicious code. ",,"1. Define and explain the role of digital forensics in the incident response and investigatory process
2. Identify the requirements for proper evidence collection, handling and storage
3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios
4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings"
Kennesaw_USA,IT4863,"<h2>Kennesaw_USA IT4863</h2><h2>title</h2>Web and Mobile Application Security<h2>summary</h2>This course introduces web and mobile application security issues, hands-on practices to explore security vulnerabilities, and best practices to defend against vulnerabilities in web and mobile. <h2>ilo</h2>1. Describe common web and mobile security vulnerabilities 
2. Exploit web and mobile vulnerabilities with hands-on tools
3. Defend against common web and mobile vulnerabilities",Web and Mobile Application Security,"This course introduces web and mobile application security issues, hands-on practices to explore security vulnerabilities, and best practices to defend against vulnerabilities in web and mobile. ",,"1. Describe common web and mobile security vulnerabilities 
2. Exploit web and mobile vulnerabilities with hands-on tools
3. Defend against common web and mobile vulnerabilities"
Kennesaw_USA,IT4883,"<h2>Kennesaw_USA IT4883</h2><h2>title</h2>Infrastructure Defense<h2>summary</h2>This course provides an overview of the infrastructure assessment and penetration testing process and the processes and techniques for improving the defensibility of that infrastructure. <h2>ilo</h2>1. Apply problem solving skills, core IT concepts, best practices and standards to information technologies
2. Identify and evaluate organizational requirements and current and emerging technologies
3. Communicate effectively, both in writing and in speaking
4. Demonstrate an ability to participate effectively in the planning and execution of team projects",Infrastructure Defense,This course provides an overview of the infrastructure assessment and penetration testing process and the processes and techniques for improving the defensibility of that infrastructure. ,,"1. Apply problem solving skills, core IT concepts, best practices and standards to information technologies
2. Identify and evaluate organizational requirements and current and emerging technologies
3. Communicate effectively, both in writing and in speaking
4. Demonstrate an ability to participate effectively in the planning and execution of team projects"
Kennesaw_USA,IT4893,"<h2>Kennesaw_USA IT4893</h2><h2>title</h2>Internet of Things: Applications and Security<h2>summary</h2>This course introduces core knowledge and skills required to develop and design innovative IoT solutions. Students will analyze the challenges, apply appropriate patterns for user-interaction and learn about trends and characteristics in IoT. In addition, students will evaluate the security design of a suite of IoT-connected products. <h2>ilo</h2>1. Define the meaning of internet of things in various IoT application domains  smart cities, smart environment, eHealth, etc.
2. Illustrate the impact of IoT on existing business models and business use cases
3. Explain the IoT in conjunction with big data, applications, and mobility
4. Illustrate IoT security challenges and the impact of IoT on consumer privacy
5. Define the components required for the internet of things
6. Design and develop a smart device",Internet of Things: Applications and Security,"This course introduces core knowledge and skills required to develop and design innovative IoT solutions. Students will analyze the challenges, apply appropriate patterns for user-interaction and learn about trends and characteristics in IoT. In addition, students will evaluate the security design of a suite of IoT-connected products. ",,"1. Define the meaning of internet of things in various IoT application domains  smart cities, smart environment, eHealth, etc.
2. Illustrate the impact of IoT on existing business models and business use cases
3. Explain the IoT in conjunction with big data, applications, and mobility
4. Illustrate IoT security challenges and the impact of IoT on consumer privacy
5. Define the components required for the internet of things
6. Design and develop a smart device"
Kennesaw_USA,SWE3683,"<h2>Kennesaw_USA SWE3683</h2><h2>title</h2>Embedded Systems Analysis and Design<h2>summary</h2>The analysis and design course focuses on using modern methods, techniques, and tools for specification and design of embedded systems. Topics include analytical methods such as RMA, development methods such as HOOD, and notations like UML, Petri-nets, etc. are covered. Performance evaluation based on modeling and simulation techniques is also covered. This is a project based course. <h2>ilo</h2>1. Understand the importance of embedded systems, the challenges involved, and systematic approaches to building such systems.
2. Explain and implement fundamental principles and methodologies of embedded software development effectively utilizing current OOAD methodologies.
3. Appreciate engineering issues in the development of embedded software, such as user concerns, maintainability, dependability and safety, and division of labor.
4. Analyze a software development problem, express it succinctly and precisely, design module structures to solve a problem, and evaluate alternatives.
5. Implement a module so that it executes efficiently and correctly.
6. Work in a small team on an embedded systems project of significant scale and scope.
7. Apply knowledge about software requirements, design, construction, project management, and quality to an embedded systems project.
8. Effectively use embedded operating systems, CASE tools, languages, etc.
9. Understand the scope, roles, uses, and development trends of the most widely used embedded software engineering standards.",Embedded Systems Analysis and Design,"The analysis and design course focuses on using modern methods, techniques, and tools for specification and design of embedded systems. Topics include analytical methods such as RMA, development methods such as HOOD, and notations like UML, Petri-nets, etc. are covered. Performance evaluation based on modeling and simulation techniques is also covered. This is a project based course. ",,"1. Understand the importance of embedded systems, the challenges involved, and systematic approaches to building such systems.
2. Explain and implement fundamental principles and methodologies of embedded software development effectively utilizing current OOAD methodologies.
3. Appreciate engineering issues in the development of embedded software, such as user concerns, maintainability, dependability and safety, and division of labor.
4. Analyze a software development problem, express it succinctly and precisely, design module structures to solve a problem, and evaluate alternatives.
5. Implement a module so that it executes efficiently and correctly.
6. Work in a small team on an embedded systems project of significant scale and scope.
7. Apply knowledge about software requirements, design, construction, project management, and quality to an embedded systems project.
8. Effectively use embedded operating systems, CASE tools, languages, etc.
9. Understand the scope, roles, uses, and development trends of the most widely used embedded software engineering standards."
Kennesaw_USA,SWE4633,"<h2>Kennesaw_USA SWE4633</h2><h2>title</h2>Cloud Software Development<h2>summary</h2>This course discusses the fundamental concepts and tools of cloud-based application development. Students will learn how to develop apps on top of the cloud with an understanding of various contemporary cloud providers (e.g., Amazon Web Services, Google Cloud, or Microsoft Azure). Students will do hands-on projects focused on building cloud-run applications using their platform of choice. <h2>ilo</h2>1. Describe an apply principles of cloud-based application development
2. Describe service models in cloud computing
3. Describe and apply the principles of Cloud Web Services and its related technologies
4. Design and develop applications in the cloud",Cloud Software Development,"This course discusses the fundamental concepts and tools of cloud-based application development. Students will learn how to develop apps on top of the cloud with an understanding of various contemporary cloud providers (e.g., Amazon Web Services, Google Cloud, or Microsoft Azure). Students will do hands-on projects focused on building cloud-run applications using their platform of choice. ",,"1. Describe an apply principles of cloud-based application development
2. Describe service models in cloud computing
3. Describe and apply the principles of Cloud Web Services and its related technologies
4. Design and develop applications in the cloud"
Kennesaw_USA,SWE4743,"<h2>Kennesaw_USA SWE4743</h2><h2>title</h2>Object-Oriented Development<h2>summary</h2>This course involves engineering activities related to the analysis, design, and implementation of object-oriented software systems. Topics include modeling foundations, requirements specification and documentation, design concepts and strategies, and OOAD methodologies with an emphasis on UML. The course includes a major project utilizing current analysis and design methods and tools implemented in a contemporary IDE. <h2>ilo</h2>1. Understand and be able to apply the principles of object-oriented software engineering to software analysis design and development
2. Utilize current OO design and analysis methodologies such as UML responsibility-driven design and data-driven design effectively
3. Use current software tools to effectively model specify design and develop object-oriented software systems using common OO design patterns",Object-Oriented Development,"This course involves engineering activities related to the analysis, design, and implementation of object-oriented software systems. Topics include modeling foundations, requirements specification and documentation, design concepts and strategies, and OOAD methodologies with an emphasis on UML. The course includes a major project utilizing current analysis and design methods and tools implemented in a contemporary IDE. ",,"1. Understand and be able to apply the principles of object-oriented software engineering to software analysis design and development
2. Utilize current OO design and analysis methodologies such as UML responsibility-driven design and data-driven design effectively
3. Use current software tools to effectively model specify design and develop object-oriented software systems using common OO design patterns"
Kennesaw_USA,SWE4783,"<h2>Kennesaw_USA SWE4783</h2><h2>title</h2>User Interaction Engineering<h2>summary</h2>This course covers the basic theories and principles applied to the design of human-computer interfaces. It introduces students to the basic concepts used in designing interactions. It will cover the basic theory and methods that exist in the field. Case studies are used throughout the readings to exemplify the methods presented and to lend a context to the issues discussed. This course will focus on the semiotic engineering approach to human-computer interaction, in which the interaction is analyzed in terms of communication between the designers of the artifact and the user. <h2>ilo</h2>1. Know and use User Interaction Engineering principles and guidelines
2. Gather the user and task characteristics to form an interaction dialogue which is evaluated by the user to be satisfactory
3. Design and build an interface system that meets the goals of the user interaction dialogue
4. Perform a user interaction evaluation",User Interaction Engineering,"This course covers the basic theories and principles applied to the design of human-computer interfaces. It introduces students to the basic concepts used in designing interactions. It will cover the basic theory and methods that exist in the field. Case studies are used throughout the readings to exemplify the methods presented and to lend a context to the issues discussed. This course will focus on the semiotic engineering approach to human-computer interaction, in which the interaction is analyzed in terms of communication between the designers of the artifact and the user. ",,"1. Know and use User Interaction Engineering principles and guidelines
2. Gather the user and task characteristics to form an interaction dialogue which is evaluated by the user to be satisfactory
3. Design and build an interface system that meets the goals of the user interaction dialogue
4. Perform a user interaction evaluation"
Kennesaw_USA,SWE4803,"<h2>Kennesaw_USA SWE4803</h2><h2>title</h2>Independent Study<h2>summary</h2>Independent study/project under the direction of a member of the graduate faculty. Course description will vary. <h2>ilo</h2>1. Design and implement a complete serious educational game
2. Evaluate or conduct research on a serious educational game
3. Build a working knowledge of principles and practices in computer game design and implementation
4. Develop skills in problem solving system integration and interface design
5. Communicate  written and verbally  about a complex technical topic simply and coherently",Independent Study,Independent study/project under the direction of a member of the graduate faculty. Course description will vary. ,,"1. Design and implement a complete serious educational game
2. Evaluate or conduct research on a serious educational game
3. Build a working knowledge of principles and practices in computer game design and implementation
4. Develop skills in problem solving system integration and interface design
5. Communicate  written and verbally  about a complex technical topic simply and coherently"
UofT_Canada,CSC301H5,<h2>UofT_Canada CSC301H5</h2><h2>title</h2>Introduction to Software Engineering<h2>content</h2>An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security.,Introduction to Software Engineering,,An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security.,
UofT_Canada,CSC309H5,"<h2>UofT_Canada CSC309H5</h2><h2>title</h2>Programming on the Web<h2>content</h2>An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs.",Programming on the Web,,"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs.",
UofT_Canada,CSC311H5,"<h2>UofT_Canada CSC311H5</h2><h2>title</h2>Introduction to Machine Learning<h2>content</h2>An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Basics of reinforcement learning.",Introduction to Machine Learning,,"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Basics of reinforcement learning.",
UofT_Canada,CSC324H5,"<h2>UofT_Canada CSC324H5</h2><h2>title</h2>Principles of Programming Languages<h2>content</h2>Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. Two non-procedural programming paradigms: functional programming (illustrated by languages such as Lisp, Scheme, ML or Haskell) and logic programming (illustrated by languages such as Prolog, XSB or Coral).",Principles of Programming Languages,,"Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. Two non-procedural programming paradigms: functional programming (illustrated by languages such as Lisp, Scheme, ML or Haskell) and logic programming (illustrated by languages such as Prolog, XSB or Coral).",
UofT_Canada,CSC338H5,"<h2>UofT_Canada CSC338H5</h2><h2>title</h2>Numerical Methods<h2>content</h2>Computational methods for solving numerical problems in science, engineering and business. Linear and non-linear equations, approximation, optimization, interpolation, integration and differentiation. The aim is to give students a basic understanding of floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.Course concepts are crucial to a wide range of practical applications such as computational finance and portfolio management, graphics and special effects, data mining and machine learning, as well as robotics, bioinformatics, medical imaging and others.",Numerical Methods,,"Computational methods for solving numerical problems in science, engineering and business. Linear and non-linear equations, approximation, optimization, interpolation, integration and differentiation. The aim is to give students a basic understanding of floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.Course concepts are crucial to a wide range of practical applications such as computational finance and portfolio management, graphics and special effects, data mining and machine learning, as well as robotics, bioinformatics, medical imaging and others.",
UofT_Canada,CSC347H5,"<h2>UofT_Canada CSC347H5</h2><h2>title</h2>Introduction to Information Security<h2>content</h2>An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security.",Introduction to Information Security,,"An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security.",
UofT_Canada,CSC367H5,"<h2>UofT_Canada CSC367H5</h2><h2>title</h2>Parallel Programming<h2>content</h2>Introduction to aspects of parallel programming. Topics include computer instruction execution, instruction-level parallelism, memory system performance, task and data parallelism, parallel models (shared memory, message passing), synchronization, scalability and Amdahl's law, Flynn taxonomy, vector processing and parallel computing architectures.",Parallel Programming,,"Introduction to aspects of parallel programming. Topics include computer instruction execution, instruction-level parallelism, memory system performance, task and data parallelism, parallel models (shared memory, message passing), synchronization, scalability and Amdahl's law, Flynn taxonomy, vector processing and parallel computing architectures.",
UofT_Canada,CSC375H5,"<h2>UofT_Canada CSC375H5</h2><h2>title</h2>Algorithmic Intelligence in Robotics<h2>content</h2>Robots of the future will need to operate autonomously in unstructured and unseen environments. It is imperative that these systems are built on intelligent and adaptive algorithms. This course will introduce fundamental algorithmic approaches for building an intelligent robot system that can autonomously operate in unstructured environments such as homes and warehouses. This course introduces the broad philosophy of “Sense-Plan-Act”, and covers algorithms in each of these areas -- how should the robot perceive the world, how to make long term decisions and how to perform closed-loop control of articulated robots.",Algorithmic Intelligence in Robotics,,"Robots of the future will need to operate autonomously in unstructured and unseen environments. It is imperative that these systems are built on intelligent and adaptive algorithms. This course will introduce fundamental algorithmic approaches for building an intelligent robot system that can autonomously operate in unstructured environments such as homes and warehouses. This course introduces the broad philosophy of “Sense-Plan-Act”, and covers algorithms in each of these areas -- how should the robot perceive the world, how to make long term decisions and how to perform closed-loop control of articulated robots.",
UofT_Canada,CSC376H5,"<h2>UofT_Canada CSC376H5</h2><h2>title</h2>Fundamentals of Robotics<h2>content</h2>An introduction to robotics covering basic methodologies, tools, and concepts to build a foundation for advanced topics in robotics. The course covers robot manipulators; kinematics; motion planning; and control. Topics covered in lecture will be implemented and explored in a practical environment using robots from different application domains.",Fundamentals of Robotics,,"An introduction to robotics covering basic methodologies, tools, and concepts to build a foundation for advanced topics in robotics. The course covers robot manipulators; kinematics; motion planning; and control. Topics covered in lecture will be implemented and explored in a practical environment using robots from different application domains.",
UofT_Canada,CSC384H5,"<h2>UofT_Canada CSC384H5</h2><h2>title</h2>Introduction to Artificial Intelligence<h2>content</h2>Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search, logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.",Introduction to Artificial Intelligence,,"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search, logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.",
UofT_Canada,CSC413H5,<h2>UofT_Canada CSC413H5</h2><h2>title</h2>Neural Networks and Deep Learning<h2>content</h2>An introduction to neural networks and deep learning. Backpropagation and automatic differentiation. Architectures: convolutional networks and recurrent neural networks. Methods for improving optimization and generalization. Neural networks for unsupervised and reinforcement learning.,Neural Networks and Deep Learning,,An introduction to neural networks and deep learning. Backpropagation and automatic differentiation. Architectures: convolutional networks and recurrent neural networks. Methods for improving optimization and generalization. Neural networks for unsupervised and reinforcement learning.,
UofT_Canada,CSC488H5,"<h2>UofT_Canada CSC488H5</h2><h2>title</h2>Compilers and Interpreters<h2>content</h2>Compiler organization, compiler writing tools, use of regular expressions, finite automata and content-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation.",Compilers and Interpreters,,"Compiler organization, compiler writing tools, use of regular expressions, finite automata and content-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation.",
UOC_Spain,5.574,"<h2>UOC_Spain 05.574</h2><h2>title</h2>Computer networks security<h2>summary</h2>This course presents the problem of security in computer networks, and more specifically in TCP/IP networks.

The structure of this course follows the following model. First, the problem of security in TCP/IP networks is presented. Once we have seen the possible security problems in this type of network, we will focus on the prevention mechanisms that exist, based mainly on information filtering. Subsequently, and assuming that not all TCP/IP network prevention and protection systems are infallible, we will study the different intrusion detection mechanisms that exist. Finally we will highlight the specific protection techniques that exist. Specifically, we will introduce the basic notions of cryptography that will allow us to understand the operation of different mechanisms and applications that allow us to protect ourselves against attacks.

The focus of this course assumes that the student already has basic knowledge about the operation of TCP/IP networks and the Unix work environment. Its orientation is eminently practical and implies that the student must dedicate an effort to the installation and configuration of the software, as part of the evaluable objectives of the subject.<h2>content</h2>Introduction to computer security

Safety and risks
computer attacks
Defense and computer security
firewall systems

Types of firewall systems
Implementation of security policies through perimeter security
iptables
Intrusion detection systems

Cyber ​​defense and intrusion detection tools
Management of events, alerts and incidents
snort
Security in the communications layers

Link Layer Protection: Wireless Networks
Network Layer Protection: IPsec
Transport Layer Protection: TLS
Application Layer Security

SSH
VPN
secure email
Apart from these contents, basic contents on encryption and authentication are also offered to allow students without knowledge of cryptographic subjects to follow the subject.

Finally, in the activities of this subject, different tools are used to reinforce the theoretical knowledge acquired in a practical way. Some of these tools are:

nmap
wireshark
iptables
openssl
SSH
snort
nessus",Computer networks security,"This course presents the problem of security in computer networks, and more specifically in TCP/IP networks.

The structure of this course follows the following model. First, the problem of security in TCP/IP networks is presented. Once we have seen the possible security problems in this type of network, we will focus on the prevention mechanisms that exist, based mainly on information filtering. Subsequently, and assuming that not all TCP/IP network prevention and protection systems are infallible, we will study the different intrusion detection mechanisms that exist. Finally we will highlight the specific protection techniques that exist. Specifically, we will introduce the basic notions of cryptography that will allow us to understand the operation of different mechanisms and applications that allow us to protect ourselves against attacks.

The focus of this course assumes that the student already has basic knowledge about the operation of TCP/IP networks and the Unix work environment. Its orientation is eminently practical and implies that the student must dedicate an effort to the installation and configuration of the software, as part of the evaluable objectives of the subject.","Introduction to computer security

Safety and risks
computer attacks
Defense and computer security
firewall systems

Types of firewall systems
Implementation of security policies through perimeter security
iptables
Intrusion detection systems

Cyber ​​defense and intrusion detection tools
Management of events, alerts and incidents
snort
Security in the communications layers

Link Layer Protection: Wireless Networks
Network Layer Protection: IPsec
Transport Layer Protection: TLS
Application Layer Security

SSH
VPN
secure email
Apart from these contents, basic contents on encryption and authentication are also offered to allow students without knowledge of cryptographic subjects to follow the subject.

Finally, in the activities of this subject, different tools are used to reinforce the theoretical knowledge acquired in a practical way. Some of these tools are:

nmap
wireshark
iptables
openssl
SSH
snort
nessus",
UOC_Spain,5.576,"<h2>UOC_Spain 05.576</h2><h2>title</h2>Computer networks design<h2>summary</h2>Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.

The ""Design of Computer Networks"" (DRC) course uses the basics of network design as a narrative thread to train students in two important aspects of network deployment in multi-branch organizations. On the one hand, the creation of redundant and scalable local area networks (LAN), and on the other hand, the basic mechanisms to achieve connectivity through different WAN technologies (Wide Area Network, Wide Area Networks).

Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the world of professional networks and serves as an entry point for a number of specializations in the field (design, security, etc.).

Specifically, within the entire agenda of this latest version of the CCNA agenda, called ""CCNA Routing & Switching"", the first module corresponds to a small part of the ""Scaling Networks"" curriculum and the rest with practically all of ""Connecting networks”. "".<h2>content</h2>Due to the characteristics of the subject, the materials that will be used throughout the DXC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"".

The course agenda within the subject is divided into four thematic blocks, each associated with an evaluable activity, which encompass the different chapters of the materials. The first two modules correspond to the ""Scaling Networks"" part and the last two to the ""Accessing the WAN"" part.

Module 1. Scalable local area networks

[Optional] LAN Design: Strategies that can be used to systematically design a high-functionality network are studied, such as the hierarchical network design model and proper device selections.
[Optional] VLAN Escalation: The implementation of inter-VLAN routing using a Layer 3 switch is discussed. Problems encountered when implementing the VTP protocol, DTP protocol, and inter-VLAN routing are also described.
STP Protocol: The protocols used to manage redundancy in LANs are covered. In addition, some of the potential problems with such redundancy and their symptoms are covered.
EtherChannel and HSRP protocol: The EtherChannel link aggregation mechanism is studied and emphasis is placed on the operation and configuration of the HSRP protocol (Hot Standby Router Protocol, hot standby router protocol).

Module 2. Planning routing protocols

Dynamic Routing – Introduces dynamic routing protocols, explores the benefits of using this class of protocols, how different routing protocols are classified, and the metrics that routing protocols use to determine the best path for network traffic.
EIGRP – Explains the EIGRP protocol and provides basic configuration commands to enable it on a Cisco IOS router. It also explores how the routing protocol works, and provides more detail on how EIGRP determines the best path.
EIGRP Protocol Tuning and Troubleshooting: Covers additional EIGRP tuning features and the configuration mode commands to implement them for IPv4 and IPv6.
Single-Area OSPF – Covers the basic implementations and configurations of the OSPF link-state protocol, in its single-area mode of operation.
Multi-Area OSPF - Instructions are provided for splitting a large single-area OSPF into multiple areas efficiently, how to configure OSPFv2 and OSPFv3, and an overview of the commands used to verify their configuration.
OSPF Protocol Tuning and Troubleshooting - Describes the tuning functions in OSPF, the configuration mode commands that are used to implement various features for IPv4 and IPv6, and the components and commands that are used to troubleshoot OSPFv2 and OSPFv3.


Module 3. WAN connectivity

WAN Concepts – Introduces WAN standards, technologies, and purposes and covers choosing the appropriate WAN technologies, services, and devices to meet the changing business requirements of a growing business.
Point-to-Point Connections – Covers the terms, technology, and protocols used in serial connections. Point-to-point protocols (PPP) and HDLC are introduced.
Branch Office Connections: Frequently used broadband solutions such as cable, DSL, and wireless are introduced, as well as PPPoE (PPP over Ethernet) implementation. He also studies how to deploy VPNs (Virtual Private Networks) and the BGP protocol.

Module 4. Advanced aspects of networks

Access Control Lists – Explains how to configure and troubleshoot extended IPv4 ACLs and IPv6 ACLs as part of a security solution.
Network Security and Monitoring: Details the most common LAN security threats and how to mitigate the risk. In addition, SNMP is described and how to use it to monitor a network, and how to implement local SPAN to capture and monitor traffic with port analyzers or IPS devices.
Quality of Service: Network transmission quality, traffic characteristics, queuing algorithms, QoS models, and QoS implementation techniques are described.
Network Evolution - Provides an introduction to emerging trends in today's networks, such as IoT, cloud, or software-defined networks.
Network Troubleshooting – Lists general network troubleshooting procedures, methods, tools, and documentation that should be retained. Typical symptoms and causes at different layers of the OSI model are also discussed.",Computer networks design,"Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.

The ""Design of Computer Networks"" (DRC) course uses the basics of network design as a narrative thread to train students in two important aspects of network deployment in multi-branch organizations. On the one hand, the creation of redundant and scalable local area networks (LAN), and on the other hand, the basic mechanisms to achieve connectivity through different WAN technologies (Wide Area Network, Wide Area Networks).

Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the world of professional networks and serves as an entry point for a number of specializations in the field (design, security, etc.).

Specifically, within the entire agenda of this latest version of the CCNA agenda, called ""CCNA Routing & Switching"", the first module corresponds to a small part of the ""Scaling Networks"" curriculum and the rest with practically all of ""Connecting networks”. "".","Due to the characteristics of the subject, the materials that will be used throughout the DXC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"".

The course agenda within the subject is divided into four thematic blocks, each associated with an evaluable activity, which encompass the different chapters of the materials. The first two modules correspond to the ""Scaling Networks"" part and the last two to the ""Accessing the WAN"" part.

Module 1. Scalable local area networks

[Optional] LAN Design: Strategies that can be used to systematically design a high-functionality network are studied, such as the hierarchical network design model and proper device selections.
[Optional] VLAN Escalation: The implementation of inter-VLAN routing using a Layer 3 switch is discussed. Problems encountered when implementing the VTP protocol, DTP protocol, and inter-VLAN routing are also described.
STP Protocol: The protocols used to manage redundancy in LANs are covered. In addition, some of the potential problems with such redundancy and their symptoms are covered.
EtherChannel and HSRP protocol: The EtherChannel link aggregation mechanism is studied and emphasis is placed on the operation and configuration of the HSRP protocol (Hot Standby Router Protocol, hot standby router protocol).

Module 2. Planning routing protocols

Dynamic Routing – Introduces dynamic routing protocols, explores the benefits of using this class of protocols, how different routing protocols are classified, and the metrics that routing protocols use to determine the best path for network traffic.
EIGRP – Explains the EIGRP protocol and provides basic configuration commands to enable it on a Cisco IOS router. It also explores how the routing protocol works, and provides more detail on how EIGRP determines the best path.
EIGRP Protocol Tuning and Troubleshooting: Covers additional EIGRP tuning features and the configuration mode commands to implement them for IPv4 and IPv6.
Single-Area OSPF – Covers the basic implementations and configurations of the OSPF link-state protocol, in its single-area mode of operation.
Multi-Area OSPF - Instructions are provided for splitting a large single-area OSPF into multiple areas efficiently, how to configure OSPFv2 and OSPFv3, and an overview of the commands used to verify their configuration.
OSPF Protocol Tuning and Troubleshooting - Describes the tuning functions in OSPF, the configuration mode commands that are used to implement various features for IPv4 and IPv6, and the components and commands that are used to troubleshoot OSPFv2 and OSPFv3.


Module 3. WAN connectivity

WAN Concepts – Introduces WAN standards, technologies, and purposes and covers choosing the appropriate WAN technologies, services, and devices to meet the changing business requirements of a growing business.
Point-to-Point Connections – Covers the terms, technology, and protocols used in serial connections. Point-to-point protocols (PPP) and HDLC are introduced.
Branch Office Connections: Frequently used broadband solutions such as cable, DSL, and wireless are introduced, as well as PPPoE (PPP over Ethernet) implementation. He also studies how to deploy VPNs (Virtual Private Networks) and the BGP protocol.

Module 4. Advanced aspects of networks

Access Control Lists – Explains how to configure and troubleshoot extended IPv4 ACLs and IPv6 ACLs as part of a security solution.
Network Security and Monitoring: Details the most common LAN security threats and how to mitigate the risk. In addition, SNMP is described and how to use it to monitor a network, and how to implement local SPAN to capture and monitor traffic with port analyzers or IPS devices.
Quality of Service: Network transmission quality, traffic characteristics, queuing algorithms, QoS models, and QoS implementation techniques are described.
Network Evolution - Provides an introduction to emerging trends in today's networks, such as IoT, cloud, or software-defined networks.
Network Troubleshooting – Lists general network troubleshooting procedures, methods, tools, and documentation that should be retained. Typical symptoms and causes at different layers of the OSI model are also discussed.",
UOC_Spain,5.577,"<h2>UOC_Spain 05.577</h2><h2>title</h2>Operating systems design<h2>summary</h2>Once we have seen the functionalities that the Operating System (OS) offers to users, we are in a position to analyze the different techniques and policies that make them possible. This knowledge has to allow us a better use of the operating system as end users, and provides the bases to be able to carry out a correct administration of the Operating System.

This subject will present what an Operating System is, from an internal point of view. The different possibilities of managing the elements of the OS, both hardware and software, will be seen.

To achieve these objectives, theoretical and practical concepts are combined. In the practical part, the source code of the Linux operating system will be studied and modified.<h2>content</h2>Module 1. Structural and functional concepts of the operating system

The didactic materials of this module present the fundamental aspects for you to achieve the following objectives:

Know the different internal structures that the core of an OS can have and the respective differential characteristics, and know how to differentiate them based on their specialization.
Knowing how to identify the hardware elements necessary to implement some specific OS services.
Know the execution modes of the processes with respect to their privileges, especially the OS kernel mode.
Learn the reasons why the operating system needs hardware support to control the system. Some reasons have to do with efficiency and others have to do with the nature of control.
Understand the importance of the computer's hardware support when performing certain OS functions and know what types of procedures require this support.
Being able to differentiate the execution of normal operations from the execution of privileged instructions, and knowing what type of management of the OS services allow these instructions.

Module 2. Process management

In the teaching materials provided in this module, you will find the necessary tools to achieve the following objectives:

Learn the concepts of process and thread of execution.
Know the different states in which a process can be found and the reasons that cause a change of state.
Understand the need to make context switches to take better advantage of the performance of the computer.
Relate the number of processes that occur in the machine with the performance that is achieved from them.
Understand the functions of the different levels of processor programming.
Understand processor scheduling algorithms and detect the advantages and disadvantages.

Module 3. Virtual memory

The didactic materials of this module contain the necessary tools to achieve the following objectives:

Extend the concept of virtual memory that you have learned in other subjects by describing the system hardware and software needs to efficiently implement paged virtual memory management.
Learn about the different page load management, allocation, and replacement policies and discuss their pros and cons.
See how memory management affects the execution of program code.
Learn the most important aspects of memory allocation in the Linux kernel.

Module 4. Input/output management

In the didactic materials of this module you will find the necessary tools to achieve the following objectives:

Know the functions and structure of device drivers, as well as some techniques to manage them.
Acquire knowledge about the different implementations of the technique of storage in the intermediate memory (buffering) to adapt the speeds of the device and the processor.
Know how to differentiate between independent and device-dependent I/O procedures.
Know an implementation scheme of I/O procedures.
Knowing how to apply techniques such as synchronous and asynchronous calls, device management, generic I/O operations, etc.
Know the objectives of the layers of the I/O routines of the operating system.
Show the complexity involved in the design of controllers (device drivers) through a concrete example.

Module 5. The file system

In this didactic module you will find the necessary materials to achieve the following objectives:

Know how the information on the disc is structured.
Know different alternatives to structure a file system.
Find out what alternatives there are to organize free disk space.
Learn about the possibilities to distribute the space allocated to files.
Learn to identify the data structures needed in memory to perform operations related to the file system.
Knowing what steps the operating system must take to carry out a certain operation and knowing its motivation.
Be aware of techniques that allow you to improve the efficiency and reliability of file systems.
Know the characteristics of the most common file systems.

Module 6. Concurrency: principles and tools

In the materials of this module, you will find the necessary tools to achieve the following objectives:

Know and analyze examples with the different high-level synchronization tools that allow concurrent programming to be carried out with guarantees.
Analyze real use cases on concurrent programming in Gnu/Linux.
Analyze the problem of deadlock and indefinite wait considering the different situations, evaluating their advantages and disadvantages. Also, consider the different tools at the administrator level to manage these situations and help you make decisions.",Operating systems design,"Once we have seen the functionalities that the Operating System (OS) offers to users, we are in a position to analyze the different techniques and policies that make them possible. This knowledge has to allow us a better use of the operating system as end users, and provides the bases to be able to carry out a correct administration of the Operating System.

This subject will present what an Operating System is, from an internal point of view. The different possibilities of managing the elements of the OS, both hardware and software, will be seen.

To achieve these objectives, theoretical and practical concepts are combined. In the practical part, the source code of the Linux operating system will be studied and modified.","Module 1. Structural and functional concepts of the operating system

The didactic materials of this module present the fundamental aspects for you to achieve the following objectives:

Know the different internal structures that the core of an OS can have and the respective differential characteristics, and know how to differentiate them based on their specialization.
Knowing how to identify the hardware elements necessary to implement some specific OS services.
Know the execution modes of the processes with respect to their privileges, especially the OS kernel mode.
Learn the reasons why the operating system needs hardware support to control the system. Some reasons have to do with efficiency and others have to do with the nature of control.
Understand the importance of the computer's hardware support when performing certain OS functions and know what types of procedures require this support.
Being able to differentiate the execution of normal operations from the execution of privileged instructions, and knowing what type of management of the OS services allow these instructions.

Module 2. Process management

In the teaching materials provided in this module, you will find the necessary tools to achieve the following objectives:

Learn the concepts of process and thread of execution.
Know the different states in which a process can be found and the reasons that cause a change of state.
Understand the need to make context switches to take better advantage of the performance of the computer.
Relate the number of processes that occur in the machine with the performance that is achieved from them.
Understand the functions of the different levels of processor programming.
Understand processor scheduling algorithms and detect the advantages and disadvantages.

Module 3. Virtual memory

The didactic materials of this module contain the necessary tools to achieve the following objectives:

Extend the concept of virtual memory that you have learned in other subjects by describing the system hardware and software needs to efficiently implement paged virtual memory management.
Learn about the different page load management, allocation, and replacement policies and discuss their pros and cons.
See how memory management affects the execution of program code.
Learn the most important aspects of memory allocation in the Linux kernel.

Module 4. Input/output management

In the didactic materials of this module you will find the necessary tools to achieve the following objectives:

Know the functions and structure of device drivers, as well as some techniques to manage them.
Acquire knowledge about the different implementations of the technique of storage in the intermediate memory (buffering) to adapt the speeds of the device and the processor.
Know how to differentiate between independent and device-dependent I/O procedures.
Know an implementation scheme of I/O procedures.
Knowing how to apply techniques such as synchronous and asynchronous calls, device management, generic I/O operations, etc.
Know the objectives of the layers of the I/O routines of the operating system.
Show the complexity involved in the design of controllers (device drivers) through a concrete example.

Module 5. The file system

In this didactic module you will find the necessary materials to achieve the following objectives:

Know how the information on the disc is structured.
Know different alternatives to structure a file system.
Find out what alternatives there are to organize free disk space.
Learn about the possibilities to distribute the space allocated to files.
Learn to identify the data structures needed in memory to perform operations related to the file system.
Knowing what steps the operating system must take to carry out a certain operation and knowing its motivation.
Be aware of techniques that allow you to improve the efficiency and reliability of file systems.
Know the characteristics of the most common file systems.

Module 6. Concurrency: principles and tools

In the materials of this module, you will find the necessary tools to achieve the following objectives:

Know and analyze examples with the different high-level synchronization tools that allow concurrent programming to be carried out with guarantees.
Analyze real use cases on concurrent programming in Gnu/Linux.
Analyze the problem of deadlock and indefinite wait considering the different situations, evaluating their advantages and disadvantages. Also, consider the different tools at the administrator level to manage these situations and help you make decisions.",
UOC_Spain,5.578,"<h2>UOC_Spain 05.578</h2><h2>title</h2>Computers architecture<h2>summary</h2>In this subject, the knowledge of computer architecture introduced in the Fundamentals and Structure of Computers of the Degree in Computer Engineering is deepened.

The course delves into advanced concepts of computer structure: computer performance and processor pipeline. In addition, an introduction is made to the differentiating elements of multiprocessors, and their different architectures.

The course has a strong practical component. The first part of the lab (Practice 1) is done using CPU architecture simulators (such as the WINDLX simulator in the Windows environment). The second part of the laboratory (Practice 2) deals with basic parallel programming issues.<h2>content</h2>The course consists of four modules that cover the proposed objectives.

MODULES

Short description

Module 1:

computer performance

The different figures of merit used to evaluate the performance of computers are presented, as well as the problems that their interpretation has. Amdahl's law and its implications are presented.


Module 2:

Introduction to segmentation

The main technique used today by all microprocessors to reduce program execution times is presented and analyzed. This technique is instruction execution pipeline and is based on taking advantage of instruction-level parallelism by executing more than one machine language instruction per clock cycle, while reducing processor cycle time.


Module 3:

pipelined processors

 

Module 4:

multiprocessors

The fourth block studies multiprocessor systems based on scalar microprocessors. Study: multiprocessor systems, memory coherence, interconnection networks for multiprocessors, synchronization models and parallel programming.


Detailed content by module and annex:


DIDACTIC MODULES

Subscript

Module 1:

computer performance

1.1 Need to evaluate Performance.

1.2 Figures of merit.

1.3 Performance Evaluation Programs.

1.4 Amdahl's Law.


Module 2:

Introduction to segmentation

2.1 Improvements in microprocessor performance.

2.2 Parallelism at the instruction level.

2.3 Joint evolution of technology and architecture.

Module 3:

pipelined processors

3.1 Segmented processors. Linear segmented processor.

3.2 Example of sequential architecture.

3.3 Linear segmented processor. Calculation instructions and memory access.

3.4 Linear Segmented Processor Data Risk.

3.5 Linear Segmented Processor. Sequence break instructions.

3.6 Reduction of lost cycles due to data risks.

3.7 Reduction of lost cycles due to control risks.

3.8 Cycles lost due to structural risks

3.9 Segmented Architecture with Multicycle Operations.

3.10 Advanced Topics.


Module 4:

multiprocessors

4.1 Multiprocessor systems

4.2 Consistency of memory

4.3 Interconnection networks for multiprocessors

4.4 Synchronization and communication

4.5 Parallel programming models

4.5.1 Shared variables model

4.5.2 Message passing model",Computers architecture,"In this subject, the knowledge of computer architecture introduced in the Fundamentals and Structure of Computers of the Degree in Computer Engineering is deepened.

The course delves into advanced concepts of computer structure: computer performance and processor pipeline. In addition, an introduction is made to the differentiating elements of multiprocessors, and their different architectures.

The course has a strong practical component. The first part of the lab (Practice 1) is done using CPU architecture simulators (such as the WINDLX simulator in the Windows environment). The second part of the laboratory (Practice 2) deals with basic parallel programming issues.","The course consists of four modules that cover the proposed objectives.

MODULES

Short description

Module 1:

computer performance

The different figures of merit used to evaluate the performance of computers are presented, as well as the problems that their interpretation has. Amdahl's law and its implications are presented.


Module 2:

Introduction to segmentation

The main technique used today by all microprocessors to reduce program execution times is presented and analyzed. This technique is instruction execution pipeline and is based on taking advantage of instruction-level parallelism by executing more than one machine language instruction per clock cycle, while reducing processor cycle time.


Module 3:

pipelined processors

 

Module 4:

multiprocessors

The fourth block studies multiprocessor systems based on scalar microprocessors. Study: multiprocessor systems, memory coherence, interconnection networks for multiprocessors, synchronization models and parallel programming.


Detailed content by module and annex:


DIDACTIC MODULES

Subscript

Module 1:

computer performance

1.1 Need to evaluate Performance.

1.2 Figures of merit.

1.3 Performance Evaluation Programs.

1.4 Amdahl's Law.


Module 2:

Introduction to segmentation

2.1 Improvements in microprocessor performance.

2.2 Parallelism at the instruction level.

2.3 Joint evolution of technology and architecture.

Module 3:

pipelined processors

3.1 Segmented processors. Linear segmented processor.

3.2 Example of sequential architecture.

3.3 Linear segmented processor. Calculation instructions and memory access.

3.4 Linear Segmented Processor Data Risk.

3.5 Linear Segmented Processor. Sequence break instructions.

3.6 Reduction of lost cycles due to data risks.

3.7 Reduction of lost cycles due to control risks.

3.8 Cycles lost due to structural risks

3.9 Segmented Architecture with Multicycle Operations.

3.10 Advanced Topics.


Module 4:

multiprocessors

4.1 Multiprocessor systems

4.2 Consistency of memory

4.3 Interconnection networks for multiprocessors

4.4 Synchronization and communication

4.5 Parallel programming models

4.5.1 Shared variables model

4.5.2 Message passing model",
UOC_Spain,5.579,"<h2>UOC_Spain 05.579</h2><h2>title</h2>Automata and grammars<h2>summary</h2>A very important part of the information available today is available in textual format: web pages, configuration files, scripts, computer programs or even natural language text. For a computer to be able to use this information, it needs to be able to interpret it according to the rules of the language in which it is written.

In this subject, basic techniques are presented to describe the structure of a language, regular expressions and context-free grammars. These notations are used, for example, to describe programming languages ​​or describe text patterns for searching.

In addition, the mechanisms used by computers to recognize if a sentence is correctly formed according to the structure of a language are presented. Specifically, finite automata and stacked automata are presented.

In summary, this subject provides the basic tools to know how to handle textual information with a computer.<h2>content</h2>The subject is structured in three modules:

1. Alphabets, words and languages

1. Basic elements: alphabets, words and languages

2. Operations with words

3. Operations on languages

4. Definition of languages

This module describes the elements that make up a language and the operations to manipulate them.

2. Finite automata and regular languages

1. Deterministic finite automata and regular languages

2. Indeterministic finite automata

3. Operations with finite automata

4. Minimization of finite automata

5. Regular Expressions

6. The motto of the bomb

The simplest class of languages, regular languages, is introduced. A formalism is provided to describe these languages ​​(regular expressions) and another to recognize the words that are part of them (stack automata).

3. Non-contextual grammars and stack automata

1. Introductory concepts

2. Derivation tree and ambiguity

3. Grammar review

4. Simplification of a grammar

5. Normal forms

6. Automata with battery

7. Properties of decontextualized languages

A class of more complex languages, called context-independent, is introduced. The structure of this language is described by grammars and its words are recognized by stack automata.",Automata and grammars,"A very important part of the information available today is available in textual format: web pages, configuration files, scripts, computer programs or even natural language text. For a computer to be able to use this information, it needs to be able to interpret it according to the rules of the language in which it is written.

In this subject, basic techniques are presented to describe the structure of a language, regular expressions and context-free grammars. These notations are used, for example, to describe programming languages ​​or describe text patterns for searching.

In addition, the mechanisms used by computers to recognize if a sentence is correctly formed according to the structure of a language are presented. Specifically, finite automata and stacked automata are presented.

In summary, this subject provides the basic tools to know how to handle textual information with a computer.","The subject is structured in three modules:

1. Alphabets, words and languages

1. Basic elements: alphabets, words and languages

2. Operations with words

3. Operations on languages

4. Definition of languages

This module describes the elements that make up a language and the operations to manipulate them.

2. Finite automata and regular languages

1. Deterministic finite automata and regular languages

2. Indeterministic finite automata

3. Operations with finite automata

4. Minimization of finite automata

5. Regular Expressions

6. The motto of the bomb

The simplest class of languages, regular languages, is introduced. A formalism is provided to describe these languages ​​(regular expressions) and another to recognize the words that are part of them (stack automata).

3. Non-contextual grammars and stack automata

1. Introductory concepts

2. Derivation tree and ambiguity

3. Grammar review

4. Simplification of a grammar

5. Normal forms

6. Automata with battery

7. Properties of decontextualized languages

A class of more complex languages, called context-independent, is introduced. The structure of this language is described by grammars and its words are recognized by stack automata.",
UOC_Spain,5.58,"<h2>UOC_Spain 05.580</h2><h2>title</h2>Compilers<h2>summary</h2>Compilers are essential tools for any computer scientist, responsible for translating textual information from one format or language to another. For example, they act as key players in the execution process of a program: they translate the program from the high-level language used by humans into a low-level language that can be executed on a computer (such as assembler or machine code).

This course introduces the basic structure of a compiler: the modules that make it up and how they communicate with each other. We will focus on the case of general purpose programming languages ​​and on the process of generating an executable from a high level program.

Specifically, we will see how a source program is analyzed to obtain its components and possible errors introduced by the programmer are detected. The concept of interpreter and its relationship with compilers will also be introduced. Subsequently, it will be studied how the object code is generated and optimized from the data obtained in the analysis part to improve performance. All of this will be implemented by using compiler build tools.<h2>content</h2>The subject is structured in six modules:

1. General Information

1. Languages

2. Basic notions

3. Structure of a compiler

4. Building compilers

You will see an overview of the general structure of a compiler.

2. Lexical analysis

1. General organization

2. Construction of lexical analyzers

3. Specification of a lexical analyzer

4. Error handling

5. The entry system

6. The symbol tables

The only part of the compiler that interacts with the source file will be studied, converting its characters into a sequence of lexical symbols (tokens) and eliminating everything that is not necessary for its analysis (comments, line breaks...).

3. Analysis

1. General notions

2. Top-down analysis

3. Bottom-up analysis

The phase in charge of verifying that the lexical symbols of the source program arrive in the correct order and that the specifications of the context-free grammar that defines the source language are met will be studied.

4. Semantic analysis

1. Semantic analysis

2. Intermediate code generation

The verification of the semantics of the source program, which depends on the context, will be studied, incorporating semantic attributes and actions in the productions of the grammar.

5. Synthesis phases

1. Code generation

2. Code optimization

The generation of code from the intermediate code will be studied, as well as everything to take into account to carry out an automatic translation and the final optimization phase.

6. Interpreted languages

1. Interpreters

2. The abstract stack machine

3. Construction of an interpreter

A concrete model of architecture for interpreters based on a memory in the form of a stack will be presented. The construction process of an interpreter based on this model will be studied.",Compilers,"Compilers are essential tools for any computer scientist, responsible for translating textual information from one format or language to another. For example, they act as key players in the execution process of a program: they translate the program from the high-level language used by humans into a low-level language that can be executed on a computer (such as assembler or machine code).

This course introduces the basic structure of a compiler: the modules that make it up and how they communicate with each other. We will focus on the case of general purpose programming languages ​​and on the process of generating an executable from a high level program.

Specifically, we will see how a source program is analyzed to obtain its components and possible errors introduced by the programmer are detected. The concept of interpreter and its relationship with compilers will also be introduced. Subsequently, it will be studied how the object code is generated and optimized from the data obtained in the analysis part to improve performance. All of this will be implemented by using compiler build tools.","The subject is structured in six modules:

1. General Information

1. Languages

2. Basic notions

3. Structure of a compiler

4. Building compilers

You will see an overview of the general structure of a compiler.

2. Lexical analysis

1. General organization

2. Construction of lexical analyzers

3. Specification of a lexical analyzer

4. Error handling

5. The entry system

6. The symbol tables

The only part of the compiler that interacts with the source file will be studied, converting its characters into a sequence of lexical symbols (tokens) and eliminating everything that is not necessary for its analysis (comments, line breaks...).

3. Analysis

1. General notions

2. Top-down analysis

3. Bottom-up analysis

The phase in charge of verifying that the lexical symbols of the source program arrive in the correct order and that the specifications of the context-free grammar that defines the source language are met will be studied.

4. Semantic analysis

1. Semantic analysis

2. Intermediate code generation

The verification of the semantics of the source program, which depends on the context, will be studied, incorporating semantic attributes and actions in the productions of the grammar.

5. Synthesis phases

1. Code generation

2. Code optimization

The generation of code from the intermediate code will be studied, as well as everything to take into account to carry out an automatic translation and the final optimization phase.

6. Interpreted languages

1. Interpreters

2. The abstract stack machine

3. Construction of an interpreter

A concrete model of architecture for interpreters based on a memory in the form of a stack will be presented. The construction process of an interpreter based on this model will be studied.",
UOC_Spain,5.581,"<h2>UOC_Spain 05.581</h2><h2>title</h2>Knowledge representation<h2>summary</h2>Intelligent systems need to use information in their decision making process. Not only the ability to store and query information is required, functionalities that can be achieved through databases or in-memory data structures. In addition to this, it is necessary to be able to relate the information and use it as a base from which to infer new knowledge.

This course presents the most common representation schemes to represent knowledge in intelligent systems: ontologies, semantic networks, logical representations, frameworks, etc. It also presents fields of application where these schemes are used, such as the field of the semantic web.<h2>content</h2>The units of this subject are the following:

Unit 1: Introduction to knowledge representation

Section 1: Knowledge
Section 2: Systems of representation
Unit 2: Ontologies and semantic web

Section 1: The relationship with the web
Section 2: The Semantic Web
Section 3: Ontologies and the web
Section 4: Formats
Section 5: Tools
Section 6: Resources",Knowledge representation,"Intelligent systems need to use information in their decision making process. Not only the ability to store and query information is required, functionalities that can be achieved through databases or in-memory data structures. In addition to this, it is necessary to be able to relate the information and use it as a base from which to infer new knowledge.

This course presents the most common representation schemes to represent knowledge in intelligent systems: ontologies, semantic networks, logical representations, frameworks, etc. It also presents fields of application where these schemes are used, such as the field of the semantic web.","The units of this subject are the following:

Unit 1: Introduction to knowledge representation

Section 1: Knowledge
Section 2: Systems of representation
Unit 2: Ontologies and semantic web

Section 1: The relationship with the web
Section 2: The Semantic Web
Section 3: Ontologies and the web
Section 4: Formats
Section 5: Tools
Section 6: Resources",
UOC_Spain,5.583,"<h2>UOC_Spain 05.583</h2><h2>title</h2>Machine learning<h2>summary</h2>The main motivation of this course is to make machine learning known and how it is situated within Artificial Intelligence as a discipline and to understand what agents and multi-agent systems are.

In Artificial Intelligence an overview of Artificial Intelligence was given and some of the so-called classical methods and techniques were presented, such as problem solving, search and knowledge-based systems, approximate reasoning techniques were also seen more advanced. .

In this course, you will go much deeper into the problem of machine learning (machine learning), covering the topics of unsupervised (clustering) and supervised (classification) learning. In particular, emphasis will be placed on the most advanced algorithms, such as support vector machines, classifier sets or neural networks.<h2>content</h2>Didactic module 1. Learning

1. Introduction
1.1. Genetic algorithms for the adjustment of fuzzy systems
1.2. A classification of learning techniques.
1.3. bias and variance

2.- Feature extraction
2.1. Training sets and featured spaces.
2.2. Taxonomy of feature extraction algorithms
23. Feature Selection
2.4. Feature Extraction
2.4.1. Principal component analysis
2.4.2. Linear Discriminant Analysis (ADL)

3. Unsupervised learning
3.1. Categorization algorithms: introduction
3.2. Partitioning and fuzzy partitioning of objects
3.3. Object hierarchies

4. Supervised learning
4.1. Methods based on categorization methods
4.2. support vector machines
4.3. Logical descriptions of concepts.
4.4. decision trees
4.5. Combination of methods
4.6. neural networks

5. Knowledge representation and learning
5.1. inductive logic programming

Didactic module 2. Agents and multi-agent systems

1. Intelligent agents
1.1. characteristics of an agent
1.2. Deliberative agents versus reactive agents
1.3. Agent Types

2. Multi-agent systems
2.1. Advantages of multi-agent systems
2.2. Communication techniques
23. Foundation for Intelligent Physical Agents
2.4. ontologies
2.5. Cooperation between agents",Machine learning,"The main motivation of this course is to make machine learning known and how it is situated within Artificial Intelligence as a discipline and to understand what agents and multi-agent systems are.

In Artificial Intelligence an overview of Artificial Intelligence was given and some of the so-called classical methods and techniques were presented, such as problem solving, search and knowledge-based systems, approximate reasoning techniques were also seen more advanced. .

In this course, you will go much deeper into the problem of machine learning (machine learning), covering the topics of unsupervised (clustering) and supervised (classification) learning. In particular, emphasis will be placed on the most advanced algorithms, such as support vector machines, classifier sets or neural networks.","Didactic module 1. Learning

1. Introduction
1.1. Genetic algorithms for the adjustment of fuzzy systems
1.2. A classification of learning techniques.
1.3. bias and variance

2.- Feature extraction
2.1. Training sets and featured spaces.
2.2. Taxonomy of feature extraction algorithms
23. Feature Selection
2.4. Feature Extraction
2.4.1. Principal component analysis
2.4.2. Linear Discriminant Analysis (ADL)

3. Unsupervised learning
3.1. Categorization algorithms: introduction
3.2. Partitioning and fuzzy partitioning of objects
3.3. Object hierarchies

4. Supervised learning
4.1. Methods based on categorization methods
4.2. support vector machines
4.3. Logical descriptions of concepts.
4.4. decision trees
4.5. Combination of methods
4.6. neural networks

5. Knowledge representation and learning
5.1. inductive logic programming

Didactic module 2. Agents and multi-agent systems

1. Intelligent agents
1.1. characteristics of an agent
1.2. Deliberative agents versus reactive agents
1.3. Agent Types

2. Multi-agent systems
2.1. Advantages of multi-agent systems
2.2. Communication techniques
23. Foundation for Intelligent Physical Agents
2.4. ontologies
2.5. Cooperation between agents",
UOC_Spain,5.584,"<h2>UOC_Spain 05.584</h2><h2>title</h2>Data mining<h2>summary</h2>Data is the new oil. Therefore, Data Mining is a subject to apply the previous knowledge acquired to Statistics and Databases and present some new ones more specific to the field of knowledge extraction. A set of methods from Artificial Intelligence are presented, which form the essential core of the discipline known as Data Mining. The basic concepts of the mentioned subjects are very useful in this matter and will allow a better evaluation of some of the techniques that will be studied.<h2>content</h2>The didactic material of the subject is divided into six modules and a prologue that present a notable interrelationship between them. The sixth is a case study that can be used to see how the methods explained in the other modules are applied in a concrete and real case.

Below you can see the modules that have to be worked on to achieve the objectives of the course.

Module 1: The Data Mining process.

Discovery of knowledge from data.
The phases of the knowledge extraction process.
Data mining tools.

Module 2: Data preprocessing and feature management.

Transformation of values.
Dimensionality reduction.
missing values.
Feature display.
Selection of characteristics.
Feature engineering.

Module 3: Unsupervised models

Pre-eliminate concepts.
Grouping and segmentation.
Density-based models.
affinity propagation.

Module 4: Supervised models

Proximity-based models.
Decision trees.
Regression models.

Module 5: Evaluation of models.

Evaluation of supervised classification models.
Evaluation of supervised regression models.
Evaluation of unsupervised models.

Module 6: Case Study.

Presentation of the case
Step 1: Establish an analytical objective
Step 2: Verify the data
Step 3: data preprocessing
Step 4: exploratory analysis
Step 5: Classification
Step 6: Reproducibility",Data mining,"Data is the new oil. Therefore, Data Mining is a subject to apply the previous knowledge acquired to Statistics and Databases and present some new ones more specific to the field of knowledge extraction. A set of methods from Artificial Intelligence are presented, which form the essential core of the discipline known as Data Mining. The basic concepts of the mentioned subjects are very useful in this matter and will allow a better evaluation of some of the techniques that will be studied.","The didactic material of the subject is divided into six modules and a prologue that present a notable interrelationship between them. The sixth is a case study that can be used to see how the methods explained in the other modules are applied in a concrete and real case.

Below you can see the modules that have to be worked on to achieve the objectives of the course.

Module 1: The Data Mining process.

Discovery of knowledge from data.
The phases of the knowledge extraction process.
Data mining tools.

Module 2: Data preprocessing and feature management.

Transformation of values.
Dimensionality reduction.
missing values.
Feature display.
Selection of characteristics.
Feature engineering.

Module 3: Unsupervised models

Pre-eliminate concepts.
Grouping and segmentation.
Density-based models.
affinity propagation.

Module 4: Supervised models

Proximity-based models.
Decision trees.
Regression models.

Module 5: Evaluation of models.

Evaluation of supervised classification models.
Evaluation of supervised regression models.
Evaluation of unsupervised models.

Module 6: Case Study.

Presentation of the case
Step 1: Establish an analytical objective
Step 2: Verify the data
Step 3: data preprocessing
Step 4: exploratory analysis
Step 5: Classification
Step 6: Reproducibility",
UOC_Spain,5.586,"<h2>UOC_Spain 05.586</h2><h2>title</h2>Analysis and design with patterns<h2>summary</h2>This course is focused on the study of analysis and design patterns contemplated from a practical perspective. The contents are located within the object-oriented methodology, the most currently accepted, and using the UML notation for the same reason.

Patterns (analysis, design, architecture...) are one of the innovations that have had the greatest impact in object-oriented development in recent years, along with the appearance of the UML language. Their main advantage is that they save time and improve quality by applying solutions (which we call patterns) that have already been widely tested by other designers.

For this reason, the use of patterns is considered a basic skill that object-oriented software designers must acquire today. Now, it does not seem that this ability can be acquired in any other way than through practice; In this practice, the detailed information found in books -which are already beginning to be numerous- about patterns is usually used, and this way of working is the one that is recommended to students for their future professional work.

This course provides summary descriptions of many of the most popular and currently accepted patterns, as well as some general concepts about patterns and their usage.<h2>content</h2>The didactic material of the course consists of three didactic modules:

Learning Module 1: Introduction to Patterns

In this module, notions of UML are given with practical examples of the different modeling techniques. Includes an analysis example and a design example.

Didactic module 2: Catalog of patterns

The most significant patterns are discussed and a description of patterns covering practically the entire software life cycle is provided.

Learning Module 3: Pattern Development Case Study

It includes the detailed development of a case study similar to the practice proposed to the students.

The materials of this subject are not designed to be studied in a linear way, but once the introduction (Module 1) has been read, it is recommended to combine the study of theory (Module 2) with practice (Module 3). In the description of each activity, you will find a detailed description of which specific sections of each module must be studied in order to carry out the activity.",Analysis and design with patterns,"This course is focused on the study of analysis and design patterns contemplated from a practical perspective. The contents are located within the object-oriented methodology, the most currently accepted, and using the UML notation for the same reason.

Patterns (analysis, design, architecture...) are one of the innovations that have had the greatest impact in object-oriented development in recent years, along with the appearance of the UML language. Their main advantage is that they save time and improve quality by applying solutions (which we call patterns) that have already been widely tested by other designers.

For this reason, the use of patterns is considered a basic skill that object-oriented software designers must acquire today. Now, it does not seem that this ability can be acquired in any other way than through practice; In this practice, the detailed information found in books -which are already beginning to be numerous- about patterns is usually used, and this way of working is the one that is recommended to students for their future professional work.

This course provides summary descriptions of many of the most popular and currently accepted patterns, as well as some general concepts about patterns and their usage.","The didactic material of the course consists of three didactic modules:

Learning Module 1: Introduction to Patterns

In this module, notions of UML are given with practical examples of the different modeling techniques. Includes an analysis example and a design example.

Didactic module 2: Catalog of patterns

The most significant patterns are discussed and a description of patterns covering practically the entire software life cycle is provided.

Learning Module 3: Pattern Development Case Study

It includes the detailed development of a case study similar to the practice proposed to the students.

The materials of this subject are not designed to be studied in a linear way, but once the introduction (Module 1) has been read, it is recommended to combine the study of theory (Module 2) with practice (Module 3). In the description of each activity, you will find a detailed description of which specific sections of each module must be studied in order to carry out the activity.",
UOC_Spain,5.587,"<h2>UOC_Spain 05.587</h2><h2>title</h2>Software engineering of components and distributed systems<h2>summary</h2>Ongoing advances in computing and telecommunications are changing the way software is developed. In particular, the relentless increase in the power of personal computers and mobile devices, the lowering of hardware costs, and the appearance of global coverage data networks have made possible an infrastructure that is especially conducive to the use of open and distributed systems. 

These changes have caused, among other things, that the traditional methods of software design and development (seen in the subjects of Engineering and Software Analysis and design with patterns) are insufficient, since, more or less implicitly, they assume that The application to be developed will be executed in a basically centralized environment. Therefore, traditional methods are unable to naturally manage the complexity of the requirements of this new type of systems. On the other hand, the aspects closest to the analysis and specification of requirements studied in the Requirements Engineering subject do not change with respect to what was seen in previous courses and, therefore, are not repeated here.

This subject serves as an introduction to software architectures as a framework for the design and development of distributed applications where the fundamentals, techniques and skills applicable to the modern definition of software architectures are studied and put into practice and knowledge is complemented. acquired in previous courses. The design of the architecture of software systems makes it possible to describe in an abstract and high-level way both the functionality of the system and many other non-functional aspects of it (distribution, reliability, security, adaptability, benefits, etc.). This system description is often defined by an architectural style, a classification of software systems into large families that follow a common structural pattern. Among the most common architectural styles for distributed systems are systems organized into microservices, multiple layers, client-server systems, or peer-to-peer systems.

Application design in terms of software microservices must be further refined to accommodate and implement it on a particular distributed software technology. These architectures can be implemented using any programming paradigm (object-oriented, structured...). In our specific case, the reference language will be Java, which allows the development of distributed applications with microservices architectures. These microservices are the ones that will be used to implement and test the architectural elements described in the system architecture.

Finally, some good practices in the development and production of software in distributed architectures are collected. Some of the key concepts are worked on when developing and putting into production, such as continuous delivery, DevOps culture, and deployment with containers.
<h2>content</h2>The subject is structured into 5 main activities, each one with its specific contents:

 

Activity 1: ""Distributed software architectures: a solution for every problem""

 

Book ""Fundamentals of Software Architecture"" (Richards & Ford): Chapter 1. Introduction.
Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part I Foundations (Chapters 2 - 8)
Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part II Architecture Styles (Chapters 9 - 18).
 

Activity 2: ""Hexagonal architectures and microservices design: a well-matched relationship""

 

Book ""Microservices patterns"" (Richardson): Chapter 1. Section 6: ""The Microservice architecture pattern language"".
Book ""Microservices patterns"" (Richardson): Chapter 2: ""Decomposition strategies"".
Book ""Microservices patterns"" (Richardson): Chapter 3: ""Interprocess communication in a microservice architecture""
Book ""Microservices patterns"" (Richardson): Chapter 5: ""Designing business logic in a microservice architecture"".
 

Activity 3: ""From creation to interconnection of microservices""

 

Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"". Introduction.
Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"".
Book ""Microservices patterns"" (Richardson): Chapter 7: ""Implementing queries in a microservice architecture""
Book ""Microservices patterns"" (Richardson): Chapter 8: ""External API patterns"".

Activity 4: ""Quality of distributed software: inherent, transversal and critical""

 

Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"". Introduction.
Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"".
Book ""Microservice Patterns"" (Chris Richardson): Chapter 10. ""Testing Microservices: Part 2"".
Book ""Software Architecture Fundamentals"" (Richards & Ford): Part I Fundamentals (Chapters 3 and 6).
 

Activity 5: ""DevOps, CD/CI and agile culture: good practices for distributed software development""

 

Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices. Introduction.
Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices.
Book ""Continuous Delivery: Reliable Software Releases Through Automated Build, Test, and Deployment (Jez Humble and Dave Farley) Part I: Chapters 1-10.
Book ""The DevOps Handbook"" (Patrick Debois, John Willis, Jez Humble & Gene Kim): Chapters 1 - 4.",Software engineering of components and distributed systems,"Ongoing advances in computing and telecommunications are changing the way software is developed. In particular, the relentless increase in the power of personal computers and mobile devices, the lowering of hardware costs, and the appearance of global coverage data networks have made possible an infrastructure that is especially conducive to the use of open and distributed systems. 

These changes have caused, among other things, that the traditional methods of software design and development (seen in the subjects of Engineering and Software Analysis and design with patterns) are insufficient, since, more or less implicitly, they assume that The application to be developed will be executed in a basically centralized environment. Therefore, traditional methods are unable to naturally manage the complexity of the requirements of this new type of systems. On the other hand, the aspects closest to the analysis and specification of requirements studied in the Requirements Engineering subject do not change with respect to what was seen in previous courses and, therefore, are not repeated here.

This subject serves as an introduction to software architectures as a framework for the design and development of distributed applications where the fundamentals, techniques and skills applicable to the modern definition of software architectures are studied and put into practice and knowledge is complemented. acquired in previous courses. The design of the architecture of software systems makes it possible to describe in an abstract and high-level way both the functionality of the system and many other non-functional aspects of it (distribution, reliability, security, adaptability, benefits, etc.). This system description is often defined by an architectural style, a classification of software systems into large families that follow a common structural pattern. Among the most common architectural styles for distributed systems are systems organized into microservices, multiple layers, client-server systems, or peer-to-peer systems.

Application design in terms of software microservices must be further refined to accommodate and implement it on a particular distributed software technology. These architectures can be implemented using any programming paradigm (object-oriented, structured...). In our specific case, the reference language will be Java, which allows the development of distributed applications with microservices architectures. These microservices are the ones that will be used to implement and test the architectural elements described in the system architecture.

Finally, some good practices in the development and production of software in distributed architectures are collected. Some of the key concepts are worked on when developing and putting into production, such as continuous delivery, DevOps culture, and deployment with containers.
","The subject is structured into 5 main activities, each one with its specific contents:

 

Activity 1: ""Distributed software architectures: a solution for every problem""

 

Book ""Fundamentals of Software Architecture"" (Richards & Ford): Chapter 1. Introduction.
Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part I Foundations (Chapters 2 - 8)
Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part II Architecture Styles (Chapters 9 - 18).
 

Activity 2: ""Hexagonal architectures and microservices design: a well-matched relationship""

 

Book ""Microservices patterns"" (Richardson): Chapter 1. Section 6: ""The Microservice architecture pattern language"".
Book ""Microservices patterns"" (Richardson): Chapter 2: ""Decomposition strategies"".
Book ""Microservices patterns"" (Richardson): Chapter 3: ""Interprocess communication in a microservice architecture""
Book ""Microservices patterns"" (Richardson): Chapter 5: ""Designing business logic in a microservice architecture"".
 

Activity 3: ""From creation to interconnection of microservices""

 

Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"". Introduction.
Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"".
Book ""Microservices patterns"" (Richardson): Chapter 7: ""Implementing queries in a microservice architecture""
Book ""Microservices patterns"" (Richardson): Chapter 8: ""External API patterns"".

Activity 4: ""Quality of distributed software: inherent, transversal and critical""

 

Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"". Introduction.
Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"".
Book ""Microservice Patterns"" (Chris Richardson): Chapter 10. ""Testing Microservices: Part 2"".
Book ""Software Architecture Fundamentals"" (Richards & Ford): Part I Fundamentals (Chapters 3 and 6).
 

Activity 5: ""DevOps, CD/CI and agile culture: good practices for distributed software development""

 

Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices. Introduction.
Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices.
Book ""Continuous Delivery: Reliable Software Releases Through Automated Build, Test, and Deployment (Jez Humble and Dave Farley) Part I: Chapters 1-10.
Book ""The DevOps Handbook"" (Patrick Debois, John Willis, Jez Humble & Gene Kim): Chapters 1 - 4.",
UOC_Spain,5.588,"<h2>UOC_Spain 05.588</h2><h2>title</h2>Software developement project<h2>summary</h2>The Software Development Project course has as its main objective the development of a specific software project and is based on the practical application of the knowledge and skills obtained so far in the Degree, such as Project Management, Fundamentals of Programming, Engineering of Software, Use of Databases, and specifically the technical skills that were obtained within Software Engineering of Components and Distributed Systems.

Despite the fact that the subject is based on carrying out a specific software project, the subject also covers both new theoretical aspects and others that complement the knowledge acquired up to now, such as agile software development methodologies.

The effective development of the project will be achieved through a specific agile methodology (Scrum) that iteratively covers in the form of sprints all the stages of the software life cycle, that is, the specification, design, implementation, testing, deployment and delivery of the project. product to the ""supposed"" customer. In particular, in the implementation stage, Java will be used to develop the distributed software based on a microserver architecture. In addition, other technologies will support the project, such as configuration, design, testing, continuous delivery, and containerized deployment tools. All these technologies have been seen and practiced in the previous subject of Software Engineering of Distributed Components and Systems and therefore it is assumed that the students know them.

Finally, the complexity of the project will require the specific development of skills related to collaborative work in small groups of students. The UOC will offer students a collaborative space where they can carry out communication between group members, share documentation and, in general, manage the project, with the support and supervision of the subject advisors.<h2>content</h2>Activity 1: ""Agile product development and conceptualization methodologies""

Book ""Essential Scrum: A practical guide to the most popular agile process by Kenneth S. Rubin. Chapter 1. Introduction.
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 2-13.
Book ""The agile samurai"" by Jonathan Rasmusson. Chapters 3-5.
Book ""The agile samurai"" by Jonathan Rasmusson. Chapters 1-2, 6 and 15.
Book ""Agile Estimating and Planning"" by Mike Cohn (supplementary material).
Book ""Scrum - a pocket guide (3rd ed.)"" by Gunther Verheyen (supplementary material).
Activity: First Continuous Assessment Test (PEC1).
Activity 2: ""Product Planning""

Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 15-16.
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process by Kenneth S. Rubin. Chapters 19-23.
Article ""The new user story backlog is a map"" by Jeff Patton. https://www.jpattonassociates.com/the-new-backlog/
Book ""User Stories Applied: For Agile Software Development"" by Kent Beck (supplementary material).
Book ""User Story Mapping"" by Jeff Patton (supplementary material).
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 17 Envisioning (Product Planning) (Supplementary Material).
Book ""Clean Code: A Handbook of Agile Software Craftsmanship"" by Robert Martin (supplementary material).
Book ""Refactoring: Improving the Design of Existing Code"" by Martin Fowler (Supplementary Material)
Activity: First part of the Practice (PRAC1).",Software developement project,"The Software Development Project course has as its main objective the development of a specific software project and is based on the practical application of the knowledge and skills obtained so far in the Degree, such as Project Management, Fundamentals of Programming, Engineering of Software, Use of Databases, and specifically the technical skills that were obtained within Software Engineering of Components and Distributed Systems.

Despite the fact that the subject is based on carrying out a specific software project, the subject also covers both new theoretical aspects and others that complement the knowledge acquired up to now, such as agile software development methodologies.

The effective development of the project will be achieved through a specific agile methodology (Scrum) that iteratively covers in the form of sprints all the stages of the software life cycle, that is, the specification, design, implementation, testing, deployment and delivery of the project. product to the ""supposed"" customer. In particular, in the implementation stage, Java will be used to develop the distributed software based on a microserver architecture. In addition, other technologies will support the project, such as configuration, design, testing, continuous delivery, and containerized deployment tools. All these technologies have been seen and practiced in the previous subject of Software Engineering of Distributed Components and Systems and therefore it is assumed that the students know them.

Finally, the complexity of the project will require the specific development of skills related to collaborative work in small groups of students. The UOC will offer students a collaborative space where they can carry out communication between group members, share documentation and, in general, manage the project, with the support and supervision of the subject advisors.","Activity 1: ""Agile product development and conceptualization methodologies""

Book ""Essential Scrum: A practical guide to the most popular agile process by Kenneth S. Rubin. Chapter 1. Introduction.
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 2-13.
Book ""The agile samurai"" by Jonathan Rasmusson. Chapters 3-5.
Book ""The agile samurai"" by Jonathan Rasmusson. Chapters 1-2, 6 and 15.
Book ""Agile Estimating and Planning"" by Mike Cohn (supplementary material).
Book ""Scrum - a pocket guide (3rd ed.)"" by Gunther Verheyen (supplementary material).
Activity: First Continuous Assessment Test (PEC1).
Activity 2: ""Product Planning""

Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 15-16.
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process by Kenneth S. Rubin. Chapters 19-23.
Article ""The new user story backlog is a map"" by Jeff Patton. https://www.jpattonassociates.com/the-new-backlog/
Book ""User Stories Applied: For Agile Software Development"" by Kent Beck (supplementary material).
Book ""User Story Mapping"" by Jeff Patton (supplementary material).
Book ""Essential Scrum: A Practical Guide to the Most Popular Agile Process"" by Kenneth S. Rubin. Chapters 17 Envisioning (Product Planning) (Supplementary Material).
Book ""Clean Code: A Handbook of Agile Software Craftsmanship"" by Robert Martin (supplementary material).
Book ""Refactoring: Improving the Design of Existing Code"" by Martin Fowler (Supplementary Material)
Activity: First part of the Practice (PRAC1).",
UOC_Spain,5.591,"<h2>UOC_Spain 05.591</h2><h2>title</h2>Computer networks structure<h2>summary</h2>Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.

The course ""Computer Network Structure"" (ERC) focuses on learning the fundamentals of the lowest level communication protocols that allow different types of devices to communicate: Transport, Internet and Network Access. Within this, special prominence is given to the operation of Ethernet local area networks (LAN) and the creation of IP addressing schemes.

Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the professional world of networks and serves as an entry point for a whole set of specializations in the field (design, security, etc.).

Specifically, within the entire agenda of this latest version of the CCNA agenda, this course encompasses practically the entire first part of the course, called ""Introduction to Networks"" (ITN), and a part of the second, called ""Switching , Routing and Wireless Fundamentals"" (SRWE).<h2>content</h2>Due to the characteristics of the subject, the materials that will be used throughout the ERC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"". These materials are supplemented by the book ""Computer Networks: A Top-Down Approach,"" which is not part of the curriculum for this certification.

The course syllabus within the subject is divided into four thematic blocks, or modules, which include the different chapters of the materials from the parts ""Introduction to Networks"", ""Essential Switching, Routing and Wireless"", and some sections of the book .

Module 1. How do networks work?

(2 weeks)

Introduction to Modern Networks - Introduces the concept of a data network, providing a very general overview of the foundation for exploring the services, technologies, and issues that network professionals face when designing, developing, and maintaining data networking. modern network.
Basic configuration of switches and network devices: Serves as an introduction to the Cisco IOS operating system. The command line structure and basic commands are shown.
Protocols and network models: The concept of protocol and the importance of standardization processes are presented. For this, the TCP/IP and OSI communication models are explained.
The Physical Layer: Explains how the physical layer protocols enable communications on data networks.

Module 2. Ethernet networks

(4 weeks)

The network access layer: the functions of the data link layer and the protocols associated with it are studied.
Switching Concepts - Explains how Layer 2 switches transmit information.
Ethernet Switching: Describes the characteristics and operation of the Ethernet network in terms of its evolution from contention-based data communication shared media technology to today's high-bandwidth full-duplex technology.
VLANs: This part focuses on knowing what a virtual private network (VLAN) is and how it works, as well as its implementation.
WLAN Concepts and Configuration - Explains how wireless WLANs enable network connection, as well as configuration, basic security, and troubleshooting.

Module 3. The Internet Protocol

(3 weeks)

The Network Layer – Discusses the role of the network layer and how it divides networks into groups of equipment to manage the flow of data packets within a network. It also examines the way in which communication between networks, routing, is facilitated.
Resolution of IP addresses: Protocols such as ARP and ""Network Discovery"" that allow communication on a network are explained.
Basic configuration of routers: The initial implementation of parameters in a router (router) and network devices is explained.
IPv4 and IPv6 Addressing: The creation and assignment of IPv4 and IPv6 network and subnet addresses are explained in detail through the efficient use of segmentation.
ICMP – Explains the use of various tools to verify network connectivity.

Module 4. Routing in the Internet and the Transport layer

(3 weeks)

Routing Concepts – This part is covered in conjunction with the book and focuses on seeing what algorithms and protocols exist to dynamically create routing tables for a router.
Static Routing: Configuration of IPv4 and IPv6 static routes.
The Transport Layer: The role of the transport layer in encapsulating application data using the network layer is examined. The transport layer also includes error control functions and allows the use of different services on the same computer.",Computer networks structure,"Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.

The course ""Computer Network Structure"" (ERC) focuses on learning the fundamentals of the lowest level communication protocols that allow different types of devices to communicate: Transport, Internet and Network Access. Within this, special prominence is given to the operation of Ethernet local area networks (LAN) and the creation of IP addressing schemes.

Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the professional world of networks and serves as an entry point for a whole set of specializations in the field (design, security, etc.).

Specifically, within the entire agenda of this latest version of the CCNA agenda, this course encompasses practically the entire first part of the course, called ""Introduction to Networks"" (ITN), and a part of the second, called ""Switching , Routing and Wireless Fundamentals"" (SRWE).","Due to the characteristics of the subject, the materials that will be used throughout the ERC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"". These materials are supplemented by the book ""Computer Networks: A Top-Down Approach,"" which is not part of the curriculum for this certification.

The course syllabus within the subject is divided into four thematic blocks, or modules, which include the different chapters of the materials from the parts ""Introduction to Networks"", ""Essential Switching, Routing and Wireless"", and some sections of the book .

Module 1. How do networks work?

(2 weeks)

Introduction to Modern Networks - Introduces the concept of a data network, providing a very general overview of the foundation for exploring the services, technologies, and issues that network professionals face when designing, developing, and maintaining data networking. modern network.
Basic configuration of switches and network devices: Serves as an introduction to the Cisco IOS operating system. The command line structure and basic commands are shown.
Protocols and network models: The concept of protocol and the importance of standardization processes are presented. For this, the TCP/IP and OSI communication models are explained.
The Physical Layer: Explains how the physical layer protocols enable communications on data networks.

Module 2. Ethernet networks

(4 weeks)

The network access layer: the functions of the data link layer and the protocols associated with it are studied.
Switching Concepts - Explains how Layer 2 switches transmit information.
Ethernet Switching: Describes the characteristics and operation of the Ethernet network in terms of its evolution from contention-based data communication shared media technology to today's high-bandwidth full-duplex technology.
VLANs: This part focuses on knowing what a virtual private network (VLAN) is and how it works, as well as its implementation.
WLAN Concepts and Configuration - Explains how wireless WLANs enable network connection, as well as configuration, basic security, and troubleshooting.

Module 3. The Internet Protocol

(3 weeks)

The Network Layer – Discusses the role of the network layer and how it divides networks into groups of equipment to manage the flow of data packets within a network. It also examines the way in which communication between networks, routing, is facilitated.
Resolution of IP addresses: Protocols such as ARP and ""Network Discovery"" that allow communication on a network are explained.
Basic configuration of routers: The initial implementation of parameters in a router (router) and network devices is explained.
IPv4 and IPv6 Addressing: The creation and assignment of IPv4 and IPv6 network and subnet addresses are explained in detail through the efficient use of segmentation.
ICMP – Explains the use of various tools to verify network connectivity.

Module 4. Routing in the Internet and the Transport layer

(3 weeks)

Routing Concepts – This part is covered in conjunction with the book and focuses on seeing what algorithms and protocols exist to dynamically create routing tables for a router.
Static Routing: Configuration of IPv4 and IPv6 static routes.
The Transport Layer: The role of the transport layer in encapsulating application data using the network layer is examined. The transport layer also includes error control functions and allows the use of different services on the same computer.",
UOC_Spain,5.592,"<h2>UOC_Spain 05.592</h2><h2>title</h2>Advanced computers architecture<h2>summary</h2>In this subject, knowledge of the advanced architectures of current computers is deepened. On the one hand, previous knowledge in Fundamentals and Structure of Computers and Computer Architecture will be expanded. On the other hand, different models of current processor architectures will be presented. Among them, high performance architectures, multicores or GPU architectures will be studied.

However, not only the purely architectural aspects of these systems will be discussed, but the different programming paradigms associated with these architectures will also be presented.<h2>content</h2>The subject is made up of five modules that cover the objectives and competences previously exposed:

 

Module 1: Introduction to parallel architectures.

Module 2: Multiprocessors vs Multicomputers

Module 3: Multi-Thread Architectures (Multi-core)

Module 4: Performance in multithreaded architectures

Module 5: Computer Graphics (GPU)-Based Architectures",Advanced computers architecture,"In this subject, knowledge of the advanced architectures of current computers is deepened. On the one hand, previous knowledge in Fundamentals and Structure of Computers and Computer Architecture will be expanded. On the other hand, different models of current processor architectures will be presented. Among them, high performance architectures, multicores or GPU architectures will be studied.

However, not only the purely architectural aspects of these systems will be discussed, but the different programming paradigms associated with these architectures will also be presented.","The subject is made up of five modules that cover the objectives and competences previously exposed:

 

Module 1: Introduction to parallel architectures.

Module 2: Multiprocessors vs Multicomputers

Module 3: Multi-Thread Architectures (Multi-core)

Module 4: Performance in multithreaded architectures

Module 5: Computer Graphics (GPU)-Based Architectures",
UOC_Spain,5.593,"<h2>UOC_Spain 05.593</h2><h2>title</h2>Requirements engineering<h2>summary</h2>Requirements engineering is the discipline that helps us to identify, manage and maintain the set of software requirements that we want to develop. Requirements engineering takes place in the same context as software engineering (software development), so it can be seen as part of software engineering. Even so, it must be taken into account that requirements engineering requires knowledge and skills from other disciplines such as psychology, marketing or design.

The purpose of this course is for future software engineers to deepen their study of the problems, techniques, and tools related to obtaining, managing, documenting, and validating/verifying the requirements of a software system. When presenting the contents of this course, we have set ourselves two main objectives:

1) The discipline of requirements engineering is presented from a practical point of view, giving great importance to the techniques and tools that students will be able to apply in their professional lives.
2) The broadest possible vision of requirements engineering is also given, looking at aspects as diverse as product management or the implementation of automated acceptance tests.

This subject assumes that the student has basic notions of requirements engineering (in the case of UOC students, it will be assumed that they have taken the Software Engineering subject). Therefore, this course deepens and extends some concepts that have already been studied before, at the same time that it introduces new techniques and tools of requirements engineering.<h2>content</h2>The didactic material of the subject consists of five didactic modules:

Module 1: Introduction to Requirements Engineering

It introduces requirements engineering and presents the practical case that will be developed throughout the rest of the modules.

Introduction to requirements engineering.
Presentation of the practical case
Types of requirements
The requirements engineering process.
Use Case Requirements

Module 2: Obtaining requirements

It reviews the basic requirements elicitation techniques and introduces new techniques.

Requirements elicitation techniques
requirements discovery
legacy solutions
Objectives and requirements
case study

Module 3: Requirements Management

Describes new techniques for requirements management, especially from the point of view of managing software as a product.

Factors to consider for requirements management
Requirements estimation
Prioritization and selection of requirements
Management of changes in requirements.
case study

Module 4: Documentation of requirements

It shows various styles of requirements documentation and how the different styles have advantages and disadvantages that make them ideal for different situations.

Requirements Documentation - Overview
Requirements Documentation Styles
Documentation of requirements through use cases
Documentation of the conceptual model using UML and OCL
case study

Module 5: Validation and verification of requirements

Describes the process for validating and verifying the correctness of the selected requirements. First, it describes how to verify that the requirements you choose are correct (validation), and then how you can ensure that the software you develop meets these requirements (verification).

Requirements validation
Requirements verification
Test Driven Development
case study",Requirements engineering,"Requirements engineering is the discipline that helps us to identify, manage and maintain the set of software requirements that we want to develop. Requirements engineering takes place in the same context as software engineering (software development), so it can be seen as part of software engineering. Even so, it must be taken into account that requirements engineering requires knowledge and skills from other disciplines such as psychology, marketing or design.

The purpose of this course is for future software engineers to deepen their study of the problems, techniques, and tools related to obtaining, managing, documenting, and validating/verifying the requirements of a software system. When presenting the contents of this course, we have set ourselves two main objectives:

1) The discipline of requirements engineering is presented from a practical point of view, giving great importance to the techniques and tools that students will be able to apply in their professional lives.
2) The broadest possible vision of requirements engineering is also given, looking at aspects as diverse as product management or the implementation of automated acceptance tests.

This subject assumes that the student has basic notions of requirements engineering (in the case of UOC students, it will be assumed that they have taken the Software Engineering subject). Therefore, this course deepens and extends some concepts that have already been studied before, at the same time that it introduces new techniques and tools of requirements engineering.","The didactic material of the subject consists of five didactic modules:

Module 1: Introduction to Requirements Engineering

It introduces requirements engineering and presents the practical case that will be developed throughout the rest of the modules.

Introduction to requirements engineering.
Presentation of the practical case
Types of requirements
The requirements engineering process.
Use Case Requirements

Module 2: Obtaining requirements

It reviews the basic requirements elicitation techniques and introduces new techniques.

Requirements elicitation techniques
requirements discovery
legacy solutions
Objectives and requirements
case study

Module 3: Requirements Management

Describes new techniques for requirements management, especially from the point of view of managing software as a product.

Factors to consider for requirements management
Requirements estimation
Prioritization and selection of requirements
Management of changes in requirements.
case study

Module 4: Documentation of requirements

It shows various styles of requirements documentation and how the different styles have advantages and disadvantages that make them ideal for different situations.

Requirements Documentation - Overview
Requirements Documentation Styles
Documentation of requirements through use cases
Documentation of the conceptual model using UML and OCL
case study

Module 5: Validation and verification of requirements

Describes the process for validating and verifying the correctness of the selected requirements. First, it describes how to verify that the requirements you choose are correct (validation), and then how you can ensure that the software you develop meets these requirements (verification).

Requirements validation
Requirements verification
Test Driven Development
case study",
UOC_Spain,5.594,"<h2>UOC_Spain 05.594</h2><h2>title</h2>Embedded systems<h2>summary</h2>Embedded systems are increasingly present in our lives. From network devices to industrial control systems, a wide range of devices make up what we know as an Embedded System. In this topic we want to give an overview of these systems. We will start from its definition and delve into its fields of application. The knowledge of the hardware components that constitute these systems will be deepened, we will know their programming models and the particularities that condition the development of applications for embedded systems.

The main objective of the course is for the student to learn the basic programming techniques of an embedded system, have a basic knowledge of the hardware architecture that composes them and acquire skills to work with this type of device.<h2>content</h2>Module 1- Introduction to embedded systems
In this module an introduction to embedded systems is made, the concept and its applications are presented and emphasis is placed on the development process of an embedded system.

Module 2 - The hardware of an embedded system
This module introduces the hardware architecture of an embedded system. The components that compose it are presented and their particularities are described. The objective of the module is that the student has an overview of the main hardware components that make up an embedded system.

Module 3 - The software and programming models of an embedded system
This module presents the most relevant programming models for the development of applications for embedded systems. Unlike what has been learned in other software development subjects, it will be seen that the efficiency and memory reduction used by the program is rewarded over its structuring and/or modularity.

Module 4- Operating systems for embedded systems
This module takes a hands-on approach to introduce the need for abstractions when operating with embedded systems. From the simplest approaches to real-time operating systems, the different ways to manage the resources of an embedded system are presented. Also in this module the peripheral controllers are worked on and their programming is deepened.

Module 5- Validation and evaluation tools for embedded systems.
This module introduces the tools available for an application developer to carry out their work and verify the developed software.",Embedded systems,"Embedded systems are increasingly present in our lives. From network devices to industrial control systems, a wide range of devices make up what we know as an Embedded System. In this topic we want to give an overview of these systems. We will start from its definition and delve into its fields of application. The knowledge of the hardware components that constitute these systems will be deepened, we will know their programming models and the particularities that condition the development of applications for embedded systems.

The main objective of the course is for the student to learn the basic programming techniques of an embedded system, have a basic knowledge of the hardware architecture that composes them and acquire skills to work with this type of device.","Module 1- Introduction to embedded systems
In this module an introduction to embedded systems is made, the concept and its applications are presented and emphasis is placed on the development process of an embedded system.

Module 2 - The hardware of an embedded system
This module introduces the hardware architecture of an embedded system. The components that compose it are presented and their particularities are described. The objective of the module is that the student has an overview of the main hardware components that make up an embedded system.

Module 3 - The software and programming models of an embedded system
This module presents the most relevant programming models for the development of applications for embedded systems. Unlike what has been learned in other software development subjects, it will be seen that the efficiency and memory reduction used by the program is rewarded over its structuring and/or modularity.

Module 4- Operating systems for embedded systems
This module takes a hands-on approach to introduce the need for abstractions when operating with embedded systems. From the simplest approaches to real-time operating systems, the different ways to manage the resources of an embedded system are presented. Also in this module the peripheral controllers are worked on and their programming is deepened.

Module 5- Validation and evaluation tools for embedded systems.
This module introduces the tools available for an application developer to carry out their work and verify the developed software.",
UOC_Spain,5.595,"<h2>UOC_Spain 05.595</h2><h2>title</h2>Enterpreneurship<h2>summary</h2>New business opportunities appear every day to respond to previously non-existent or unsatisfied needs or to improve the existing offer. In addition, organizations increasingly value having an entrepreneurial organizational culture and encourage people who work to act as entrepreneurs in the same organization. And it has been shown that there is a positive relationship between entrepreneurship and the development of a country or region. Among other characteristics, it contributes to economic growth, is a source of innovation, favors job creation and contributes to social cohesion and dynamism.

In this sense, the Entrepreneurial Initiative subject aims to promote the entrepreneurial spirit of students from the introduction to the main elements that make up the entrepreneurial process from an applied and practical approach. Firstly, we will introduce ourselves to the entrepreneurial phenomenon, analyzing various typologies and taking into account the gender perspective. Next, we will immerse ourselves in the ideation, validation, modeling and presentation of a viable and sustainable entrepreneurial project (following the sustainable development objectives) developing our capacities for initiative, innovation and teamwork.<h2>content</h2>1. Entrepreneurship and business

1.1. Key concepts

1.2 Entrepreneurial person and founding teams

1.3 Gender and entrepreneurship

1.4 Entrepreneurship in other cultures

1.5 Learning to undertake

1.6 Innovate and undertake. Focus method.

2. The inspiring problem

2.1 Trends, sectors and technologies

2.2 Knowing the field that motivates us

2.3 Inspiring problem

2.4 Validation. interview problem

3. The innovative solution

3.1 Ideation. Lateral thinking and creativity.

3.2 Minimum viable and prototyped product

3.3 Validation. Solution Interview

4. The business model

4.1 The SCOPE business model

4.2 Applications of the business model

4.3 Other tools to work on the business model

5. Numerical aspects of the entrepreneurial project

5.1 Marketing and sales. demand estimate

5.2 Traction. Analytics and indicators to undertake

5.3 Economic and financial aspects

5.4 Economic-financial plan. Agility and feasibility

5.5 Financing of the initiative

6. Project communication

6.1 Purpose of communication

6.2 Target audience

6.3 Effective Presentations",Enterpreneurship,"New business opportunities appear every day to respond to previously non-existent or unsatisfied needs or to improve the existing offer. In addition, organizations increasingly value having an entrepreneurial organizational culture and encourage people who work to act as entrepreneurs in the same organization. And it has been shown that there is a positive relationship between entrepreneurship and the development of a country or region. Among other characteristics, it contributes to economic growth, is a source of innovation, favors job creation and contributes to social cohesion and dynamism.

In this sense, the Entrepreneurial Initiative subject aims to promote the entrepreneurial spirit of students from the introduction to the main elements that make up the entrepreneurial process from an applied and practical approach. Firstly, we will introduce ourselves to the entrepreneurial phenomenon, analyzing various typologies and taking into account the gender perspective. Next, we will immerse ourselves in the ideation, validation, modeling and presentation of a viable and sustainable entrepreneurial project (following the sustainable development objectives) developing our capacities for initiative, innovation and teamwork.","1. Entrepreneurship and business

1.1. Key concepts

1.2 Entrepreneurial person and founding teams

1.3 Gender and entrepreneurship

1.4 Entrepreneurship in other cultures

1.5 Learning to undertake

1.6 Innovate and undertake. Focus method.

2. The inspiring problem

2.1 Trends, sectors and technologies

2.2 Knowing the field that motivates us

2.3 Inspiring problem

2.4 Validation. interview problem

3. The innovative solution

3.1 Ideation. Lateral thinking and creativity.

3.2 Minimum viable and prototyped product

3.3 Validation. Solution Interview

4. The business model

4.1 The SCOPE business model

4.2 Applications of the business model

4.3 Other tools to work on the business model

5. Numerical aspects of the entrepreneurial project

5.1 Marketing and sales. demand estimate

5.2 Traction. Analytics and indicators to undertake

5.3 Economic and financial aspects

5.4 Economic-financial plan. Agility and feasibility

5.5 Financing of the initiative

6. Project communication

6.1 Purpose of communication

6.2 Target audience

6.3 Effective Presentations",
UOC_Spain,5.596,"<h2>UOC_Spain 05.596</h2><h2>title</h2>Foundations of information systems<h2>summary</h2>The continuous innovations in information and communication technologies are transforming the corporate business world into new models, new processes and new business needs. This environment has favored the investments of the companies to be more competitive in the current market, allocating a budget to the acquisition, implementation or updating of information systems.

In this topic we present the basic concepts of information systems, the types of information systems, the relevance of information systems for companies, what the first information systems were like, how they have evolved and what the systems of the system have to contribute. future. In companies

We will know the main information system: Enterprise Resource Planning, today also known as basic or traditional.

We will see how the incorporation of new functionalities in the evolution of ERP systems gives rise to new collaborative information systems: Customer Relationship Management (CRM), Supplier Chain Management (SCM) or Business Intelligence (BI).

And a transversal theme to any company information system, its implementation. We will cover the life cycle of an implementation project, the characteristics of its different phases, the problems and what guidelines to follow to obtain a successful implementation.<h2>content</h2>The concept of information system is gradually introduced in the different didactic modules: beginning with its definition, presenting the different types of information systems that exist, showing the most important information systems for companies, and ending with a module on how to these systems are implemented. in companies it is managed.

The content of the subject is divided into the following didactic modules:

Module 0. Introduction to information systems in organizations

the information system
Information system management
The typologies of information systems.
The implementation of the information system
information security

Module 1. Business Information System

Business information system concept
Historical evolution of the ERP system
ERP system architecture
functional modules
ERP system life cycle
ERP system providers

Module 2. Business Cooperation Systems

Enterprise Project Management (EPM)
Supply Chain Management (SCM)
Customer relationship management (CRM)
Electronic commerce (e-business)
Business Intelligence (BI)
Knowledge Management (KM)
document management

Module 3. Implementation of Business Information Systems

Characteristics of business information systems.
Deployment Lifecycle Phases
Phase 1. Adoption of the system: The decision to acquire an ERP
Phase 2. Selection of the standard solution
Phase 3. Implementation of the solution
Phase 4. Commissioning
Change management
Project management

Module 4. Practical Case: Rural Tourism (Example)

Presentation of the practical case
General solution approach
Proposed solution",Foundations of information systems,"The continuous innovations in information and communication technologies are transforming the corporate business world into new models, new processes and new business needs. This environment has favored the investments of the companies to be more competitive in the current market, allocating a budget to the acquisition, implementation or updating of information systems.

In this topic we present the basic concepts of information systems, the types of information systems, the relevance of information systems for companies, what the first information systems were like, how they have evolved and what the systems of the system have to contribute. future. In companies

We will know the main information system: Enterprise Resource Planning, today also known as basic or traditional.

We will see how the incorporation of new functionalities in the evolution of ERP systems gives rise to new collaborative information systems: Customer Relationship Management (CRM), Supplier Chain Management (SCM) or Business Intelligence (BI).

And a transversal theme to any company information system, its implementation. We will cover the life cycle of an implementation project, the characteristics of its different phases, the problems and what guidelines to follow to obtain a successful implementation.","The concept of information system is gradually introduced in the different didactic modules: beginning with its definition, presenting the different types of information systems that exist, showing the most important information systems for companies, and ending with a module on how to these systems are implemented. in companies it is managed.

The content of the subject is divided into the following didactic modules:

Module 0. Introduction to information systems in organizations

the information system
Information system management
The typologies of information systems.
The implementation of the information system
information security

Module 1. Business Information System

Business information system concept
Historical evolution of the ERP system
ERP system architecture
functional modules
ERP system life cycle
ERP system providers

Module 2. Business Cooperation Systems

Enterprise Project Management (EPM)
Supply Chain Management (SCM)
Customer relationship management (CRM)
Electronic commerce (e-business)
Business Intelligence (BI)
Knowledge Management (KM)
document management

Module 3. Implementation of Business Information Systems

Characteristics of business information systems.
Deployment Lifecycle Phases
Phase 1. Adoption of the system: The decision to acquire an ERP
Phase 2. Selection of the standard solution
Phase 3. Implementation of the solution
Phase 4. Commissioning
Change management
Project management

Module 4. Practical Case: Rural Tourism (Example)

Presentation of the practical case
General solution approach
Proposed solution",
UOC_Spain,5.597,"<h2>UOC_Spain 05.597</h2><h2>title</h2>Information systems integration<h2>summary</h2>The contents of the subject ""Information Systems Integration"" (ISI) revolve around the various meanings of the word ""integration"" in relation to organizations of all kinds, and the information systems they use. Thus, to begin with, we will see the type of problems that usually arise in organizations with little structural integration, as well as the proposals that contribute to a better business integration, mainly the definition and implementation of business processes, transversal to the classic functional ones. areas

Subsequently, it will be seen how organizations have been developing and implementing new information systems as a fundamental tool for their structural and informational integration, and as a means for their progress in terms of their functional management and strategic direction, in short, for their progress. in terms of quality and competitiveness.

In this line, the different integrating roles that companies pursue through the main types of business information systems implemented in recent years, from ERP systems to BI systems, through CRM and SCM systems, through for EAI projects. Finally, some of the concepts related to the implementation of information systems in organizations will be introduced from a very practical point of view.<h2>content</h2>The purpose of the didactic material is to complement the theoretical knowledge of the modules studied with practical activities that allow the student to acquire basic theoretical and practical knowledge. With this, it is intended that, once the subject is finished, the acquired competences allow the student to apply the knowledge and methodologies to other circumstances and needs, both in the educational context and in professional life.

The concepts around Business Integration through Information Systems are introduced progressively and gradually throughout the different didactic modules of the subject. From a thematic point of view, the subject is broken down into 4 main didactic modules:

1. Motivations and Fundamentals of Business Integration.

 2. Vertical Integration through Information Systems.

 3. Horizontal Integration through Information Systems.

 4. Implementation of Information Systems in the company.",Information systems integration,"The contents of the subject ""Information Systems Integration"" (ISI) revolve around the various meanings of the word ""integration"" in relation to organizations of all kinds, and the information systems they use. Thus, to begin with, we will see the type of problems that usually arise in organizations with little structural integration, as well as the proposals that contribute to a better business integration, mainly the definition and implementation of business processes, transversal to the classic functional ones. areas

Subsequently, it will be seen how organizations have been developing and implementing new information systems as a fundamental tool for their structural and informational integration, and as a means for their progress in terms of their functional management and strategic direction, in short, for their progress. in terms of quality and competitiveness.

In this line, the different integrating roles that companies pursue through the main types of business information systems implemented in recent years, from ERP systems to BI systems, through CRM and SCM systems, through for EAI projects. Finally, some of the concepts related to the implementation of information systems in organizations will be introduced from a very practical point of view.","The purpose of the didactic material is to complement the theoretical knowledge of the modules studied with practical activities that allow the student to acquire basic theoretical and practical knowledge. With this, it is intended that, once the subject is finished, the acquired competences allow the student to apply the knowledge and methodologies to other circumstances and needs, both in the educational context and in professional life.

The concepts around Business Integration through Information Systems are introduced progressively and gradually throughout the different didactic modules of the subject. From a thematic point of view, the subject is broken down into 4 main didactic modules:

1. Motivations and Fundamentals of Business Integration.

 2. Vertical Integration through Information Systems.

 3. Horizontal Integration through Information Systems.

 4. Implementation of Information Systems in the company.",
UOC_Spain,5.598,"<h2>UOC_Spain 05.598</h2><h2>title</h2>Use of information systems in organizations<h2>summary</h2>The subject Use of Information Systems in Organizations (USIO) has a deductive approach; that is, through the study and work of cases, the impact of Information and Communication Technologies (ICT) in organizations is analyzed. This approach allows establishing conclusions and interpretations whose purpose is to understand the efficient use of ICT in management and business decision making.

The course is based on solving a case throughout the semester by working in interdisciplinary groups. The students of the Degrees in Computer Engineering (GII) and Business Administration and Management (ADE) will share a work space in which they will develop the activities of the subject. This point is very important and the student should consider it before enrolling. Unlike other subjects where there is detailed material to work on for further assessment, the USIO does not have material that the student must study in the classical sense. A group must be formed and work must be done on the approach of a case with contents of business information systems. The development must be collaborative and although some recommended readings are given, searches on the Internet or other sources must also be carried out, proposing a coherent and argued solution. It is not possible to think that there is ""the solution"" in the style of a mathematical exercise, there are several possible ones and the consultant will evaluate the different alternatives with pre-established criteria (indicated as part of the statement). Group work dynamics are usually complex and in this sense it is very important to form a cohesive group that is willing to work from the beginning.<h2>content</h2>Case title: ""PARROT""

Affair:

The subject Use of Information Systems in Organizations (USIO) is based on the development of a case study. We will focus on the case of LORO. It is intended to be a first approximation to the resolution of technological innovations to which companies must tend so as not to disappear in the future. The question that management teams in any organization must ask themselves is whether current products and services will continue to be marketed in the future. In the case of PARROT, a drone manufacturer, the help of a consultant is being considered to carry out a detailed study in five phases to take advantage of the disruptive technologies that are appearing in the current digital revolution.


The topics to be studied in this case are the following:

Emerging technologies according to the Gartner Hype Cycle.
Digital Twins technology (Digital Twins) applied to an organization.
The application of Conversational Intelligence technology to the manufacturing sector and its ethical concerns.
Improving an organization's processes through hyperautomation and process mining
Metaverse technology applied to a manufacturing organization.
The students will be organized in groups to propose a detailed study to PARROT as a consultant. The case has been structured into five PECs corresponding to the five phases that the study will carry out to allow PARROT to take advantage of disruptive technologies; the first will be developed individually and the rest will be done in groups.

Summary of Goals by Milestones:

- PEC 1.- Reading, understanding the case. Gartner Hype Cycle analysis to detect emerging technologies to apply.

Understand the case and analyze the technologies included in the Gartner Hype Cycle titled ""Hype Cycle for Mobile Robots and Drones, 2022"" published on July 19, 2022 by Dwight Klappich, to consider which 2 emerging technologies (since Innovation Trigger or Peak of Inflated Expectations ) could use Parrot, which could offer them the creation of new business models or economic growth

- PEC 2.- Analysis of the application of Digital Twins Technology (Digital Twins) in an organization.

Explore how PARROT could take advantage of the Digital Twins technology trend.

- PEC 3.- Analysis of the application of Conversational Intelligence Technology in an organization.

Analyze what possibilities of applying Conversational Intelligence such as ChatGPT to the manufacturing sector. And discuss what are the ethical concerns of using conversational intelligence like ChatGPT.

- PEC 4.- Analysis of the application of Hyperautomation and Process Mining in an organization.

Analyze how PARROT could carry out different initiatives to improve operational processes by applying hyperautomation, through Robotic Process Automation technology or Business Process Management Workflow Engines or Process Mining technologies
Get Celonis certified through the 10-hour Process Mining Fundamentals course.

- PEC 5.- Analysis of the application of the Metaverse in an organization.

Analyze how PARROT could take advantage of the technological trend of the Metaverse.",Use of information systems in organizations,"The subject Use of Information Systems in Organizations (USIO) has a deductive approach; that is, through the study and work of cases, the impact of Information and Communication Technologies (ICT) in organizations is analyzed. This approach allows establishing conclusions and interpretations whose purpose is to understand the efficient use of ICT in management and business decision making.

The course is based on solving a case throughout the semester by working in interdisciplinary groups. The students of the Degrees in Computer Engineering (GII) and Business Administration and Management (ADE) will share a work space in which they will develop the activities of the subject. This point is very important and the student should consider it before enrolling. Unlike other subjects where there is detailed material to work on for further assessment, the USIO does not have material that the student must study in the classical sense. A group must be formed and work must be done on the approach of a case with contents of business information systems. The development must be collaborative and although some recommended readings are given, searches on the Internet or other sources must also be carried out, proposing a coherent and argued solution. It is not possible to think that there is ""the solution"" in the style of a mathematical exercise, there are several possible ones and the consultant will evaluate the different alternatives with pre-established criteria (indicated as part of the statement). Group work dynamics are usually complex and in this sense it is very important to form a cohesive group that is willing to work from the beginning.","Case title: ""PARROT""

Affair:

The subject Use of Information Systems in Organizations (USIO) is based on the development of a case study. We will focus on the case of LORO. It is intended to be a first approximation to the resolution of technological innovations to which companies must tend so as not to disappear in the future. The question that management teams in any organization must ask themselves is whether current products and services will continue to be marketed in the future. In the case of PARROT, a drone manufacturer, the help of a consultant is being considered to carry out a detailed study in five phases to take advantage of the disruptive technologies that are appearing in the current digital revolution.


The topics to be studied in this case are the following:

Emerging technologies according to the Gartner Hype Cycle.
Digital Twins technology (Digital Twins) applied to an organization.
The application of Conversational Intelligence technology to the manufacturing sector and its ethical concerns.
Improving an organization's processes through hyperautomation and process mining
Metaverse technology applied to a manufacturing organization.
The students will be organized in groups to propose a detailed study to PARROT as a consultant. The case has been structured into five PECs corresponding to the five phases that the study will carry out to allow PARROT to take advantage of disruptive technologies; the first will be developed individually and the rest will be done in groups.

Summary of Goals by Milestones:

- PEC 1.- Reading, understanding the case. Gartner Hype Cycle analysis to detect emerging technologies to apply.

Understand the case and analyze the technologies included in the Gartner Hype Cycle titled ""Hype Cycle for Mobile Robots and Drones, 2022"" published on July 19, 2022 by Dwight Klappich, to consider which 2 emerging technologies (since Innovation Trigger or Peak of Inflated Expectations ) could use Parrot, which could offer them the creation of new business models or economic growth

- PEC 2.- Analysis of the application of Digital Twins Technology (Digital Twins) in an organization.

Explore how PARROT could take advantage of the Digital Twins technology trend.

- PEC 3.- Analysis of the application of Conversational Intelligence Technology in an organization.

Analyze what possibilities of applying Conversational Intelligence such as ChatGPT to the manufacturing sector. And discuss what are the ethical concerns of using conversational intelligence like ChatGPT.

- PEC 4.- Analysis of the application of Hyperautomation and Process Mining in an organization.

Analyze how PARROT could carry out different initiatives to improve operational processes by applying hyperautomation, through Robotic Process Automation technology or Business Process Management Workflow Engines or Process Mining technologies
Get Celonis certified through the 10-hour Process Mining Fundamentals course.

- PEC 5.- Analysis of the application of the Metaverse in an organization.

Analyze how PARROT could take advantage of the technological trend of the Metaverse.",
UOC_Spain,5.599,"<h2>UOC_Spain 05.599</h2><h2>title</h2>Functional management of IS/IT services<h2>summary</h2>This subject presents an environment that guarantees the support of IS/IT services and infrastructure in the organization, for the achievement of corporate strategies and objectives. It treats the management of IS/IT services as a set of processes and functions, provided or managed from an IT department. There are references that are useful guides in the management of these services such as ITIL, COBIT, CMMi.<h2>content</h2>Module 1. Introduction to IS/IT services.

1. IS/IT services in organizations
2. Introduction to the management of the IS/IT department

Module 2. The IS/IT department

1. Governance of the IS/IT department
2. Functional area: the IS/IT department
3. Particular organizational differences according to type of company

Module 3. Construction of IS/IT services

1. Management of the IS/IT service portfolio
2. Design and transition of services
3. Evolution and improvement of services. change management
4. Financial management and costs of services

Module 4: Provision of IS/IT services

1. Customer Service Center
2. Service requests
3. Shipping management
4. Availability and continuity of services
5. Demand and capacity management

Module 5: IS/IT Service Operations

1. Technological environment
2. Incident management
3. Configuration management
4. Security management

ITIL Module: An Introduction

1. Context and precedents
2. Some key ideas
3. Changing orientation of ITIL versions
4. The new ITIL 4 model",Functional management of IS/IT services,"This subject presents an environment that guarantees the support of IS/IT services and infrastructure in the organization, for the achievement of corporate strategies and objectives. It treats the management of IS/IT services as a set of processes and functions, provided or managed from an IT department. There are references that are useful guides in the management of these services such as ITIL, COBIT, CMMi.","Module 1. Introduction to IS/IT services.

1. IS/IT services in organizations
2. Introduction to the management of the IS/IT department

Module 2. The IS/IT department

1. Governance of the IS/IT department
2. Functional area: the IS/IT department
3. Particular organizational differences according to type of company

Module 3. Construction of IS/IT services

1. Management of the IS/IT service portfolio
2. Design and transition of services
3. Evolution and improvement of services. change management
4. Financial management and costs of services

Module 4: Provision of IS/IT services

1. Customer Service Center
2. Service requests
3. Shipping management
4. Availability and continuity of services
5. Demand and capacity management

Module 5: IS/IT Service Operations

1. Technological environment
2. Incident management
3. Configuration management
4. Security management

ITIL Module: An Introduction

1. Context and precedents
2. Some key ideas
3. Changing orientation of ITIL versions
4. The new ITIL 4 model",
UOC_Spain,5.6,"<h2>UOC_Spain 05.600</h2><h2>title</h2>Planning and strategic use of IS<h2>summary</h2>The mission of this course is to introduce students of Computer Engineering and other careers to the basics to understand the strategic uses of technology in organizations and the management and strategic planning of information systems. In increasingly complex environments, information and technology management represents a key aspect for the success and proper functioning of any type of organization, whether private companies or public administrations.

This is a relatively new discipline, both in academic theory and research, and in professional practice. The concept of CIO (the chief executive officer responsible for company information and technology) appeared in the early 1980s and the Association for Information Systems (AIS) was established in 1994.

Information systems management involves the design, effective delivery, use, and impact of information technology within organizations and on society. In the words of Keen (1987), the main focus of this course is the improvement of management design and practice (""management""), in its broadest sense; After all, ""IT management is all about management"" (Austin & Nolan, 2010).

The above definitions describe the hybrid nature of this topic. Technology is not an artifact outside of its use in companies, organizations and human beings. Information systems are not only design, programming or architecture, but above all their effective implementation. And its management is not just about tactics and techniques (improving the organization and processes of the IT department), but about strategy (the relationship with the business strategy and obtaining competitive advantages). For this reason, when we say ""strategic management"", we want to emphasize the more proactive and transformative role that information and technologies have for the company and the need to align information and technology systems with the strategy of the company as a whole. In addition, the volume and relevance of IT spending is increasingly on the agenda of CEOs and the steering committee of companies and organizations.

This course is designed to provide students of the Bachelor's in Computer Engineering and other programs with an introductory overview of the issues currently facing business and technology and the relationship between the two and, in particular, the role of the chief executive officer responsible for systems. and technologies:

What are the main strategic decisions in information systems and how should they be considered and adopted?
How should ICT be directed so that they are correctly aligned with the global business strategy?
How can you ensure more productive relationships between IT departments and other departments and business units?
What are the main contributions of information systems to support, transform and create new products, processes and even businesses?
How information and knowledge management is transforming the way of doing business and the role of IT?
How can IT planning provide a framework and roadmap for meeting the company's mission and vision? How can it be implanted?
How can the IT organization be transformed with a strategic sense?

Additionally, currently there is talk of ""digital transformation"", the process by which organizations have to redesign their products and services, their work processes and their relationship with customers, suppliers, partners and staff due to the irruption of the internet, mobility, cloud and big data. The director of organization and information technology (CIO, or Chief Information Officer) assumes a new role as leader, or at least, prominent partner in this transformation and there is also a greater approach of users and business managers to technologies of the information.<h2>content</h2>The learning units are the following:


Module 1: Strategic Decisions in Information Systems and Technologies.

Module 2: Information Technologies and Business Strategy.

Module 3: Information Technologies and Business Processes.

Module 4: Information and Knowledge Management.

Module 5: Strategic Planning of Information Systems and Technologies.

Module 6: Transformation of the information systems management function.


We draw attention to the fact that some of these materials may be common to the subject of Strategic Management of Information Systems at the Master's level. At grade level, these competencies are worked on in a different way and with different levels of depth. The teaching guides that will accompany each module or other complementary materials will provide specific instructions on how to carry out an adequate follow-up of the subject.",Planning and strategic use of IS,"The mission of this course is to introduce students of Computer Engineering and other careers to the basics to understand the strategic uses of technology in organizations and the management and strategic planning of information systems. In increasingly complex environments, information and technology management represents a key aspect for the success and proper functioning of any type of organization, whether private companies or public administrations.

This is a relatively new discipline, both in academic theory and research, and in professional practice. The concept of CIO (the chief executive officer responsible for company information and technology) appeared in the early 1980s and the Association for Information Systems (AIS) was established in 1994.

Information systems management involves the design, effective delivery, use, and impact of information technology within organizations and on society. In the words of Keen (1987), the main focus of this course is the improvement of management design and practice (""management""), in its broadest sense; After all, ""IT management is all about management"" (Austin & Nolan, 2010).

The above definitions describe the hybrid nature of this topic. Technology is not an artifact outside of its use in companies, organizations and human beings. Information systems are not only design, programming or architecture, but above all their effective implementation. And its management is not just about tactics and techniques (improving the organization and processes of the IT department), but about strategy (the relationship with the business strategy and obtaining competitive advantages). For this reason, when we say ""strategic management"", we want to emphasize the more proactive and transformative role that information and technologies have for the company and the need to align information and technology systems with the strategy of the company as a whole. In addition, the volume and relevance of IT spending is increasingly on the agenda of CEOs and the steering committee of companies and organizations.

This course is designed to provide students of the Bachelor's in Computer Engineering and other programs with an introductory overview of the issues currently facing business and technology and the relationship between the two and, in particular, the role of the chief executive officer responsible for systems. and technologies:

What are the main strategic decisions in information systems and how should they be considered and adopted?
How should ICT be directed so that they are correctly aligned with the global business strategy?
How can you ensure more productive relationships between IT departments and other departments and business units?
What are the main contributions of information systems to support, transform and create new products, processes and even businesses?
How information and knowledge management is transforming the way of doing business and the role of IT?
How can IT planning provide a framework and roadmap for meeting the company's mission and vision? How can it be implanted?
How can the IT organization be transformed with a strategic sense?

Additionally, currently there is talk of ""digital transformation"", the process by which organizations have to redesign their products and services, their work processes and their relationship with customers, suppliers, partners and staff due to the irruption of the internet, mobility, cloud and big data. The director of organization and information technology (CIO, or Chief Information Officer) assumes a new role as leader, or at least, prominent partner in this transformation and there is also a greater approach of users and business managers to technologies of the information.","The learning units are the following:


Module 1: Strategic Decisions in Information Systems and Technologies.

Module 2: Information Technologies and Business Strategy.

Module 3: Information Technologies and Business Processes.

Module 4: Information and Knowledge Management.

Module 5: Strategic Planning of Information Systems and Technologies.

Module 6: Transformation of the information systems management function.


We draw attention to the fact that some of these materials may be common to the subject of Strategic Management of Information Systems at the Master's level. At grade level, these competencies are worked on in a different way and with different levels of depth. The teaching guides that will accompany each module or other complementary materials will provide specific instructions on how to carry out an adequate follow-up of the subject.",
UOC_Spain,5.601,"<h2>UOC_Spain 05.601</h2><h2>title</h2>Cryptography<h2>summary</h2>The main objective of the Cryptography course is to train students in the field of modern cryptography. This discipline is increasingly important in the world we live in due to the increasing value of information. On the one hand, cryptographic techniques are necessary to protect the security and privacy of users when using technology and communication networks. In particular, it is important to protect users from mass surveillance activities that can be carried out illegally not only by private companies but also by some government agencies operating outside of legal circuits. On the other hand, beyond the protection of users, companies and any entity that is related to or uses technology needs mechanisms that protect their digital assets, which can sometimes be all the assets of a company. Finally, the development of cryptography also allows the birth of new relationship paradigms between people such as the creation of new virtual currencies, cryptocurrencies, which do not depend on any centralized entity to function.

The subject wants to give a practical approach to cryptography, and that is why the subject is structured jointly based on both theoretical and practical content that is complemented by programming activities that allow us to know the real problems that arise in the implementation of cryptographic systems.<h2>content</h2>The contents of the subject are detailed below, grouping the different modules that make it up into thematic blocks:

Unit 1: Basic concepts

Basic terminology as well as the historical evolution of cryptography are studied. The most relevant historical cryptosystems are reviewed. The most relevant concepts of modular arithmetic are introduced to have a sufficient mathematical base to understand the cryptosystems and cryptographic protocols that are presented throughout the course. This block includes modules 1 and 2.

    Module 1: Introduction to cryptography
    Module 2: Mathematical Fundamentals

Unit 2: Shared Key Cryptography

The two large families of shared-key cryptosystems are studied: block cipher and flow cipher. For each family, its main properties are characterized and the most relevant cryptosystems are studied. On the other hand, hash functions are defined, focusing on their properties and applications and analyzing in depth one of its most relevant implementations: SHA256. This block includes modules 3 and 4.

    Module 3: Symmetric Key Cryptography
    Module 4: Hash functions

Unit 3: Public Key Ciphers

The characterization of the most important properties of public key cryptosystems is given, emphasizing topics such as key distribution, digital signatures, the combination between public key/symmetric key, as well as relevant aspects of the implementation of public key cryptography. . . Finally, the architecture and protocols associated with public key infrastructures (Public Key Infrastructure, PKI) are studied. This block includes modules 5 and 6.

    Module 5: Public Key Cryptography
    Module 6: Public Key Infrastructure (PKI)

Unit 4: Cryptographic protocols

The cryptographic primitives described throughout the course are put into practice for the development of cryptographic protocols, such as secret sharing, null-knowledge proofs, unconscious transfer, or secure multipart computing. This block includes module 7.

    Module 7: Cryptographic protocols",Cryptography,"The main objective of the Cryptography course is to train students in the field of modern cryptography. This discipline is increasingly important in the world we live in due to the increasing value of information. On the one hand, cryptographic techniques are necessary to protect the security and privacy of users when using technology and communication networks. In particular, it is important to protect users from mass surveillance activities that can be carried out illegally not only by private companies but also by some government agencies operating outside of legal circuits. On the other hand, beyond the protection of users, companies and any entity that is related to or uses technology needs mechanisms that protect their digital assets, which can sometimes be all the assets of a company. Finally, the development of cryptography also allows the birth of new relationship paradigms between people such as the creation of new virtual currencies, cryptocurrencies, which do not depend on any centralized entity to function.

The subject wants to give a practical approach to cryptography, and that is why the subject is structured jointly based on both theoretical and practical content that is complemented by programming activities that allow us to know the real problems that arise in the implementation of cryptographic systems.","The contents of the subject are detailed below, grouping the different modules that make it up into thematic blocks:

Unit 1: Basic concepts

Basic terminology as well as the historical evolution of cryptography are studied. The most relevant historical cryptosystems are reviewed. The most relevant concepts of modular arithmetic are introduced to have a sufficient mathematical base to understand the cryptosystems and cryptographic protocols that are presented throughout the course. This block includes modules 1 and 2.

    Module 1: Introduction to cryptography
    Module 2: Mathematical Fundamentals

Unit 2: Shared Key Cryptography

The two large families of shared-key cryptosystems are studied: block cipher and flow cipher. For each family, its main properties are characterized and the most relevant cryptosystems are studied. On the other hand, hash functions are defined, focusing on their properties and applications and analyzing in depth one of its most relevant implementations: SHA256. This block includes modules 3 and 4.

    Module 3: Symmetric Key Cryptography
    Module 4: Hash functions

Unit 3: Public Key Ciphers

The characterization of the most important properties of public key cryptosystems is given, emphasizing topics such as key distribution, digital signatures, the combination between public key/symmetric key, as well as relevant aspects of the implementation of public key cryptography. . . Finally, the architecture and protocols associated with public key infrastructures (Public Key Infrastructure, PKI) are studied. This block includes modules 5 and 6.

    Module 5: Public Key Cryptography
    Module 6: Public Key Infrastructure (PKI)

Unit 4: Cryptographic protocols

The cryptographic primitives described throughout the course are put into practice for the development of cryptographic protocols, such as secret sharing, null-knowledge proofs, unconscious transfer, or secure multipart computing. This block includes module 7.

    Module 7: Cryptographic protocols",
UOC_Spain,5.604,"<h2>UOC_Spain 05.604</h2><h2>title</h2>Electronic commerce<h2>summary</h2>The Electronic Commerce subject aims to train students in this new discipline born as a result of widely used communication networks, such as the Internet. Despite the wide range of disciplines that are often included in the words ""e-commerce"" (new economics, marketing, law, social behavior, etc.), it is important to note that since we are dealing with a computer engineering subject, its approach is eminently technological. In any case, the fact that its focus is technological does not mean that it includes different disciplines within this aspect. Thus, we can identify three large areas of knowledge that we will focus on in this course.

On the one hand we find the databases. In electronic commerce systems, the correct design and management of databases is extremely important since one of the characteristics of electronic commerce is its high degree of automation, more than in other areas. This makes databases play a very important role.

Another relevant point in electronic commerce is presented by payment systems. As is well known, one of the reluctances that electronic commerce must overcome is distrust and therefore special emphasis must be placed on security.

Finally, there is a part that is often forgotten, perhaps because it affects us little, or rather, it affects us positively, and that is the problem presented by electronic commerce of digital products. The ease of copying together with the precision of these implies that piracy becomes an inherent problem with this support. This problem, which often slows down the sale and distribution of products through electronic commerce, currently generates significant research efforts. We will see different possibilities to end piracy and what problems they present.

The subject wants to be taught with a very practical approach, and that is why two compulsory practices have been included in the subject, in addition to the four PEC. In the first practice we will work with the basic web development technologies to launch an electronic commerce. On the other hand, in the second practice we will implement an electronic commerce system through a specialized content management tool (CMS) for electronic commerce: Prestashop.<h2>content</h2>The specific contents of the subject that are considered most important are detailed below for each of the modules:

Module 1 - Introduction to electronic commerce (0.5 credits)

Basic concepts and terminology of electronic commerce.
The EDI standard.
Legal aspects of electronic commerce.

Module 2 - Security in electronic commerce (1 credit)

Basic concepts of cryptography and information security.
Specific concepts of public key cryptography.
Security in electronic commerce: data, payments and products sold.
Module 3 - Information Management (0.5 credits)

Structure of a database for electronic commerce.
Data analysis of an electronic commerce system.

Module 4 - Electronic payment systems (1 credit)

card payments
virtual wallet systems
Payments via SMS
digital money
Module 5 - Electronic copyright protection systems (1 credit)

Basic concepts of copyright protection techniques for content in digital format.
Description of a still image marking system.
Description of a digital video marking system.",Electronic commerce,"The Electronic Commerce subject aims to train students in this new discipline born as a result of widely used communication networks, such as the Internet. Despite the wide range of disciplines that are often included in the words ""e-commerce"" (new economics, marketing, law, social behavior, etc.), it is important to note that since we are dealing with a computer engineering subject, its approach is eminently technological. In any case, the fact that its focus is technological does not mean that it includes different disciplines within this aspect. Thus, we can identify three large areas of knowledge that we will focus on in this course.

On the one hand we find the databases. In electronic commerce systems, the correct design and management of databases is extremely important since one of the characteristics of electronic commerce is its high degree of automation, more than in other areas. This makes databases play a very important role.

Another relevant point in electronic commerce is presented by payment systems. As is well known, one of the reluctances that electronic commerce must overcome is distrust and therefore special emphasis must be placed on security.

Finally, there is a part that is often forgotten, perhaps because it affects us little, or rather, it affects us positively, and that is the problem presented by electronic commerce of digital products. The ease of copying together with the precision of these implies that piracy becomes an inherent problem with this support. This problem, which often slows down the sale and distribution of products through electronic commerce, currently generates significant research efforts. We will see different possibilities to end piracy and what problems they present.

The subject wants to be taught with a very practical approach, and that is why two compulsory practices have been included in the subject, in addition to the four PEC. In the first practice we will work with the basic web development technologies to launch an electronic commerce. On the other hand, in the second practice we will implement an electronic commerce system through a specialized content management tool (CMS) for electronic commerce: Prestashop.","The specific contents of the subject that are considered most important are detailed below for each of the modules:

Module 1 - Introduction to electronic commerce (0.5 credits)

Basic concepts and terminology of electronic commerce.
The EDI standard.
Legal aspects of electronic commerce.

Module 2 - Security in electronic commerce (1 credit)

Basic concepts of cryptography and information security.
Specific concepts of public key cryptography.
Security in electronic commerce: data, payments and products sold.
Module 3 - Information Management (0.5 credits)

Structure of a database for electronic commerce.
Data analysis of an electronic commerce system.

Module 4 - Electronic payment systems (1 credit)

card payments
virtual wallet systems
Payments via SMS
digital money
Module 5 - Electronic copyright protection systems (1 credit)

Basic concepts of copyright protection techniques for content in digital format.
Description of a still image marking system.
Description of a digital video marking system.",
UOC_Spain,5.607,"<h2>UOC_Spain 05.607</h2><h2>title</h2>Databases architecture<h2>summary</h2>Database Architecture is an optional subject, proposed within the Information Technologies itinerary, belonging to the Degree in Computer Engineering. The subject delves into the knowledge acquired in previous compulsory subjects on databases, such as the Use of Databases and Database Design.

The course begins by studying the main drawbacks of the relational model and presents some alternative data models. Next, the main problems related to the implementation of database management systems (DBMS) are analyzed, both in centralized and distributed environments. Finally, fundamental concepts on the design of distributed databases are introduced.

The Degree in Computer Engineering has as a transversal competence to acquire the learning of foreign languages ​​(specifically English). That is why some subjects have the learning material in English. This is the case of Database Architecture, given its specific characteristics (specialization subject with a model based on continuous evaluation).<h2>content</h2>The objective of this course, as explained in the first module, is to first introduce the architecture of centralized Database Management Systems (DBMS), to evolve towards distributed systems, identifying the main differences.

In the second module, the limitations of the relational model will be presented to introduce the use of objects and semi-structured data, giving special relevance to the Object-Relational and XML extensions. First, the main features of standard SQL will be covered (for example, large objects, user-defined types, inheritance, references, and multivalued attributes). Next, XML standards such as XSchema, XPath, and XQuery will be covered.

Distributed databases will be introduced in the third module. First, a classification of distributed databases will be explained. Next, depending on whether the distribution is desired or imposed, it will be explained how to approach the design or the integration. The design is related to the sharding of the databases (for example, horizontal, vertical, or hybrid), while the integration can be implemented as a global view, local view, peer-to-peer, or based on containers or interfaces.

Module four addresses aspects of computer security in databases, addressing the three key aspects of this concept: confidentiality, integrity and availability. Aspects such as access control, application access, vulnerabilities, inference mechanisms and auditing will be covered. Emphasis will be placed on different access control systems, as well as role-based access. Aspects related to advanced data management systems will also be worked on and aspects of access control for XML will be dealt with.

Within the fifth module, the concept of transaction explained in previous topics will be deepened. Based on this concept, a distinction will be made between ACID and BASE transactions. Multilevel reservations, the multiversion mechanism and time stamping will be explained. The first two mechanisms have been chosen for their wide use in commercial DBMSs, while the last one has been chosen for its wide use in distributed environments.

The sixth module introduces concepts related to data recovery, which in turn are related to transactions.

Finally, in the seventh module, concepts related to query optimization in distributed environments will be explained. First of all, we will analyze the syntactic optimization to continue working with the physical optimization. The concepts of intra and interparallelism will also be worked on.",Databases architecture,"Database Architecture is an optional subject, proposed within the Information Technologies itinerary, belonging to the Degree in Computer Engineering. The subject delves into the knowledge acquired in previous compulsory subjects on databases, such as the Use of Databases and Database Design.

The course begins by studying the main drawbacks of the relational model and presents some alternative data models. Next, the main problems related to the implementation of database management systems (DBMS) are analyzed, both in centralized and distributed environments. Finally, fundamental concepts on the design of distributed databases are introduced.

The Degree in Computer Engineering has as a transversal competence to acquire the learning of foreign languages ​​(specifically English). That is why some subjects have the learning material in English. This is the case of Database Architecture, given its specific characteristics (specialization subject with a model based on continuous evaluation).","The objective of this course, as explained in the first module, is to first introduce the architecture of centralized Database Management Systems (DBMS), to evolve towards distributed systems, identifying the main differences.

In the second module, the limitations of the relational model will be presented to introduce the use of objects and semi-structured data, giving special relevance to the Object-Relational and XML extensions. First, the main features of standard SQL will be covered (for example, large objects, user-defined types, inheritance, references, and multivalued attributes). Next, XML standards such as XSchema, XPath, and XQuery will be covered.

Distributed databases will be introduced in the third module. First, a classification of distributed databases will be explained. Next, depending on whether the distribution is desired or imposed, it will be explained how to approach the design or the integration. The design is related to the sharding of the databases (for example, horizontal, vertical, or hybrid), while the integration can be implemented as a global view, local view, peer-to-peer, or based on containers or interfaces.

Module four addresses aspects of computer security in databases, addressing the three key aspects of this concept: confidentiality, integrity and availability. Aspects such as access control, application access, vulnerabilities, inference mechanisms and auditing will be covered. Emphasis will be placed on different access control systems, as well as role-based access. Aspects related to advanced data management systems will also be worked on and aspects of access control for XML will be dealt with.

Within the fifth module, the concept of transaction explained in previous topics will be deepened. Based on this concept, a distinction will be made between ACID and BASE transactions. Multilevel reservations, the multiversion mechanism and time stamping will be explained. The first two mechanisms have been chosen for their wide use in commercial DBMSs, while the last one has been chosen for its wide use in distributed environments.

The sixth module introduces concepts related to data recovery, which in turn are related to transactions.

Finally, in the seventh module, concepts related to query optimization in distributed environments will be explained. First of all, we will analyze the syntactic optimization to continue working with the physical optimization. The concepts of intra and interparallelism will also be worked on.",
UOC_Spain,5.613,"<h2>UOC_Spain 05.613</h2><h2>title</h2>Data structures design<h2>summary</h2>In this subject the different strategies of data representation in a computer and the criteria to evaluate them are studied. Depending on the type of treatment that has to be done with this information (size, access criteria, etc.), it will be possible to select the strategy that offers an optimal balance between memory consumption and manipulation time.

This course is fundamental within the field of programming, since the proper use of data structures is critical in any application that handles large volumes of information or that has very strict efficiency requirements.

Previous courses in the field of programming have already introduced some basic data structures, such as lists, stacks, queues, or trees. This subject presents the concept of abstract data type (ATD) as a general model to describe a data structure and study its efficiency. Finally, the core of the course consists of learning to use each data structure properly and knowing how to select the most appropriate data structure for each situation.<h2>content</h2>The subject is structured in eight modules (module 8 of the subjects is not studied):

1. Abstract data types
containers
contract design
Developing a Sample Collection
Generic or parametric types
Library of thematic collections
Presentation of the rest of the modules
Study of the concept of TAD and aspects related to its definition and implementation in classes through a hierarchy.

2. Algorithmic complexity
Introduction to algorithmic complexity
Asymptotic notation for algorithmic complexity
Algorithmic complexity of abstract data types
Description of the methods used to compare the cost of different programs in terms of execution times or memory consumption.

3. Sequential containers
batteries
tails
chained representations
liza
Vector representations: resizing
Sequential Containers in the Java Collections Framework
Study of collections of objects with sequential access (stacks, queues, lists).

4. trees
General and binary trees. Definitions and related concepts
recursion
general trees
binary trees
excursions
An example file system
Presentation of data structures used to represent hierarchical relationships and introduction of the concept of recursion.

5. Priority queues
The priority queue concept
priority queue operation
Priority queue implementations
Priority queues in JDK libraries
Heap Sort: The Heapsort Algorithm
Usage example: Huffman algorithm
Study of the design and implementation of collections where the order of access to the elements depends on their priority.

6. The TAD table
Presentation of the TAD Table
Scatter implementation of the TAD Table
The Joint TAD
Application example: a symbol table for a modular language
Tables and sets in the Java Collections Framework
Study of the concept of dispersion, presentation of the TAD table and the strategies for its implementation.
7. Look for trees
search trees
Implementation of ordered collections with binary search trees
Multipath trees and B-trees
Search Trees in the Java Collections Framework
Deepening of the tree concept and its applications to represent ordered collections.
8. Graphics

(This module is not studied)

The concept of graph.
The abstract data type Graph
Java interfaces for directed and undirected graphs
Graph Implementation
Example of use: TAD Academy
Review of the concept of graphs and description of strategies to implement different types of graphs (directed or undirected, labeled or unlabeled,...).
9. Collection Libraries
Design of new TADs using a library of collections
Collection Library Design
Libraries of existing collections
Analysis of the design of new TADs from other existing ones. Study of the considerations that affect the design of collection libraries and presentation of some existing libraries (Java Collections Framework, Java Data Structure Library, ...).",Data structures design,"In this subject the different strategies of data representation in a computer and the criteria to evaluate them are studied. Depending on the type of treatment that has to be done with this information (size, access criteria, etc.), it will be possible to select the strategy that offers an optimal balance between memory consumption and manipulation time.

This course is fundamental within the field of programming, since the proper use of data structures is critical in any application that handles large volumes of information or that has very strict efficiency requirements.

Previous courses in the field of programming have already introduced some basic data structures, such as lists, stacks, queues, or trees. This subject presents the concept of abstract data type (ATD) as a general model to describe a data structure and study its efficiency. Finally, the core of the course consists of learning to use each data structure properly and knowing how to select the most appropriate data structure for each situation.","The subject is structured in eight modules (module 8 of the subjects is not studied):

1. Abstract data types
containers
contract design
Developing a Sample Collection
Generic or parametric types
Library of thematic collections
Presentation of the rest of the modules
Study of the concept of TAD and aspects related to its definition and implementation in classes through a hierarchy.

2. Algorithmic complexity
Introduction to algorithmic complexity
Asymptotic notation for algorithmic complexity
Algorithmic complexity of abstract data types
Description of the methods used to compare the cost of different programs in terms of execution times or memory consumption.

3. Sequential containers
batteries
tails
chained representations
liza
Vector representations: resizing
Sequential Containers in the Java Collections Framework
Study of collections of objects with sequential access (stacks, queues, lists).

4. trees
General and binary trees. Definitions and related concepts
recursion
general trees
binary trees
excursions
An example file system
Presentation of data structures used to represent hierarchical relationships and introduction of the concept of recursion.

5. Priority queues
The priority queue concept
priority queue operation
Priority queue implementations
Priority queues in JDK libraries
Heap Sort: The Heapsort Algorithm
Usage example: Huffman algorithm
Study of the design and implementation of collections where the order of access to the elements depends on their priority.

6. The TAD table
Presentation of the TAD Table
Scatter implementation of the TAD Table
The Joint TAD
Application example: a symbol table for a modular language
Tables and sets in the Java Collections Framework
Study of the concept of dispersion, presentation of the TAD table and the strategies for its implementation.
7. Look for trees
search trees
Implementation of ordered collections with binary search trees
Multipath trees and B-trees
Search Trees in the Java Collections Framework
Deepening of the tree concept and its applications to represent ordered collections.
8. Graphics

(This module is not studied)

The concept of graph.
The abstract data type Graph
Java interfaces for directed and undirected graphs
Graph Implementation
Example of use: TAD Academy
Review of the concept of graphs and description of strategies to implement different types of graphs (directed or undirected, labeled or unlabeled,...).
9. Collection Libraries
Design of new TADs using a library of collections
Collection Library Design
Libraries of existing collections
Analysis of the design of new TADs from other existing ones. Study of the considerations that affect the design of collection libraries and presentation of some existing libraries (Java Collections Framework, Java Data Structure Library, ...).",
UOC_Spain,5.614,"<h2>UOC_Spain 05.614</h2><h2>title</h2>Introduction to mathematics for engineering<h2>summary</h2>Mastering the contents and mathematical methodology is essential to take any scientific degree. Therefore, it is necessary to understand its basic techniques and concepts (many times already covered in secondary and high school) before addressing the subjects of the career that you want to take.

In this course, the basic techniques and concepts of linear algebra and calculus will be provided, to guarantee adequate preparation to pass many of the subjects of the degree.<h2>content</h2>MODULE 1: ALGEBRA BLOCK

Topic 1: Numbers (0.5 credits)

Topic 2: Equations (0.5 credits)

Topic 3: Systems of equations (0.5 credits)

Topic 4: Polynomials (0.5 credits)

Topic 5: Matrices (0.5 credits)

 

MODULE 2: ANALYSIS BLOCK

Topic 6: Polynomial functions (0.5 credits)

Topic 7: Trigonometric functions (0.5 credits)

Topic 8: Exponential and logarithmic functions (0.5 credits)

Topic 9: Continuity of functions (0.5 credits)

Topic 10: Derivation of functions (0.75 credits)

Topic 11: Integration of functions (0.75 credits)",Introduction to mathematics for engineering,"Mastering the contents and mathematical methodology is essential to take any scientific degree. Therefore, it is necessary to understand its basic techniques and concepts (many times already covered in secondary and high school) before addressing the subjects of the career that you want to take.

In this course, the basic techniques and concepts of linear algebra and calculus will be provided, to guarantee adequate preparation to pass many of the subjects of the degree.","MODULE 1: ALGEBRA BLOCK

Topic 1: Numbers (0.5 credits)

Topic 2: Equations (0.5 credits)

Topic 3: Systems of equations (0.5 credits)

Topic 4: Polynomials (0.5 credits)

Topic 5: Matrices (0.5 credits)

 

MODULE 2: ANALYSIS BLOCK

Topic 6: Polynomial functions (0.5 credits)

Topic 7: Trigonometric functions (0.5 credits)

Topic 8: Exponential and logarithmic functions (0.5 credits)

Topic 9: Continuity of functions (0.5 credits)

Topic 10: Derivation of functions (0.75 credits)

Topic 11: Integration of functions (0.75 credits)",
UOC_Spain,5.672,"<h2>UOC_Spain 05.672</h2><h2>title</h2>Business practice<h2>summary</h2>The objective of the Practices is for the student to learn to work on a day-to-day basis in a company and apply certain skills acquired in the Computer Engineering degree, both transversal and specific. The internships in companies will be organized from the UOC, with a trainee professor, and from the company with a tutor who will guide and monitor the student.

The internships will be carried out mainly online within the framework of the UOC's virtual campus. In some cases, depending on the circumstances of residence and availability of the student, they may have a face-to-face component.

The tools to develop the practices will be mainly those provided by the studies, being able to receive from the company some other specific tool to develop the work. The study load for the student will be 12 ETCS, equivalent to about 300 hours of work in the company.<h2>content</h2>The content of the internships will be marked by the type of company and the projects that are being carried out at the time the student does the internship.",Business practice,"The objective of the Practices is for the student to learn to work on a day-to-day basis in a company and apply certain skills acquired in the Computer Engineering degree, both transversal and specific. The internships in companies will be organized from the UOC, with a trainee professor, and from the company with a tutor who will guide and monitor the student.

The internships will be carried out mainly online within the framework of the UOC's virtual campus. In some cases, depending on the circumstances of residence and availability of the student, they may have a face-to-face component.

The tools to develop the practices will be mainly those provided by the studies, being able to receive from the company some other specific tool to develop the work. The study load for the student will be 12 ETCS, equivalent to about 300 hours of work in the company.",The content of the internships will be marked by the type of company and the projects that are being carried out at the time the student does the internship.,
UOC_Spain,22.4,"<h2>UOC_Spain 22.400</h2><h2>title</h2>Computational thinking<h2>summary</h2>This course is designed to prepare us to start in the world of programming, and to know and understand the basic concepts that will allow us to turn a specific problem into a small program that solves it.

In order to do so, we will first learn to think in such a way that we can identify what kinds of problems can be solved using a computer running through a sequence of steps designed to solve the proposed problem. That is, through what is known as computational thinking, we will know the abstract concepts that determine the appropriate reasoning to be able to solve problems through programs.

Next, we'll review programming languages, which have evolved very rapidly since the popularization of personal computers, and we'll also learn about other important elements of programming context and vocabulary, such as what a computer is and what its function is. basic function. .

Finally, we will see how to put it into practice by developing a small program in a guided way, introducing the different concepts that make up what is known as structured programming. To do this, we will use the Processing programming language, which was created with the aim of encouraging creativity and learning to program in a simple and attractive way.<h2>content</h2>The contents of the course are grouped into two blocks:

Computational thinking, or how we should think to solve a problem using a computer. In addition, the historical background, to know the context and basic vocabulary of the field of programming and what programming languages ​​are like.

Step-by-step guided programming project to create a first program using the Processing language and letting our creativity fly.",Computational thinking,"This course is designed to prepare us to start in the world of programming, and to know and understand the basic concepts that will allow us to turn a specific problem into a small program that solves it.

In order to do so, we will first learn to think in such a way that we can identify what kinds of problems can be solved using a computer running through a sequence of steps designed to solve the proposed problem. That is, through what is known as computational thinking, we will know the abstract concepts that determine the appropriate reasoning to be able to solve problems through programs.

Next, we'll review programming languages, which have evolved very rapidly since the popularization of personal computers, and we'll also learn about other important elements of programming context and vocabulary, such as what a computer is and what its function is. basic function. .

Finally, we will see how to put it into practice by developing a small program in a guided way, introducing the different concepts that make up what is known as structured programming. To do this, we will use the Processing programming language, which was created with the aim of encouraging creativity and learning to program in a simple and attractive way.","The contents of the course are grouped into two blocks:

Computational thinking, or how we should think to solve a problem using a computer. In addition, the historical background, to know the context and basic vocabulary of the field of programming and what programming languages ​​are like.

Step-by-step guided programming project to create a first program using the Processing language and letting our creativity fly.",
VirginiaTech_USA,CS3704,"<h2>VirginiaTech_USA CS3704</h2><h2>title</h2>Intermediate Software Design and Engineering<h2>content</h2>Explores the principles of software design in detail, with an emphasis on software engineering aspects. Includes exposure of software lifecycle activities including design, coding, testing, debugging, and maintenance, highlighting how design affects these activities. Peer reviews, designing for software reuse, CASE tools, and writing software to specifications are also covered.",Intermediate Software Design and Engineering,,"Explores the principles of software design in detail, with an emphasis on software engineering aspects. Includes exposure of software lifecycle activities including design, coding, testing, debugging, and maintenance, highlighting how design affects these activities. Peer reviews, designing for software reuse, CASE tools, and writing software to specifications are also covered.",
VirginiaTech_USA,CS3714,"<h2>VirginiaTech_USA CS3714</h2><h2>title</h2>Mobile Software Development<h2>content</h2>Technologies and concepts underlying software development for mobile devices (handheld computers). Mobile computing platforms, including architecture, operating system, and programming environment. Software design patterns and structuring for mobile applications. Network-centric mobile software development. Data persistence. Programming for mobile device components such as cameras, recorders, accelerometer, gyroscope and antennas. Location-aware software development.",Mobile Software Development,,"Technologies and concepts underlying software development for mobile devices (handheld computers). Mobile computing platforms, including architecture, operating system, and programming environment. Software design patterns and structuring for mobile applications. Network-centric mobile software development. Data persistence. Programming for mobile device components such as cameras, recorders, accelerometer, gyroscope and antennas. Location-aware software development.",
VirginiaTech_USA,CS3724,"<h2>VirginiaTech_USA CS3724</h2><h2>title</h2>Introduction to Human-Computer Interaction<h2>content</h2>Survey of human-computer interaction concepts, theory, and practice. Basic components of human-computer interaction. Interdisciplinary underpinnings. Informed and critical evaluation of computer-based technology. User-oriented perspective, rather than system-oriented, with two thrusts: human (cognitive, social) and technological (input/output, interactions styles, devices). Design guidelines, evaluation methods, participatory design, communication between users and system developers.",Introduction to Human-Computer Interaction,,"Survey of human-computer interaction concepts, theory, and practice. Basic components of human-computer interaction. Interdisciplinary underpinnings. Informed and critical evaluation of computer-based technology. User-oriented perspective, rather than system-oriented, with two thrusts: human (cognitive, social) and technological (input/output, interactions styles, devices). Design guidelines, evaluation methods, participatory design, communication between users and system developers.",
VirginiaTech_USA,CS3744,"<h2>VirginiaTech_USA CS3744</h2><h2>title</h2>Introduction to GUI Programming and Graphics<h2>content</h2>Design and implementation of object-oriented graphical user interfaces (GUI) and two-dimensional computer graphics systems. Implementation methodologies including callbacks, handlers, event listeners, design patterns, layout managers, and architectural models. Mathematical foundations of computer graphics applied to fundamental algorithms for clipping, scan conversion, affine and convex linear transformations, projections, viewing, structuring, and modeling.",Introduction to GUI Programming and Graphics,,"Design and implementation of object-oriented graphical user interfaces (GUI) and two-dimensional computer graphics systems. Implementation methodologies including callbacks, handlers, event listeners, design patterns, layout managers, and architectural models. Mathematical foundations of computer graphics applied to fundamental algorithms for clipping, scan conversion, affine and convex linear transformations, projections, viewing, structuring, and modeling.",
VirginiaTech_USA,CS3754,"<h2>VirginiaTech_USA CS3754</h2><h2>title</h2>Cloud Software Development<h2>content</h2>Fundamentals of cloud software development, including design patterns, application programming interfaces, and underlying middleware technologies. Development of distributed multi-tiered enterprise software applications that run on a server computer and are accessed using a web browser over the Internet on a network-connected computer such as desktop, laptop, or handheld computer (tablet, smartphone, or mobile device. A grade of C or better is required in prerequisite.",Cloud Software Development,,"Fundamentals of cloud software development, including design patterns, application programming interfaces, and underlying middleware technologies. Development of distributed multi-tiered enterprise software applications that run on a server computer and are accessed using a web browser over the Internet on a network-connected computer such as desktop, laptop, or handheld computer (tablet, smartphone, or mobile device. A grade of C or better is required in prerequisite.",
VirginiaTech_USA,CS3824,<h2>VirginiaTech_USA CS3824</h2><h2>title</h2>Introduction to Computational Biology and Bioinformatics<h2>content</h2>Introduction to computational biology and bioinformatics (CBB) through hands-on learning experiences. Emphasis on problem solving in CBB. Breadth of topics covering structural bioinformatics; modeling and simulation of biological networks; computational sequence analysis; algorithms for reconstructing phylogenies; computational systems biology; and data mining algorithms.,Introduction to Computational Biology and Bioinformatics,,Introduction to computational biology and bioinformatics (CBB) through hands-on learning experiences. Emphasis on problem solving in CBB. Breadth of topics covering structural bioinformatics; modeling and simulation of biological networks; computational sequence analysis; algorithms for reconstructing phylogenies; computational systems biology; and data mining algorithms.,
VirginiaTech_USA,CS4104,<h2>VirginiaTech_USA CS4104</h2><h2>title</h2>Data and Algorithm Analysis<h2>content</h2>Data structures and algorithms from an analytical perspective. Theoretical analysis of algorithm efficiency. Comparing algorithms with respect to space and run-time requirements. Analytical methods for describing theoretical and practical bounds on performance. Constraints affecting problem solvability.,Data and Algorithm Analysis,,Data structures and algorithms from an analytical perspective. Theoretical analysis of algorithm efficiency. Comparing algorithms with respect to space and run-time requirements. Analytical methods for describing theoretical and practical bounds on performance. Constraints affecting problem solvability.,
VirginiaTech_USA,CS4114,"<h2>VirginiaTech_USA CS4114</h2><h2>title</h2>Introduction to Formal Languages and Automata Theory<h2>content</h2>The course presents a study of formal languages and the correspondence between language classes and the automata that recognize them. Formal definitions of grammars and acceptors, deterministic and nondeterministic systems, grammar ambiguity, finite state and push-down automata, and normal forms will be discussed.",Introduction to Formal Languages and Automata Theory,,"The course presents a study of formal languages and the correspondence between language classes and the automata that recognize them. Formal definitions of grammars and acceptors, deterministic and nondeterministic systems, grammar ambiguity, finite state and push-down automata, and normal forms will be discussed.",
VirginiaTech_USA,CS4124,"<h2>VirginiaTech_USA CS4124</h2><h2>title</h2>Theory of Computation<h2>content</h2>Theoretical analysis of the computational process; fundamental concepts such as abstract programs, classes of computational machines and their equivalence, recursive function theory, unsolvable problems, Church's thesis, Kleene's theorem, program equivalence, and generability, acceptability, decidability will be covered.",Theory of Computation,,"Theoretical analysis of the computational process; fundamental concepts such as abstract programs, classes of computational machines and their equivalence, recursive function theory, unsolvable problems, Church's thesis, Kleene's theorem, program equivalence, and generability, acceptability, decidability will be covered.",
VirginiaTech_USA,CS4134,"<h2>VirginiaTech_USA CS4134</h2><h2>title</h2>Quantum Computation and Information Processing<h2>content</h2>Quantum states and quantum phenomena. Quantum communication concepts such as superdense coding, teleportation, and complexity. Classical and quantum circuits and gate sets for computation. Quantum algorithms and comparison to classical algorithms. Quantum computational complexity theory and complexity classes. Quantum information concepts such as density operators, measurements, and quantum channels. Error correction, the stabilizer formalism, and fault-tolerance. The adiabatic theorem and adiabatic quantum computation. Entanglement and entanglement measures.",Quantum Computation and Information Processing,,"Quantum states and quantum phenomena. Quantum communication concepts such as superdense coding, teleportation, and complexity. Classical and quantum circuits and gate sets for computation. Quantum algorithms and comparison to classical algorithms. Quantum computational complexity theory and complexity classes. Quantum information concepts such as density operators, measurements, and quantum channels. Error correction, the stabilizer formalism, and fault-tolerance. The adiabatic theorem and adiabatic quantum computation. Entanglement and entanglement measures.",
VirginiaTech_USA,CS4144,"<h2>VirginiaTech_USA CS4144</h2><h2>title</h2>Competitive Problem Solving II<h2>content</h2>Deeper treatment of advanced algorithms, data structures, and implementation techniques, taught in a setting that combines collaborative practice with competitive exercise. Students practice to solve problems using a computer, which are judged by automated evaluation software for correctness and efficiency. Practice with advanced searching and graph algorithms, advanced dynamic programming, linear programming techniques, computational geometry, and numerical algorithms. Problems are drawn from multiple areas in computer science. Macro- and micro optimization techniques to improve efficiency are emphasized.",Competitive Problem Solving II,,"Deeper treatment of advanced algorithms, data structures, and implementation techniques, taught in a setting that combines collaborative practice with competitive exercise. Students practice to solve problems using a computer, which are judged by automated evaluation software for correctness and efficiency. Practice with advanced searching and graph algorithms, advanced dynamic programming, linear programming techniques, computational geometry, and numerical algorithms. Problems are drawn from multiple areas in computer science. Macro- and micro optimization techniques to improve efficiency are emphasized.",
VirginiaTech_USA,CS4234,"<h2>VirginiaTech_USA CS4234</h2><h2>title</h2>Parallel Computation<h2>content</h2>Survey of parallel computer architectures, models of parallel computation, and interconnection networks. Parallel algorithm development and analysis. Programming paradigms and languages for parallel computation. Example applications. Performance measurement and evaluation.",Parallel Computation,,"Survey of parallel computer architectures, models of parallel computation, and interconnection networks. Parallel algorithm development and analysis. Programming paradigms and languages for parallel computation. Example applications. Performance measurement and evaluation.",
VirginiaTech_USA,CS4254,"<h2>VirginiaTech_USA CS4254</h2><h2>title</h2>Computer Network Architecture & Programming<h2>content</h2>Introduction to computer network architecture, and methods for programming network services and applications (e.g. DNS, Email and MIME, http, SNMP, multimedia). Wired, wireless, and satellite network architectures. OSI protocol model, with an emphasis on upper layers. Congestion control, quality of service, routing. Internet protocol suite (e.g. IP, TCP, ARP, RARP). Server design (e.g. connectionless, concurrent). Network programming abstractions (e.g. XDR, remote procedure calls, sockets, DCOM). Case studies (e.g. TELNET).",Computer Network Architecture & Programming,,"Introduction to computer network architecture, and methods for programming network services and applications (e.g. DNS, Email and MIME, http, SNMP, multimedia). Wired, wireless, and satellite network architectures. OSI protocol model, with an emphasis on upper layers. Congestion control, quality of service, routing. Internet protocol suite (e.g. IP, TCP, ARP, RARP). Server design (e.g. connectionless, concurrent). Network programming abstractions (e.g. XDR, remote procedure calls, sockets, DCOM). Case studies (e.g. TELNET).",
VirginiaTech_USA,CS4264,"<h2>VirginiaTech_USA CS4264</h2><h2>title</h2>Principles of Computer Security<h2>content</h2>Survey of computer security problems and fundamental computer security design principles and models for software systems. Cryptographic models and methods. Modern cyber security techniques for robust computer operating systems, software, web applications, large-scale networks and data protection. Privacy models and techniques. Contemporary computer and network security examples.",Principles of Computer Security,,"Survey of computer security problems and fundamental computer security design principles and models for software systems. Cryptographic models and methods. Modern cyber security techniques for robust computer operating systems, software, web applications, large-scale networks and data protection. Privacy models and techniques. Contemporary computer and network security examples.",
VirginiaTech_USA,CS4284,"<h2>VirginiaTech_USA CS4284</h2><h2>title</h2>Systems & Networking Capstone<h2>content</h2>Advanced topics in computer systems & networking, e.g. distributed and parellel processing, emerging architectures, novel systems management & networking design, fault-tolerance, and robust and secure data management. Team-based approach to solving open-ended computer systems & networking problems. Designing, implementing and documenting advanced computer/networking systems.",Systems & Networking Capstone,,"Advanced topics in computer systems & networking, e.g. distributed and parellel processing, emerging architectures, novel systems management & networking design, fault-tolerance, and robust and secure data management. Team-based approach to solving open-ended computer systems & networking problems. Designing, implementing and documenting advanced computer/networking systems.",
VirginiaTech_USA,CS4504,"<h2>VirginiaTech_USA CS4504</h2><h2>title</h2>Computer Organization<h2>content</h2>Information representation and transfer; instructions and data access methods; the control unit and microprogramming; memories; input/output and interrupts; secondary storage; the von Neumann SISD organization; high level language machines; the RISC concept; special purpose processors including operating system, file, text, floating point, communication, etc. Multicomputers; multiprocessors; concurrent processing support; Pipeline machines, processor arrays, database machines; the data flow/data directed approach; computer networks. Cross-listed with ECE 4504.",Computer Organization,,"Information representation and transfer; instructions and data access methods; the control unit and microprogramming; memories; input/output and interrupts; secondary storage; the von Neumann SISD organization; high level language machines; the RISC concept; special purpose processors including operating system, file, text, floating point, communication, etc. Multicomputers; multiprocessors; concurrent processing support; Pipeline machines, processor arrays, database machines; the data flow/data directed approach; computer networks. Cross-listed with ECE 4504.",
VirginiaTech_USA,CS4604,"<h2>VirginiaTech_USA CS4604</h2><h2>title</h2>Introduction to Data Base Management Systems<h2>content</h2>Emphasis on introduction of the basic data base models, corresponding logical and physical data structures, comparisons of models, logical data design, and data base usage. Terminology, historical evolution, relationships, implementation, data base personnel, future trends, applications, performance considerations, data integrity. Senior standing required.",Introduction to Data Base Management Systems,,"Emphasis on introduction of the basic data base models, corresponding logical and physical data structures, comparisons of models, logical data design, and data base usage. Terminology, historical evolution, relationships, implementation, data base personnel, future trends, applications, performance considerations, data integrity. Senior standing required.",
VirginiaTech_USA,CS4134,"<h2>VirginiaTech_USA CS4134</h2><h2>title</h2>Quantum Computation and Information Processing<h2>content</h2>Quantum states and quantum phenomena. Quantum communication concepts such as superdense coding, teleportation, and complexity. Classical and quantum circuits and gate sets for computation. Quantum algorithms and comparison to classical algorithms. Quantum computational complexity theory and complexity classes. Quantum information concepts such as density operators, measurements, and quantum channels. Error correction, the stabilizer formalism, and fault-tolerance. The adiabatic theorem and adiabatic quantum computation. Entanglement and entanglement measures.",Quantum Computation and Information Processing,,"Quantum states and quantum phenomena. Quantum communication concepts such as superdense coding, teleportation, and complexity. Classical and quantum circuits and gate sets for computation. Quantum algorithms and comparison to classical algorithms. Quantum computational complexity theory and complexity classes. Quantum information concepts such as density operators, measurements, and quantum channels. Error correction, the stabilizer formalism, and fault-tolerance. The adiabatic theorem and adiabatic quantum computation. Entanglement and entanglement measures.",
VirginiaTech_USA,CS4144,"<h2>VirginiaTech_USA CS4144</h2><h2>title</h2>Competitive Problem Solving II<h2>content</h2>Deeper treatment of advanced algorithms, data structures, and implementation techniques, taught in a setting that combines collaborative practice with competitive exercise. Students practice to solve problems using a computer, which are judged by automated evaluation software for correctness and efficiency. Practice with advanced searching and graph algorithms, advanced dynamic programming, linear programming techniques, computational geometry, and numerical algorithms. Problems are drawn from multiple areas in computer science. Macro- and micro optimization techniques to improve efficiency are emphasized.",Competitive Problem Solving II,,"Deeper treatment of advanced algorithms, data structures, and implementation techniques, taught in a setting that combines collaborative practice with competitive exercise. Students practice to solve problems using a computer, which are judged by automated evaluation software for correctness and efficiency. Practice with advanced searching and graph algorithms, advanced dynamic programming, linear programming techniques, computational geometry, and numerical algorithms. Problems are drawn from multiple areas in computer science. Macro- and micro optimization techniques to improve efficiency are emphasized.",
VirginiaTech_USA,CS4234,"<h2>VirginiaTech_USA CS4234</h2><h2>title</h2>Parallel Computation<h2>content</h2>Survey of parallel computer architectures, models of parallel computation, and interconnection networks. Parallel algorithm development and analysis. Programming paradigms and languages for parallel computation. Example applications. Performance measurement and evaluation.",Parallel Computation,,"Survey of parallel computer architectures, models of parallel computation, and interconnection networks. Parallel algorithm development and analysis. Programming paradigms and languages for parallel computation. Example applications. Performance measurement and evaluation.",
VirginiaTech_USA,CS4254,"<h2>VirginiaTech_USA CS4254</h2><h2>title</h2>Computer Network Architecture & Programming<h2>content</h2>Introduction to computer network architecture, and methods for programming network services and applications (e.g. DNS, Email and MIME, http, SNMP, multimedia). Wired, wireless, and satellite network architectures. OSI protocol model, with an emphasis on upper layers. Congestion control, quality of service, routing. Internet protocol suite (e.g. IP, TCP, ARP, RARP). Server design (e.g. connectionless, concurrent). Network programming abstractions (e.g. XDR, remote procedure calls, sockets, DCOM). Case studies (e.g. TELNET).",Computer Network Architecture & Programming,,"Introduction to computer network architecture, and methods for programming network services and applications (e.g. DNS, Email and MIME, http, SNMP, multimedia). Wired, wireless, and satellite network architectures. OSI protocol model, with an emphasis on upper layers. Congestion control, quality of service, routing. Internet protocol suite (e.g. IP, TCP, ARP, RARP). Server design (e.g. connectionless, concurrent). Network programming abstractions (e.g. XDR, remote procedure calls, sockets, DCOM). Case studies (e.g. TELNET).",
VirginiaTech_USA,CS4264,"<h2>VirginiaTech_USA CS4264</h2><h2>title</h2>Principles of Computer Security<h2>content</h2>Survey of computer security problems and fundamental computer security design principles and models for software systems. Cryptographic models and methods. Modern cyber security techniques for robust computer operating systems, software, web applications, large-scale networks and data protection. Privacy models and techniques. Contemporary computer and network security examples.",Principles of Computer Security,,"Survey of computer security problems and fundamental computer security design principles and models for software systems. Cryptographic models and methods. Modern cyber security techniques for robust computer operating systems, software, web applications, large-scale networks and data protection. Privacy models and techniques. Contemporary computer and network security examples.",
VirginiaTech_USA,CS4284,"<h2>VirginiaTech_USA CS4284</h2><h2>title</h2>Systems & Networking Capstone<h2>content</h2>Advanced topics in computer systems & networking, e.g. distributed and parellel processing, emerging architectures, novel systems management & networking design, fault-tolerance, and robust and secure data management. Team-based approach to solving open-ended computer systems & networking problems. Designing, implementing and documenting advanced computer/networking systems.",Systems & Networking Capstone,,"Advanced topics in computer systems & networking, e.g. distributed and parellel processing, emerging architectures, novel systems management & networking design, fault-tolerance, and robust and secure data management. Team-based approach to solving open-ended computer systems & networking problems. Designing, implementing and documenting advanced computer/networking systems.",
VirginiaTech_USA,CS4504,"<h2>VirginiaTech_USA CS4504</h2><h2>title</h2>Computer Organization<h2>content</h2>Information representation and transfer; instructions and data access methods; the control unit and microprogramming; memories; input/output and interrupts; secondary storage; the von Neumann SISD organization; high level language machines; the RISC concept; special purpose processors including operating system, file, text, floating point, communication, etc. Multicomputers; multiprocessors; concurrent processing support; Pipeline machines, processor arrays, database machines; the data flow/data directed approach; computer networks. Cross-listed with ECE 4504.",Computer Organization,,"Information representation and transfer; instructions and data access methods; the control unit and microprogramming; memories; input/output and interrupts; secondary storage; the von Neumann SISD organization; high level language machines; the RISC concept; special purpose processors including operating system, file, text, floating point, communication, etc. Multicomputers; multiprocessors; concurrent processing support; Pipeline machines, processor arrays, database machines; the data flow/data directed approach; computer networks. Cross-listed with ECE 4504.",
VirginiaTech_USA,CS4604,"<h2>VirginiaTech_USA CS4604</h2><h2>title</h2>Introduction to Data Base Management Systems<h2>content</h2>Emphasis on introduction of the basic data base models, corresponding logical and physical data structures, comparisons of models, logical data design, and data base usage. Terminology, historical evolution, relationships, implementation, data base personnel, future trends, applications, performance considerations, data integrity. Senior standing required.",Introduction to Data Base Management Systems,,"Emphasis on introduction of the basic data base models, corresponding logical and physical data structures, comparisons of models, logical data design, and data base usage. Terminology, historical evolution, relationships, implementation, data base personnel, future trends, applications, performance considerations, data integrity. Senior standing required.",
VirginiaTech_USA,CS4624,"<h2>VirginiaTech_USA CS4624</h2><h2>title</h2>Multimedia, Hypertext and Information Access<h2>content</h2>Introduces the architectures, concepts, data, hardware, methods, models, software, standards, structures, technologies, and issues involved with: networked multimedia (e.g., image, audio, video) information, access and systems; hypertext and hypermedia; electronic publishing; virtual reality. Coverage includes text processing, search, retrieval, browsing, time-based performance, synchronization, quality of service, video conferencing and authoring.","Multimedia, Hypertext and Information Access",,"Introduces the architectures, concepts, data, hardware, methods, models, software, standards, structures, technologies, and issues involved with: networked multimedia (e.g., image, audio, video) information, access and systems; hypertext and hypermedia; electronic publishing; virtual reality. Coverage includes text processing, search, retrieval, browsing, time-based performance, synchronization, quality of service, video conferencing and authoring.",
VirginiaTech_USA,CS4644,"<h2>VirginiaTech_USA CS4644</h2><h2>title</h2>Creative Computing Studio<h2>content</h2>Capstone computer science course at the intersection of arts and technology. Intensive immersion in different approaches to digital arts such as game design, interactive art, digital music, and immersive virtual reality. Students work in teams to conduct an end-to-end integrative design project.",Creative Computing Studio,,"Capstone computer science course at the intersection of arts and technology. Intensive immersion in different approaches to digital arts such as game design, interactive art, digital music, and immersive virtual reality. Students work in teams to conduct an end-to-end integrative design project.",
VirginiaTech_USA,CS4704,"<h2>VirginiaTech_USA CS4704</h2><h2>title</h2>Software Engineering Capstone<h2>content</h2>Senior project course integrating software engineering knowledge and skills acquired in previous courses. Team-based approach to problem formulation, requirements engineering, architecture, design, implementation, integration, documentation and delivery of a software system that solves a real-world problem.",Software Engineering Capstone,,"Senior project course integrating software engineering knowledge and skills acquired in previous courses. Team-based approach to problem formulation, requirements engineering, architecture, design, implementation, integration, documentation and delivery of a software system that solves a real-world problem.",
VirginiaTech_USA,CS4784,"<h2>VirginiaTech_USA CS4784</h2><h2>title</h2>Human-Computer Interaction Capstone<h2>content</h2>Advanced, project-based course in Human-Computer Interaction. Team-based, end-to-end, integrative interface design project drawn from area of expertise in the department, e.g., virtual reality, augmented reality, embodied cognition, visualization, semiotic engineering, game design, personal information management, mobile computing, design tools, educational technology, and digital democracy. Pre-requisite: Senior Standing required. A grade of C or better is required in CS pre-requisite 3724 and 3744",Human-Computer Interaction Capstone,,"Advanced, project-based course in Human-Computer Interaction. Team-based, end-to-end, integrative interface design project drawn from area of expertise in the department, e.g., virtual reality, augmented reality, embodied cognition, visualization, semiotic engineering, game design, personal information management, mobile computing, design tools, educational technology, and digital democracy. Pre-requisite: Senior Standing required. A grade of C or better is required in CS pre-requisite 3724 and 3744",
VirginiaTech_USA,CS4804,"<h2>VirginiaTech_USA CS4804</h2><h2>title</h2>Introduction to Artificial Intelligence<h2>content</h2>Overview of the areas of problem solving, game playing, and computer vision. Search trees and/or graphs, game trees, block world vision, syntactic pattern recognition, object matching, natural language, and robotics.",Introduction to Artificial Intelligence,,"Overview of the areas of problem solving, game playing, and computer vision. Search trees and/or graphs, game trees, block world vision, syntactic pattern recognition, object matching, natural language, and robotics.",
VirginiaTech_USA,CS4824,"<h2>VirginiaTech_USA CS4824</h2><h2>title</h2>Machine Learning<h2>content</h2>Algorithms and principles involved in machine learning; focus on perception problems arising in computer vision, natural language processing and robotics; fundamentals of representing uncertainty, learning from data, supervised learning, ensemble methods, unsupervised learning, structured models, learning theory and reinforcement learning; design and analysis of machine perception systems; design and implementation of a technical project applied to real-world datasets (images, text, robotics). A grade of C- or better in prerequisites.",Machine Learning,,"Algorithms and principles involved in machine learning; focus on perception problems arising in computer vision, natural language processing and robotics; fundamentals of representing uncertainty, learning from data, supervised learning, ensemble methods, unsupervised learning, structured models, learning theory and reinforcement learning; design and analysis of machine perception systems; design and implementation of a technical project applied to real-world datasets (images, text, robotics). A grade of C- or better in prerequisites.",
VirginiaTech_USA,CS4884,"<h2>VirginiaTech_USA CS4884</h2><h2>title</h2>Computational Biology & Bioinformatics Capstone<h2>content</h2>Advanced topics in computational biology and bioinformatics (CBB). Team-based approach to solving open-ended problems in CBB. Projects drawn from areas of expertise in the department, e.g., algorithms for CBB, computational models for biological systems, analysis of structure-function relationships in biomolecules, genomic data analysis and data mining, computational genomics, systems biology. Design, implementation, documentation and presentation of solutions.",Computational Biology & Bioinformatics Capstone,,"Advanced topics in computational biology and bioinformatics (CBB). Team-based approach to solving open-ended problems in CBB. Projects drawn from areas of expertise in the department, e.g., algorithms for CBB, computational models for biological systems, analysis of structure-function relationships in biomolecules, genomic data analysis and data mining, computational genomics, systems biology. Design, implementation, documentation and presentation of solutions.",
