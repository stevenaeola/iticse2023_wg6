Title,Text,[M] elective: ,[M] institution: ,[M] title: ,"[C] Altin, Rukiye (rukiye)","[C] Bradley, Steven","[C] McNeill, Fiona","[C] Minguillón, Julià (Julià Minguillón)","[C] Parker, Miranda","[C] Peltsverger, Svetlana"
COMP3477: ALGORITHMIC GAME THEORY,"<h2>title</h2>COMP3477: ALGORITHMIC GAME THEORY<h2>summary</h2>   <li> The aim of the module is to introduce the student to the notion of a game, relevant concepts, and other basic notions and tools of game theory, as well as the main applications where such concepts are used and applied. </li>  <h2>content</h2>   <li>Introduction to Game Theory: what is a game? Strategy, preferences, payoffs. </li>   <li>Bimatrix games: strategies and payoffs; Nash equilibria.  </li>   <li>Extensive games with Perfect Information.  </li>   <li>Mathematical and algorithmic foundations of market equilibria.  </li>   <li>Routing Games on Networks; Congestion Games.  </li>   <li>Mechanism design and Combinatorial Auctions.  </li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>An understanding of key game theoretic notions and ideas, and their connections to computer science and economics. </li>    <li>An understanding of the impact of game theory and mechanism design on contemporary applications.  </li> ",COMP3477,Durham_England,COMP3477: ALGORITHMIC GAME THEORY,GIT,AL; MSF; 15,AL; 04,AL; MSF; 13; 15,AL; 09,MSF; AL
COMP3487: BIOINFORMATICS,"<h2>title</h2>COMP3487: BIOINFORMATICS<h2>summary</h2>   <li>To introduce students to applications of Computer Science in Biology.</li>   <li>To introduce students to some important Statistical methods and algorithms.</li>  <h2>content</h2>   <li>Dynamic programming algorithms for sequence alignment.</li>   <li>Efficient heuristic algorithms for sequence alignment.</li>   <li>Markov Chains and Hidden Markov Models (HMM). </li>   <li>Expectation-Maximisation algorithm with an application to parameter-estimation in HMM. </li>   <li>Phylogenetic Trees as a model of Evolution.  </li>   <li>Maximum parsimony and character-based techniques for tree reconstruction.  </li>   <li>Distance-based tree reconstruction via neighbour-joining techniques.  </li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>an understanding of the basic computational problems in Biology. </li>    <li>an understanding of some fundamental statistical techniques.  </li>    <li>an understanding of basic tree-reconstruction algorithms.  </li> ",COMP3487,Durham_England,COMP3487: BIOINFORMATICS,AI; MSF,AL; MSF; 03,03; MSF,AI; MSF; 03,03; AL,AL; MSF; 03
COMP3517: COMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES,"<h2>title</h2>COMP3517: COMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES<h2>summary</h2>   <li>To enable students to understand and critically evaluate the application of computational modelling&nbsp;to problems in the humanities and social sciences.</li>   <li>To introduce students to algorithms and approaches relevant to the modelling of humanities and social science data.</li>  <h2>content</h2>   <li>Computational models of text and language</li>   <li>Text and data mining</li>   <li>Critical evaluation of computational models</li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>an understanding of how computational modelling can be applied to humanities and social science research</li>    <li>an understanding of computational approaches to modelling text</li>    <li>an understanding of data mining techniques.</li> ",COMP3517,Durham_England,COMP3517: COMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES,DM; 15,AI; 14; 15,14; 15; DM,AI; 14; 15,14; AL,AL; MSF; 15
COMP3527: COMPUTER VISION,"<h2>title</h2>COMP3527: COMPUTER VISION<h2>summary</h2>   <li>To enable students to critically evaluate the development of computer vision solutions across existing and emerging technology areas. </li>   <li>To enable students to understand and evaluate general image and video understanding themes across relevant application areas, focusing on relevant case studies.</li>   <li>To understand and apply the fundamental principles of applied computer vision solutions to a range of real world problems.</li>  <h2>content</h2>   <li>Themes will be chosen from contemporary areas of computer vision including the following:</li>   <li>edge features, contours and shape fitting. </li>   <li>feature points for object detection and classification. </li>   <li>stereo vision (3D point clouds and depth images). </li>   <li>object classification using distributions of gradient information. </li>   <li>background modelling and object tracking. </li>   <li>end-to-end image classification and real-time object detection via deep machine learning. </li>   <li>image and video mosaicking and 3D scene reconstruction. </li>   <li>visual odometry for autonomous navigation. </li>  <h2>ilo</h2>    <li>On completion of this module, students will be able to demonstrate an in-depth knowledge of the contemporary computer vision topics presented,     how these are applicable to relevant industrial problems and have future potential for emerging needs in both a research and industrial setting.    </li> ",COMP3527,Durham_England,COMP3527: COMPUTER VISION,GIT,AI,AI,GIT; AI,AI,AI; GIT
COMP3547: DEEP LEARNING,"<h2>title</h2>COMP3547: DEEP LEARNING<h2>summary</h2>   <li>To enable students to be able to approach complex ill-defined problems that require deep layers of learning, and understand how this relates to learning in nature.</li>   <li>To equip students with the ability to use modern deep learning libraries in order to effectively design, train, and test neural networks in different applications.</li>  <h2>content</h2>   <li>Foundations of deep learning and learning in nature</li>   <li>PyTorch programming</li>   <li>Designing deep neural network architectures</li>   <li>Adversarial models</li>   <li>Energy-based models and Flow models</li>   <li>Sequential models and Transformers</li>   <li>Implicit representations</li>   <li>Generalisation theory</li>   <li>Meta and manifold learning</li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate:</li>    <li>an understanding of state-of-the-art deep neural network architectures and neural network architecture components.</li>    <li>an understanding of statistical learning theory with deep learning approaches.</li>    <li>an understanding of the algorithms and approaches to design and evaluate deep neural networks.</li> ",COMP3547,Durham_England,COMP3547: DEEP LEARNING,AI,AI,AI; SDF,AI; SPD,AI,AI
COMP3557: DESIGN OF ALGORITHMS AND DATA STRUCTURES,"<h2>title</h2>COMP3557: DESIGN OF ALGORITHMS AND DATA STRUCTURES<h2>summary</h2>   <li>The aim of the module is to equip students with the ability to design and analyse efficient algorithms and data structures.</li>  <h2>content</h2>   <li> To be chosen from the following: </li>   <li> hashing (universal, perfect, Cuckoo, Bloom filters) </li>   <li> treaps </li>   <li> skip lists </li>   <li> splay trees </li>   <li> basic models and algorithms for sub-linear space (streaming) </li>   <li> basic models and algorithms for sub-linear time (e.g., property testing) </li>   <li> basic PRAM (shared-memory parallel) algorithms and techniques </li>  <h2>ilo</h2>    <li> On completion of the module, students will be able to demonstrate: </li>    <li> a knowledge about various important problem solving paradigms in the broad area of algorithmic design. </li>    <li> an understanding of how to measure, transfer and handle data </li>    <li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems; </li>    <li> an ability to conduct review and self-study to further their knowledge beyond the taught material. </li> ",COMP3557,Durham_England,COMP3557: DESIGN OF ALGORITHMS AND DATA STRUCTURES,AL,AL,AL,AL,AL,AL
COMP3577: PARALLEL SCIENTIFIC COMPUTING I,"<h2>title</h2>COMP3577: PARALLEL SCIENTIFIC COMPUTING I<h2>summary</h2>   <li>Introduce scientific computing techniques for the numerical solution of problems in science and engineering</li>   <li>Introduce and familiarise students with parallel programming approaches in scientific computing</li>  <h2>content</h2>   <li>Fundamentals of numerical algorithms for ordinary differential equations.</li>   <li>Explicit time discretion techniques for ordinary differential equations.</li>   <li>Notions of error and stability analysis.</li>   <li>Approaches to programming for multiple processing units using shared memory.</li>   <li>Data parallel programming paradigms</li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>an understanding of typical approaches to the numerical solution of problems in science and engineering.</li>    <li>a knowledge and appreciation of some of the research challenges in scientific computing </li>    <li>understanding of basic parallelisation strategies and when to apply them</li> ",COMP3577,Durham_England,COMP3577: PARALLEL SCIENTIFIC COMPUTING I,PDC,PDC; 07; 10,PDC; MSF,PDC; 09,08; PDC; AL,PDC; MSF
COMP3647: Human-AI Interaction Design,"<h2>title</h2>COMP3647: Human-AI Interaction Design<h2>summary</h2>   <li>To discuss how the design of Human-AI interactions may affect user experience.</li>   <li>To introduce methods and tools for designing interactive AI systems.</li>   <li>To develop ethical and societal principles in the design of interactive AI systems.</li>  <h2>content</h2>   <li>AI and User Experience</li>   <li>Human-Centred AI Design</li>   <li>Human-AI Communication Channels</li>   <li>Inclusive Design and Digital Accessibility</li>   <li>Explainable AI and Building Trust</li>   <li>Privacy and Security Considerations</li>   <li>Affective Design for Interactive AI</li>   <li>Psychophysical Methods</li>   <li>Ambient Intelligence</li>   <li>Applications (e.g. gaming, healthcare, education, finance, automotive vehicles, etc.)  </li>  <h2>ilo</h2>    <li>An understanding of impacts of interactive AI system design on user experience.</li>    <li>An understanding of concepts and principles of Human-AI interaction design. </li> ",COMP3647,Durham_England,COMP3647: Human-AI Interaction Design,AI; HCI,AI; HCI,AI; HCI,HCI,HCI; AI,AI; HCI
COMP3657: Security Engineering,"<h2>title</h2>COMP3657: Security Engineering<h2>summary</h2>   <li>To understand security protocol design and analysis, security architectures, cryptographic protocols and security considerations in various environments such as software, web and hardware infrastructures.</li>  <h2>content</h2>   <li>Secure systems and architecture: principles of architecting a secure system.</li>   <li>System evaluation and assurance: threat models and ways to distinguish various attacks.</li>   <li>Cryptographic protocols: the role of cryptographic primitives in secure systems.</li>   <li>Security protocols: mechanisms that enforce policy using cryptography and structured human interaction together with verification and validation processes.</li>   <li>Secure communications: principles of secure networks together with mechanisms to maintain secrecy, integrity and authenticity in connected systems.</li>   <li>Software-based security: principles of secure coding, the origin of vulnerabilities, reverse-engineering and code obfuscation.</li>   <li>Hardware-based security: mechanisms to protect physical components in different platforms such as mobile, PC or IoT.  </li>  <h2>ilo</h2>    <li>An understanding of cryptographic primitives.</li>    <li>A basic understanding of various communication platforms (such as network, IoT, web, etc.).</li>    <li>An understanding of operating system principles.</li>    <li>An understanding of programming languages and compiler design.</li> ",COMP3657,Durham_England,COMP3657: Security Engineering,SEC; NC,SEC,SEC,SEC; SF,SEC,SEC
COMP4097: ADVANCED COMPUTER GRAPHICS AND VISUALISATION,"<h2>title</h2>COMP4097: ADVANCED COMPUTER GRAPHICS AND VISUALISATION<h2>summary</h2>   <li>The module focuses on modern, advanced techniques for realistic image synthesis and visualisation, presenting the theoretical background and practical, established algorithms for offline and real-time 3D graphics.</li>  <h2>content</h2>   <li>Introduction: basic image generation.</li>   <li>Physically-based shading.</li>   <li>Deferred shading, screen space methods.</li>   <li>Global illumination methods, BRDFs, ray tracing.</li>   <li>Path tracing, Monte Carlo integration, acceleration techniques, radiosity.</li>   <li>Tone mapping.</li>   <li>Shadows.</li>   <li>Procedural content generation and noise generation.</li>   <li>Animation.</li>   <li>Visualisation definitions and rationale, information visualisation, scientific visualisation. </li>   <li>Coordinate systems and axes, colour scales, etc. </li>   <li>Visualisation pipeline and visualisation architectures.</li>   <li>Visualisation approaches to scalar, vector and volume data. </li>   <li>Multi-scale, multimodal, multidimensional data, uncertain data.</li>   <li>Data types, signal filtering, major software platforms.</li>   <li>Perception. </li>  <h2>ilo</h2>    <li>On completion of this module, students will be able to demonstrate a systematic understanding of advanced computer graphics and visualisation algorithms and techniques, and a critical awareness of how they are applicable to both current and emerging needs within the industrial and research environment. </li> ",COMP4097,Durham_England,COMP4097: ADVANCED COMPUTER GRAPHICS AND VISUALISATION,GIT,GIT,GIT,GIT,GIT,GIT
COMP4107: ADVANCED COMPUTER VISION,"<h2>title</h2>COMP4107: ADVANCED COMPUTER VISION<h2>summary</h2>   <li>To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies. </li>   <li>To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.</li>  <h2>content</h2>   <li>Themes will be chosen from contemporary areas of computer vision including the following:</li>   <li>Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D/3D. </li>   <li>Computer vision for advanced visual semantic models â€“ attribute learning, zero-shot learning, visual question and answering. </li>   <li>Computer vision for advanced object and scene understanding. </li>   <li>Computer vision for behaviour understanding. </li>   <li>Computer vision for security and biometrics. </li>   <li>Computer vision for image manipulation and augmentation. </li>  <h2>ilo</h2>    <li>On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a     critical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.  </li> ",COMP4107,Durham_England,COMP4107: ADVANCED COMPUTER VISION,GIT,AI,AI,GIT; AI,AI,AI; GIT
COMP4137: BLOCKCHAIN AND CRYPTOCURRENCIES,"<h2>title</h2>COMP4137: BLOCKCHAIN AND CRYPTOCURRENCIES<h2>summary</h2>   <li>To introduce students to an advanced topic in Computer Science that is finding application in modern technology. </li>   <li>To give students knowledge and understanding of the theoretical basis, security and history of cryptocurrencies. </li>  <h2>content</h2>   <li>Secure hash functions and digital signatures.  </li>   <li>Simple blockchains.  </li>   <li>Decentralisation of blockchains.  </li>   <li>Bitcoin transaction and block details.  </li>   <li>Bitcoin mining.  </li>   <li>Anonymity in cryptocurrencies.  </li>   <li>Ethereum and smart contracts.  </li>   <li>Recent developments in blockchains and cryptocurrencies.  </li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>an understanding of the cryptographic protocols underlying blockchain security </li>    <li>knowledge of the key features and differences between a number of cryptocurrencies  </li>    <li>the structure and use of smart contracts in a blockchain  </li>    <li>an understanding of some recent developments in cryptocurrencies and blockchains  </li> ",COMP4137,Durham_England,COMP4137: BLOCKCHAIN AND CRYPTOCURRENCIES,SEC; 17,SEC; 15,SEC,SEP; AL,AL; SEC,AL; SEP
COMP4167: NATURAL LANGUAGE PROCESSING,"<h2>title</h2>COMP4167: NATURAL LANGUAGE PROCESSING<h2>summary</h2>   <li>Introduce the students to computational linguistics</li>   <li>Introduce the students to Language models</li>   <li>Gain experience in working with various textual data</li>   <li>Gain experience in using advanced techniques to solve natural language tasks such as text parsing, understanding, classification, translation, and generation</li>  <h2>content</h2>   <li>Text Pre-processing</li>   <li>Features Extraction</li>   <li>Language Modelling and Neural Language Modelling </li>   <li>Neural Word Embedding and their interpretation </li>   <li>Recurrent Neural Networks (RNN) for Language Models</li>   <li>Advanced variations of RNNs</li>   <li>Sequence to Sequence Architectures</li>   <li>Convolutional Neural Networks for Text Classification </li>   <li>Transformers and Attention based Models</li>   <li>Multitask Learning</li>   <li>Natural Language Generation</li>   <li>NLP Ethics and Fairness</li>  <h2>ilo</h2>    <li>On completion of the module, students will be able to demonstrate: </li>    <li>Understanding of the fundamental concepts of Language Models</li>    <li>Understanding of the mathematical basis of various deep-learning based language models</li>    <li>Understanding of the learning algorithms behind major NLP use cases e.g. Machine Translation, Multi-task Learning, Language Generation, ...</li>    <li>Understanding of the embedded bias in popular language models</li> ",COMP4167,Durham_England,COMP4167: NATURAL LANGUAGE PROCESSING,AI; SEP,AI; SEP,AI,AI; 19,AI,AI
COMP4197: RANDOMISED ALGORITHMS AND PROBABILISTIC METHODS,"<h2>title</h2>COMP4197: RANDOMISED ALGORITHMS AND PROBABILISTIC METHODS<h2>summary</h2>   <li>The aim of the module is to equip students with the ability to design and analyse efficient probabilistic algorithms.</li>  <h2>content</h2>   <li> To be chosen from the following: </li>   <li> basic bounds and inequalities (Markov, Chebyshev, Chernoff) </li>   <li> Martingales </li>   <li> Markov chains and random walks </li>   <li> the probabilistic method </li>   <li> approximate counting </li>   <li> parallel and distributed probabilistic algorithms </li>  <h2>ilo</h2>    <li> On completion of the module, students will be able to demonstrate: </li>    <li> a knowledge about various important problem solving paradigms in the broad area of probabilistic methods and algorithms </li>    <li> an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems </li>    <li> an ability to conduct review and self-study to further their knowledge beyond the taught material </li> ",COMP4197,Durham_England,COMP4197: RANDOMISED ALGORITHMS AND PROBABILISTIC METHODS,AI; MSF,AL; MSF,AL; MSF,AL; 09,AL; PDC; 09,MSF
Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010),"<h2>title</h2>Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)<h2>summary</h2>This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.<h2>content</h2>        1.  Intelligent Agents: Introduction<br>* Nature of agents, performance measures and environments<br>* Wumpus World Problem : An example thread (Programming environment) setup <br><br>2. Search based Planning<br>* Planning as a Search Problem: In deterministic, observable, static and known environments<br>* Smart Searching 1: Using constraints<br>* Smart Searching 2: Exploiting subproblems/Memoisation<br>* Informed Search and Exploration for agents <br><br>3. Logical Representation and Planning<br>* Propositional Logic Revisited (Shortcomings)<br>* First Order Logic &amp; Encoding facts/rules in FOL<br>* Inference Rules for Propositional &amp; FOL Calculus<br>* Unification and Generalized Modus Ponens<br>* Resolution based Inference and directing search with it<br>* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>* Situation Calculus: Representing time in plans <br><br>4. Scaling Planning for Complex Tasks<br>* Representing States, Goals and Actions in STRIPS<br>* Partial Order Planning<br>* Planning and Acting in the Real World <br><br>5. Acting in Uncertain (real world) Environments<br>* Representation with Bayes Net<br>* Probabilistic Reasoning in Bayes Net<br>* Planning under Uncertainity : Wumpus world revisited<br>* Probabilistic Reasoning over Time I: hidden markov models<br>* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>* Markov Decision Processes <br><br>Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling ",cxinfr08010,Edinburgh_UK,Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010),MSF; AI,AI; MSF,AI,AI,AI,MSF; AI
Undergraduate Course: Automated Reasoning (INFR10087),"<h2>title</h2>Undergraduate Course: Automated Reasoning (INFR10087)<h2>summary</h2>**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br><br>Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br><br>In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.<h2>content</h2>        The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br><br>Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br><br>The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br><br>The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br><br>The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br><br>Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br><br>The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails. ",cxinfr10087,Edinburgh_UK,Undergraduate Course: Automated Reasoning (INFR10087),HCI,AI; 09,AI,AI,AI; 09,AL; AI; MSF
Undergraduate Course: Compiling Techniques (INFR10065),"<h2>title</h2>Undergraduate Course: Compiling Techniques (INFR10065)<h2>summary</h2>This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br><br>Students will also learn about implementing a compiler pass in a real compiler framework.<h2>content</h2>        * Introduction: structure of a compiler <br>* Lexical analysis: tokens, regular expressions, Lex <br>* Parsing: context-free grammars, predictive and LR parsing <br>* Abstract syntax: semantic actions, abstract parse trees <br>* Semantic analysis: symbol tables, bindings, type-checking <br>* Stack frames: representation and abstraction <br>* Intermediate code: representation trees, translation <br>* Basic blocks and traces: canonical trees and conditional branches <br>* Instruction selection: algorithms for selection, RISC and CISC <br>* Liveness analysis: solution of dataflow equations <br>* Register allocation: colouring by simplification, coalescing <br>* Real assembly language: ARM, MIPS, or RISC-V <br>* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR ",cxinfr10065,Edinburgh_UK,Undergraduate Course: Compiling Techniques (INFR10065),FPL,FPL; AR,FPL,FPL,FPL,FPL
Undergraduate Course: Computer Communications and Networks (INFR10074),"<h2>title</h2>Undergraduate Course: Computer Communications and Networks (INFR10074)<h2>summary</h2>This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br><br>Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br><br>Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.<h2>content</h2>        * Introduction to Computer Networking and the Internet<br>* Digital Communication Basics<br>* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>* The Transport Layer<br>* The Network Layer<br>* The Data Link Layer<br>* The Medium Access Control Sub-Layer<br>* The Physical Layer<br>* Software-defined networking (SDN)<br>* Network virtualisation and network function virtualisation (NFV)<br>* Network management<br>* Introduction to data centre and wireless networks<br>* Overview and selected aspects of network security ",cxinfr10074,Edinburgh_UK,Undergraduate Course: Computer Communications and Networks (INFR10074),NC; SEC,NC,SE; NC,NC,NC,NC
Undergraduate Course: Elements of Programming Languages (INFR10061),"<h2>title</h2>Undergraduate Course: Elements of Programming Languages (INFR10061)<h2>summary</h2>Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br><br>Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br><br>This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.<h2>content</h2>        * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>* Modelling programming language features using inference rules<br>* Interpreters as a way of defining and exploring language features<br>* Domain specific languages, translators, and pragmatics of language processing<br>* A selection of topics illustrated by case studies from current or historically important language designs:<br>  - data structures: pairs/record types; variant/union types; recursion<br>  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>  - control structures: goto, loops, case/switch, exceptions<br>  - abstracting control: procedure call/return; function types; continuations<br>  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br> ",cxinfr10061,Edinburgh_UK,Undergraduate Course: Elements of Programming Languages (INFR10061),FPL,FPL,FPL,FPL,FPL,FPL
Undergraduate Course: Foundations of Natural Language Processing (INFR10078),"<h2>title</h2>Undergraduate Course: Foundations of Natural Language Processing (INFR10078)<h2>summary</h2>***This course replaces Foundations of Natural Language Processing (INFR09028).***<br><br>This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br><h2>content</h2>        An indicative list of topics to be covered include:<br><br>1. Lexicon and lexical processing:<br>* morphology<br>* language modeling<br>* hidden Markov Models and associated algorithms<br>* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>* smoothing<br>* text classification<br><br>2. Syntax and syntactic processing:<br>* the Chomsky hierarchy<br>* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>* context-free grammars <br>* lexicalized grammar formalisms (e.g., dependency grammar)<br>* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>* treebanks: lexicalized grammars and corpus annotation <br>* statistical parsing<br><br>3. Semantics and semantic processing:<br>* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>* predicate argument structure<br>* word sense disambiguation<br>* semantic role labelling<br>* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br><br>4. Data and evaluation (interspersed throughout other topics):<br>* cross-linguistic similarities and differences<br>* commonly used datasets <br>* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>* evaluation methods and issues (e.g., standard metrics, baselines)<br>* effects of biases in data<br><br> ",cxinfr10078,Edinburgh_UK,Undergraduate Course: Foundations of Natural Language Processing (INFR10078),MSF; FPL,AI,AI,AI; 19,AI,AI
Undergraduate Course: Introduction to Databases (INFR10080),"<h2>title</h2>Undergraduate Course: Introduction to Databases (INFR10080)<h2>summary</h2>Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br><br>* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *<h2>content</h2>        Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br><br>Syllabus (core topics)<br>- The relational model and rudiments of SQL<br>- Query languages: relational algebra and calculus<br>- Multisets, grouping and aggregation<br>- Database design: constraints and normal forms<br>- Advanced SQL: nested queries, triggers, null values<br>- Transaction management: concurrent schedules, conflict-serializability, locking<br>- Database access from applications: using SQL in a host programming language<br>- Basics of indexing, query evaluation and optimisation <br><br>Syllabus (advanced topics, if time allows)<br>- Datalog and recursive queries<br>- Incomplete data and certain answers<br> ",cxinfr10080,Edinburgh_UK,Undergraduate Course: Introduction to Databases (INFR10080),DM,DM,DM,DM,DM,DM
Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059),"<h2>title</h2>Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)<h2>summary</h2>This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br><br><h2>content</h2>        The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br><br>The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br><br>The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br> ",cxinfr10059,Edinburgh_UK,Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059),FPL,AL; MSF,SE,AL,MSF,AL; MSF
Undergraduate Course: Operating Systems (INFR10079),"<h2>title</h2>Undergraduate Course: Operating Systems (INFR10079)<h2>summary</h2>This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br><br>This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br><br>* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br><br><br><h2>content</h2>        The OS Kernel<br>*Micro and Monolithic kernels<br>*Multi-tasking, multi-user<br>*Interrupt handling, system calls<br><br>Process Management<br>*The process concept<br>*The thread concept<br>*Inter-process communication<br><br>Time Management<br>*CPU scheduling algorithms<br><br>Resource Management<br>*Synchronisation, mutual exclusion<br>*Semaphores, and monitors<br>*Deadlock prevention, avoidance, and detection<br><br>Memory Management<br>*The problem of allocation, protection, and sharing<br>*Physical and virtual memory<br>*Paged virtual memory<br><br>Storage Management<br>*Storage technologies<br>*File Systems<br><br>Virtualization <br>*Virtual Machines<br>*Containers<br><br>Relevant QAA Computing Curriculum Sections: Operating Systems<br> ",cxinfr10079,Edinburgh_UK,Undergraduate Course: Operating Systems (INFR10079),OS,OS,OS,OS,OS,OS
Undergraduate Course: Software Design and Modelling (INFR10064),"<h2>title</h2>Undergraduate Course: Software Design and Modelling (INFR10064)<h2>summary</h2>This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.<h2>content</h2>        The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br><br>The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br> <br>Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future. ",cxinfr10064,Edinburgh_UK,Undergraduate Course: Software Design and Modelling (INFR10064),SDF,SE,SE,SE,SDF,SE; SDF
Undergraduate Course: Software Testing (INFR10057),"<h2>title</h2>Undergraduate Course: Software Testing (INFR10057)<h2>summary</h2>This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.<h2>content</h2>        Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br><br>The course includes the following topics:<br><br>Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>Types of defects.<br>Black-box vs. Structural testing.<br>Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>State based testing; configuration testing; compatibility testing; web site testing.<br>Alpha, beta, and acceptance testing.<br>Coverage criteria.<br>Test instrumentation and tools.<br>Developing test plans.<br>Managing the testing process: Development Lifecycles<br>Problem reporting, tracking, and analysis. <br>Relevant QAA Computing Curriculum Sections: Software Engineering<br><br>Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br> <br>Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br><br>Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br><br>Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product. ",cxinfr10057,Edinburgh_UK,Undergraduate Course: Software Testing (INFR10057),SDF; FPL,SE,SE,SE,SE,SE; SDF
Undergraduate Course: Advanced Database Systems (UG) (INFR11217),"<h2>title</h2>Undergraduate Course: Advanced Database Systems (UG) (INFR11217)<h2>summary</h2>This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.<h2>content</h2>        This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead. ",cxinfr11217,Edinburgh_UK,Undergraduate Course: Advanced Database Systems (UG) (INFR11217),DM,DM,DM,DM,DM,DM
Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020),"<h2>title</h2>Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020)<h2>summary</h2>Game theory is the formal study of interaction between ""self-interested"" (or ""goal-oriented"") ""systems"" (or ""agents"" or ""decision makers"" or ""players""), &amp; strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann &amp; Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology &amp; even to inspection regimes for arms control. <br><br>Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification &amp; model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics &amp; computing have received extensive attention. These include electronic auctions, &amp; more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. <br><br>Wherever game theory plays a quantitative role, algorithmic and computational questions related to ""solving"" games are also of central importance. <br><br>This course aims to bring together as a coherent body of knowledge the game theoretic algorithms &amp; models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, &amp; AI. <br><h2>content</h2>         Examples of diverse games<br>Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem<br><br>General games in strategic form:<br> - Equilibria and Nash's theorem<br> - 2-player equilibria: Lemke-Howson algorithm and its variants. <br><br>Games in Extensive form (mainly zero-sum, perfect information):<br> - Game trees. Relation to Strategic games<br> - and / or game graphs and reachability games<br> - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)<br> - mean value games, MDPs, and stochastic games<br><br>Mechanism design and inverse game theory: designing games where selfish players will behave as desired:<br> - Vickery auctions and other mechanisms<br> - Combinatorial auctions<br> - Incentive structures for the internet. <br><br>Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing ",cxinfr11020,Edinburgh_UK,Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020),HCI; GIT,AL; MSF; 15,04; AL; AI,AL; 15,AL; MSF,MSF; AL; AI
Postgraduate Course: Automatic Speech Recognition (INFR11033),"<h2>title</h2>Postgraduate Course: Automatic Speech Recognition (INFR11033)<h2>summary</h2>This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. <br><br>Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.<h2>content</h2>        Signal analysis for ASR<br>Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)<br>Hidden Markov Models (HMM)<br>Context-dependent models<br>Discriminative training<br>Language models for LVCSR (large vocabulary continuous speech recognition)<br>Decoding<br>Robust ASR (Robust features Noise reduction, Microphone arrays)<br>Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)<br>Speaker recognition<br>History of speech recognition<br>Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)<br>Speech recognition applications (including privacy implications)<br><br>Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing ",cxinfr11033,Edinburgh_UK,Postgraduate Course: Automatic Speech Recognition (INFR11033),MSF; AL,AI; MSF,AI,AI; 10,AI,AI
Undergraduate Course: Bioinformatics 1 (INFR11160),"<h2>title</h2>Undergraduate Course: Bioinformatics 1 (INFR11160)<h2>summary</h2>**This course replaces Bioinformatics 1 (INFR11016)**<br><br>This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br><br>In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.<h2>content</h2>        In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br><br>This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required. ",cxinfr11160,Edinburgh_UK,Undergraduate Course: Bioinformatics 1 (INFR11160),AI; MSF,AL; 03,MSF; 03,AI; 03,03; AL,AL; MSF; 03
Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144),"<h2>title</h2>Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144)<h2>summary</h2>Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. <br><br>This course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.<h2>content</h2>        The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. <br><br>Syllabus:<br>1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.<br>2. The consensus layer. Basic Properties. Proof of Work.<br>3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. <br>4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.<br>5. Scalability Issues. Byzantine agreement protocols. <br>6. Blockchain as a platform. Smart Contracts. <br>7. Secure multiparty computation techniques and their application to blockchain protocols. <br>8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. <br>9. Game theoretic analysis of blockchain protocols. <br>10. Name and object registries. Reputation systems. Policy issues related to blockchain. ",cxinfr11144,Edinburgh_UK,Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144),SEC; 17,SEC; 15,SEC,AL; SEP,AL,AL; SEP
Undergraduate Course: Computer Graphics: Geometry and Simulation (INFR11241),"<h2>title</h2>Undergraduate Course: Computer Graphics: Geometry and Simulation (INFR11241)<h2>summary</h2>This course introduces classic and state-of-the-art methodology in computer graphics. We will focus on methods and best practices in geometry, physical simulation, and geometric deep learning, which are the basic building blocks for downstream applications such as animation, industrial design, game engineering, structural analysis, AR/VR, and medical imaging. Our curriculum will cover basic representations of shapes, geometric optimization, analysis, and principles of robust digital simulation of physical scenes. The techniques employed will involve classical numerical analysis up to deep learning. <br><br>The course will include programming tasks to implement a few key algorithms in geometry processing, geometric learning, and physical simulation, to the extent that they can independently run and be analysed on modest open-source data.<br><br>This course (CGGS) and Computer Graphics: Rendering (CGR) are both courses that require no previous knowledge of computer graphics. These two courses may be taken independently or together. CGGS focusses on the representation, processing and dynamics of 3D objects in the virtual world while CGR focusses on the rendering of virtual worlds as photo-realistic images.<h2>content</h2>        Delivery Method:<br><br>The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br><br>Content / Syllabus:<br>The exact set of methods and algorithms explored in the course will vary slightly from year to year, but will include many of the following topics:<br><br>- Overview: geometry and simulation in digital applications. <br>- Elemental digital representations of geometry: simplicial meshes, point clouds, voxelizations, implicit functions, neural fields<br>- Elementary principles of discrete simulation: strain and stress tensors, force equations, time integration.<br>- Geometry acquisition and reconstruction: classical (least-squares based) and modern (neural-network based) algorithms.<br>- Discrete shape analysis: curvatures, topology, differential operators.<br>- Finite-element spaces for simulation and analysis, including basic PDEs like elasticity, Stokes equation, and Poisson equation.<br>- Simulation of rigid bodies with collisions.<br>- Modern deep-learning techniques for geometry and simulation, such as physics-informed neural networks, graph neural networks, and implicit representations (e.g., signed distance fields)<br>- Practical aspects of implementation and debugging in geometry: we will discuss how to identify, critically analyse, and improve performance in geometric methods, with emphasis on pitfalls and basic principles in implementation and design. ",cxinfr11241,Edinburgh_UK,Undergraduate Course: Computer Graphics: Geometry and Simulation (INFR11241),MSF; GIT,GIT; MSF,GIT; MSF,GIT,GIT; AI; 09,MSF; GIT
65,<h2>title</h2><h2>summary</h2><h2>content</h2> ,cxinfr11246,Edinburgh_UK,,,,,,,
Postgraduate Course: MSc Dissertation (Informatics) (INFR11077),"<h2>title</h2>Postgraduate Course: MSc Dissertation (Informatics) (INFR11077)<h2>summary</h2><h2>content</h2>This is a major piece of full-time independent work which occupies the final months of the MSc course. It is intended to allow students to demonstrate their ability to organise and carry out a substantial investigation into a problem in Informatics, according to sound scientific and engineering principles. The project involves both the application of skills learnt in the past and the acquisition of new skills.<br><br>The types of activity involved in each project will vary but will include most of the following:<br><br>    * Researching the literature and gathering background information.<br>    * Analysing requirements, comparing alternatives and specifying a solution.<br>    * Analysing and extending relevant theory in novel ways.<br>    * Designing and implementing the solution.<br>    * Experimenting with and evaluating the solution.<br>    * Discussing existing results and presenting new research.<br>    * Developing written and oral presentation skills.<br><br>The project is conducted individually by the student under the supervision of a member of teaching staff. Students are formed into groups for the purpose of a Review Meeting. ",cxinfr11077,Edinburgh_UK,Postgraduate Course: MSc Dissertation (Informatics) (INFR11077),SEP,,,SEP; SE,,SPD
Postgraduate Course: Extreme Computing (INFR11088),"<h2>title</h2>Postgraduate Course: Extreme Computing (INFR11088)<h2>summary</h2>Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).<h2>content</h2>        The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br> <br>* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br> <br>* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br> <br>* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br><br>The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems ",cxinfr11088,Edinburgh_UK,Postgraduate Course: Extreme Computing (INFR11088),AL; FPL,DM; OS,SE; AI,AR,SPD,AL; AR
Undergraduate Course: Formal Verification (INFR11129),"<h2>title</h2>Undergraduate Course: Formal Verification (INFR11129)<h2>summary</h2>Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.<h2>content</h2>        In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br> <br>This course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br> <br>Topics the course covers include the following: <br>*Formal verification in context, its current take-up in industry and challenges to its wider <br>adoption <br>*Syntax and semantics of CTL and LTL temporal logics <br>*CTL and LTL model checking techniques, including automata-based approaches and <br>bounded model checking with SAT solvers <br>*The BDD data-structure used at the heart of many model checkers <br>*Writing models for model checking and phrasing useful properties in CTL and LTL <br>*Operational semantics of a simple imperative programming language, weakest precondition <br>operators and verification condition generation <br>*The capabilities of SMT solvers for discharging verification conditions <br>*Assertion-based software verification <br> <br> <br>Optional topics include: <br>*Industrial temporal logics such as PSL and SVA used in hardware verification <br>*Formal verification case studies <br>*Formal verification of hybrid systems, system with both discrete state changes and <br>continuous state changes governed by differential equations <br>*Combining formal and simulation-based verification methods <br>*Dual use of temporal logic properties and assertions in formal and simulation-based <br>verification of hardware and software  <br>*Software model checking, focusing on its use for finding concurrency bugs <br>*Pattern-based detection of concurrency bugs ",cxinfr11129,Edinburgh_UK,Undergraduate Course: Formal Verification (INFR11129),10,FPL; MSF,SEC; SE,SE; FPL,MSF,SE
Undergraduate Course: Introduction to Modern Cryptography (INFR11131),"<h2>title</h2>Undergraduate Course: Introduction to Modern Cryptography (INFR11131)<h2>summary</h2>Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: ""system assumptions"" such as the faithful execution of code, or the availability of private randomness and ""computational assumptions"". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.<h2>content</h2>        The course is divided in two parts: Private Key and Public Key. Topics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. In the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.<br><br>Part 1: Private Key<br><br>- Classical ciphers: Shift cipher, Vigenere<br>- Perfect secrecy<br>- One-time pad (OTP)<br>- Computational secrecy<br>- Pseudorandom generators (PRG)<br>- Pseudo-OTP<br>- Security against chosen-plaintext attacks (CPA)<br>- Pseudorandom functions / permutations (PRF / PRP)<br>- CPA-secure encryption using PRF/PRP: block ciphers<br>- Modes of operation: block ciphers, stream ciphers<br>- Malleability<br>- Security against chosen-ciphertext attacks (CCA)<br>- Padding-oracle attacks: non-CCA secure schemes<br>- Secrecy vs. integrity: message authentication codes (MAC)<br>- Hash functions<br><br>Part 2: Public Key<br><br>- Digital Signatures<br>- Trapdoor One-Way functions<br>- Random oracles<br>- Cyclic groups<br>- The discrete logarithm/Diffie-Hellman assumptions<br>- Key exchange and the Diffie-Hellman protocol<br>- Public Key Encryption<br>- Security against chosen-plaintext attacks<br>- ElGamal Encryption<br>- Zero-Knowledge proofs<br>- The Schnorr identification scheme ",cxinfr11131,Edinburgh_UK,Undergraduate Course: Introduction to Modern Cryptography (INFR11131),SEC,SEC; MSF,SEC,SEC,SEC; AL,SEC; MSF
Undergraduate Course: Knowledge Graphs (INFR11215),"<h2>title</h2>Undergraduate Course: Knowledge Graphs (INFR11215)<h2>summary</h2>Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them.<h2>content</h2>        In this course, we will cover topics such as:<br>Knowledge graph foundation and standards<br> - RDF (Resource Description Framework)<br> - OWL (Web Ontology Language)<br> - SPARQL (Query Language for RDF and OWL)<br>Knowledge graph construction, embeddings, and completion<br>Knowledge graph reasoning and querying<br> - Tableaux algorithm<br> - Tractable schema reasoning in EL<br> - Tractable query answering in DL-Lite<br> - Semantic parsing <br><br>The students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories. ",cxinfr11215,Edinburgh_UK,Undergraduate Course: Knowledge Graphs (INFR11215),GIT,AI; DM,AI,DM,AI,AI
Undergraduate Course: Machine Learning Practical (INFR11132),"<h2>title</h2>Undergraduate Course: Machine Learning Practical (INFR11132)<h2>summary</h2>This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.<br><br>Semester 1 comprises lectures, labs, and individual coursework.<br><br>Semester 2 is based around small group projects, and also includes tutorials and guest lectures.<br><br>Note: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.<h2>content</h2>        The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:<br><br>* Feed-forward network architectures<br>* Optimisation and learning rules <br>* Regularisation and normalisation<br>* Neural networks for classification<br>* Autoencoders<br>* Convolutional Neural Networks<br>* Recurrent Neural Networks<br><br>MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.<br><br>MLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.<br><br>Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area. ",cxinfr11132,Edinburgh_UK,Undergraduate Course: Machine Learning Practical (INFR11132),AI; SEC,AI,AI; SE,AI,AI,AI
Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130),"<h2>title</h2>Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)<h2>summary</h2>Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br><br>This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).<h2>content</h2>        The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br><br>- Classification and Regression:<br>                  Linear Regression, logistic regression, Bayes classifiers<br>- Expanded feature representations: <br>                  Basis functions, neural networks, kernel methods<br>- Generalization, regularization and inference: <br>                  Penalised cost functions, Bayesian prediction, learning theory<br>- Model selection, pruning and combination: <br>                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>- Representation and metric learning: <br>                  Dimensionality reduction, clustering, feature learning<br><br>To support these topics we will also cover:<br>- Optimization and Inference algorithms: <br>                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>- Practical issues: <br>                   Formulating problems as machine learning, adapting methods to fit problems. <br>                   Numerical and programming issues important for machine learning.<br>                   Ethical issues, such as responsible application of methods and privacy concerns. ",cxinfr11130,Edinburgh_UK,Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130),AI,AI; MSF,AI,AI; AL,AI,AI
76,<h2>title</h2><h2>summary</h2><h2>content</h2> ,cxinfr11248,Edinburgh_UK,,,,,,,
Undergraduate Course: Natural Computing (INFR11161),"<h2>title</h2>Undergraduate Course: Natural Computing (INFR11161)<h2>summary</h2>This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br><br>In this module, students will learn about<br><br>- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br><br>- Some of the underlying theory: How such algorithms work and what is provable about them. <br><br>- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br><br>- Current commercial applications. <br><br>- Current research directions.<h2>content</h2>        The lectures will cover the following subjects:<br><br>- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>- Hybrid, hyperheuristic, and memetic algorithms<br>- Multi-objective optimisation<br>- Genetic programming<br>- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>- Experimental issues: Design and analysis of sets of experiments<br><br>Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling ",cxinfr11161,Edinburgh_UK,Undergraduate Course: Natural Computing (INFR11161),AL,AL,03; AI,AI; AL,AL; 03,AL; MSF
Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023),"<h2>title</h2>Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023)<h2>summary</h2>The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.<h2>content</h2>        * Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.<br>* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.<br>* Realisation in Pthreads and Java.<br>* Issues in message passing programming. Channels and synchronization models.<br>* Realisation in MPI: communicators, simple and collective operations<br>* Selected case studies highlighting alternative approaches, for example,<br>o Associative models. Linda, tuple space and related primitives.<br>o Threading Building Blocks.<br><br>Relevant QAA Computing Curriculum Sections:  Concurrency and Parallelism ",cxinfr11023,Edinburgh_UK,Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023),PDC,PDC,FPL; PDC,FPL,PDC; FPL,AR; PDC
Undergraduate Course: Privacy and Security with Machine Learning (INFR11240),"<h2>title</h2>Undergraduate Course: Privacy and Security with Machine Learning (INFR11240)<h2>summary</h2>The increasing popularity of machine learning (ML) and its new applications has raised security and privacy concerns. ML techniques provide adversaries with new capabilities to undermine the security and privacy of ICT systems. Moreover, there is a growing recognition of the security and privacy issues of ML algorithms. These issues can have tremendous consequences in a society that increasingly relies on ML, so they call for more robust methods that allow harnessing the benefits of ML in adversarial settings.<br><br>This is an introductory course on the topic. The course will provide an overview of adversarial applications of ML techniques, including those that undermine the privacy and security of ML-based systems. The course will also cover existing countermeasures and mitigation strategies.<h2>content</h2>        The course is divided into two blocks:<br><br>1. Emerging applications of ML techniques in the security and privacy domain<br><br>2. Threats to the privacy and security of ML models and risk mitigation strategies<br><br>In Block 1, we will cover novel applications of ML techniques to a range of problems in the security domain: traffic analysis, (de)anonymization of documents, hardware side channels, etc. The focus will be on how ML has augmented the attacker's capabilities.<br><br>In Block 2, we will turn to threats to the security and privacy of ML algorithms. We will review some of the following attacks: membership inference attacks, poisoning attacks, adversarial examples, etc. We will also discuss countermeasures that have been proposed to mitigate these attacks. <br><br>The lectures will combine presentations of specific research papers and the background in ML and Cyber Security required to follow the papers.<br><br>Most of the lectures will have a traditional format, where the lecturer will guide the discussion. The students will prepare for the lectures by reading the papers and reviewing the theory. ",cxinfr11240,Edinburgh_UK,Undergraduate Course: Privacy and Security with Machine Learning (INFR11240),SEC; AI,AI; SEC,AI; SEC,SEC; AI,SEC; AI,AI; SEC
Undergraduate Course: Quantum Cyber Security (INFR11187),"<h2>title</h2>Undergraduate Course: Quantum Cyber Security (INFR11187)<h2>summary</h2>In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.<h2>content</h2>        This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.<br><br>The students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.<br><br>The second part consists of learning and understanding quantum cryptography and specifically ""quantum-key-distribution"" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).<br><br>The third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).<br><br>Finally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3). ",cxinfr11187,Edinburgh_UK,Undergraduate Course: Quantum Cyber Security (INFR11187),SEC,SEC; AL,SEC; AR,SEC; 07,SEC; 07,SEC; AR
Undergraduate Course: Randomized Algorithms (INFR11201),"<h2>title</h2>Undergraduate Course: Randomized Algorithms (INFR11201)<h2>summary</h2>This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.<h2>content</h2>        1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br><br>2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br><br>3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br><br>4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br><br>5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br><br>6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br><br>7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets. ",cxinfr11201,Edinburgh_UK,Undergraduate Course: Randomized Algorithms (INFR11201),AL; MSF,MSF; AL,AL; MSF,AL; 09,AL; MSF,AL; MSF
Postgraduate Course: Secure Programming (INFR11098),"<h2>title</h2>Postgraduate Course: Secure Programming (INFR11098)<h2>summary</h2>This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).<h2>content</h2>        - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance. ",cxinfr11098,Edinburgh_UK,Postgraduate Course: Secure Programming (INFR11098),PDC; SEC,SEC,SEC,SEC; FPL,SEC,SDF; SEC
Undergraduate Course: Text Technologies for Data Science (INFR11145),"<h2>title</h2>Undergraduate Course: Text Technologies for Data Science (INFR11145)<h2>summary</h2>This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. <br><br>This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.<h2>content</h2>        Syllabus:<br>* Introduction to IR and text processing, system components<br>* Zipf, Heaps, and other text laws <br>* Pre-processing: tokenization, normalisation, stemming, stopping.<br>* Indexing: inverted index, boolean and proximity search<br>* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).<br>* Query expansion<br>* IR toolkits and applications<br>* Ranked retrieval and learning to rank<br>* Text classification: feature extraction, baselines, evaluation<br>* Web search ",cxinfr11145,Edinburgh_UK,Undergraduate Course: Text Technologies for Data Science (INFR11145),DM,AI,DM; AI,AI,FPL,AI; AL
Undergraduate Course: Types and Semantics for Programming Languages (INFR11114),"<h2>title</h2>Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)<h2>summary</h2>Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.<h2>content</h2>        - Inductive definitions and proof by induction<br>- Products, sums, unit, empty, and implication.<br>- Intuitionistic and classical logic.<br>- Universals and existentials.<br>- Lists and higher-order types.<br>- Simply-typed lambda calculus. Variable binding.<br>- Call-by-value and call-by-name.<br>- Small-step operational semantics.<br>- Progress and preservation.<br>- Type inference.<br>- Untyped lambda calculus.<br><br>Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing ",cxinfr11114,Edinburgh_UK,Undergraduate Course: Types and Semantics for Programming Languages (INFR11114),FPL; PDC,FPL,FPL,FPL,FPL; MSF,FPL
Undergraduate Course: Usable Security and Privacy (INFR11158),"<h2>title</h2>Undergraduate Course: Usable Security and Privacy (INFR11158)<h2>summary</h2>Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.<h2>content</h2>        Introduction: History and overview of the Usable Security and Privacy research area.<br>Study design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyze usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.<br>Privacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.<br>Security: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.<br>Ethics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable. ",cxinfr11158,Edinburgh_UK,Undergraduate Course: Usable Security and Privacy (INFR11158),SEC,SEC; SEP,SEC; HCI,HCI; SEP,SEC,SEC; SEP
92,<h2>title</h2><h2>summary</h2><h2>content</h2> ,cxinfr11083,Edinburgh_UK,,,,,,,
Advanced Systems Programming (H) COMPSCI4089,"<h2>title</h2>Advanced Systems Programming (H) COMPSCI4089<h2>summary</h2><p id=""_COMPSCI40890""><span id=""_COMPSCI40891"">This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.</span></p><h2>content</h2><p id=""_COMPSCI408927""><span id=""_COMPSCI408928"">The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system. </span></p><p id=""_COMPSCI408929"">&nbsp;</p><p id=""_COMPSCI408930""><span id=""_COMPSCI408931"">The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing</span><span id=""_COMPSCI408932"">&nbsp;</span><span id=""_COMPSCI408933"">systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.</span></p><h2>ilo</h2><p id=""_COMPSCI408935""><span id=""_COMPSCI408936"">By the end of this</span><span id=""_COMPSCI408937"">&nbsp;course students will be able</span><span id=""_COMPSCI408938"">&nbsp;to</span><span id=""_COMPSCI408939"">:</span></p><p id=""_COMPSCI408940""><span id=""_COMPSCI408941"">■&nbsp;</span><span id=""_COMPSCI408942"">Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust; </span><span id=""_COMPSCI408943"">to </span><span id=""_COMPSCI408944"">d</span><span id=""_COMPSCI408945"">iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;</span></p><p id=""_COMPSCI408946""><span id=""_COMPSCI408947"">■&nbsp;</span><span id=""_COMPSCI408948"">Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;</span></p><p id=""_COMPSCI408949""><span id=""_COMPSCI408950"">■&nbsp;</span><span id=""_COMPSCI408951"">Discuss the advantages and disadvantages of integrating automatic memory management with the operating system/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and/or operating systems; </span></p><p id=""_COMPSCI408952""><span id=""_COMPSCI408953"">■&nbsp;</span><span id=""_COMPSCI408954"">Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and</span></p><p id=""_COMPSCI408955""><span id=""_COMPSCI408956"">■&nbsp;</span><span id=""_COMPSCI408957"">Construct and/or analyse simple programming to demonstrate understanding of novel techniques for memory management and/or concurrent programming, to understand the trade-offs and implementation decisions.</span></p> ",COMPSCI4089,Glasgow_Scotland,Advanced Systems Programming (H) COMPSCI4089,FPL,FPL,SE; FPL,FPL,SF; OS; PDC,SF; OS
Algorithmics II (H) COMPSCI4003,"<h2>title</h2>Algorithmics II (H) COMPSCI4003<h2>summary</h2><p id=""_COMPSCI40030""><span id=""_COMPSCI40031"">The aims of the course are: </span></p><p id=""_COMPSCI40032""><span id=""_COMPSCI40033"">To present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span></p><p id=""_COMPSCI40034""><span id=""_COMPSCI40035"">To enable students to make educated choices between strategies for algorithmic problem-solving;</span></p><p id=""_COMPSCI40036""><span id=""_COMPSCI40037"">To convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p><h2>content</h2><p id=""_COMPSCI400339""><span id=""_COMPSCI400340"">The aims of the course are: </span></p><p id=""_COMPSCI400341""><span id=""_COMPSCI400342"">T</span><span id=""_COMPSCI400343"">o present a broad range of algorithm design methods, with examples chosen to reflect practical applications;</span><span id=""_COMPSCI400344"">&nbsp;</span><span id=""_COMPSCI400345"">to enable students to make educated choices between strategies for algorithmic problem-solving;</span><span id=""_COMPSCI400346"">&nbsp;</span><span id=""_COMPSCI400347"">to convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.</span></p><h2>ilo</h2><p id=""_COMPSCI400348""><span id=""_COMPSCI400349"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400350""><span id=""_COMPSCI400351"">1. </span><span id=""_COMPSCI400352"">Describe a wide range of efficient algorithms for problems with important applications in domains such as computational geometry, string processing and graph theory;</span></p><p id=""_COMPSCI400353""><span id=""_COMPSCI400354"">2. </span><span id=""_COMPSCI400355"">Discuss why these algorithms are correct, and prove their correctness;</span></p><p id=""_COMPSCI400356""><span id=""_COMPSCI400357"">3. </span><span id=""_COMPSCI400358"">Demonstrate the execution of such algorithms as applied to typical problem instances;</span></p><p id=""_COMPSCI400359""><span id=""_COMPSCI400360"">4. </span><span id=""_COMPSCI400361"">Characterise and manipulate advanced data structures such as the suffix tree;</span></p><p id=""_COMPSCI400362""><span id=""_COMPSCI400363"">5. </span><span id=""_COMPSCI400364"">Apply algorithmic techniques to specific problems motivated by practical applications;</span></p><p id=""_COMPSCI400365""><span id=""_COMPSCI400366"">6. </span><span id=""_COMPSCI400367"">Analyse the worst-case complexity of algorithms using a variety of mathematical techniques;</span></p><p id=""_COMPSCI400368""><span id=""_COMPSCI400369"">7. </span><span id=""_COMPSCI400370"">Discuss the theory and practical implications of NP-completeness;</span></p><p id=""_COMPSCI400371""><span id=""_COMPSCI400372"">8. </span><span id=""_COMPSCI400373"">Explain techniques for coping with complexity, such as backtracking algorithms, pseudo-polynomial-time algorithms, constant-factor approximation algorithms, and polynomial-time approximation schemes;</span></p><p id=""_COMPSCI400374""><span id=""_COMPSCI400375"">9. </span><span id=""_COMPSCI400376"">Construct proofs of NP-completeness and </span><span id=""_COMPSCI400377"">inapproximability</span><span id=""_COMPSCI400378"">&nbsp;results.</span></p> ",COMPSCI4003,Glasgow_Scotland,Algorithmics II (H) COMPSCI4003,AL,AL,AL,AL,AL,AL
Artificial Intelligence (H) COMPSCI4004,"<h2>title</h2>Artificial Intelligence (H) COMPSCI4004<h2>summary</h2><p id=""_COMPSCI40040""><span id=""_COMPSCI40041"">Artificial Intelligence </span><span id=""_COMPSCI40042"">(</span><span id=""_COMPSCI40043"">H</span><span id=""_COMPSCI40044"">)</span><span id=""_COMPSCI40045"">&nbsp;is an introduction to Artificial Intelligence, giving the students an overview of intelligent agent design.</span></p><h2>content</h2><p id=""_COMPSCI400466""><span id=""_COMPSCI400467"">The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.  </span><span id=""_COMPSCI400468"">Students will gain practical experience in labs, programming various aspects of intelligent systems.</span></p><h2>ilo</h2><p id=""_COMPSCI400472""><span id=""_COMPSCI400473"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI400474""><span id=""_COMPSCI400475"">1. </span><span id=""_COMPSCI400476"">Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of</span><span id=""_COMPSCI400477"">&nbsp;</span><span id=""_COMPSCI400478"">the subject in its current form;</span></p><p id=""_COMPSCI400479""><span id=""_COMPSCI400480"">2. </span><span id=""_COMPSCI400481"">Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems etc</span></p><p id=""_COMPSCI400482""><span id=""_COMPSCI400483"">3. </span><span id=""_COMPSCI400484"">Discuss difficulties in computer perception;</span></p><p id=""_COMPSCI400485""><span id=""_COMPSCI400486"">4. </span><span id=""_COMPSCI400487"">Discuss basic issues in planning;</span></p><p id=""_COMPSCI400488""><span id=""_COMPSCI400489"">5. </span><span id=""_COMPSCI400490"">Explain and apply search-based problem-solving techniques;</span></p><p id=""_COMPSCI400491""><span id=""_COMPSCI400492"">6. </span><span id=""_COMPSCI400493"">Formulate and apply Bayesian networks in modelling and planning;</span></p><p id=""_COMPSCI400494""><span id=""_COMPSCI400495"">7. </span><span id=""_COMPSCI400496"">Explain and apply utility theory as a probabilistic framework for rational decision making;</span></p><p id=""_COMPSCI400497""><span id=""_COMPSCI400498"">8. </span><span id=""_COMPSCI400499"">Explain and apply basic machine learning techniques to learn from rewards and observations</span><span id=""_COMPSCI4004100"">.</span></p> ",COMPSCI4004,Glasgow_Scotland,Artificial Intelligence (H) COMPSCI4004,AI,AI,AI,AI,AI,AI
Database Systems (H) COMPSCI4013,"<h2>title</h2>Database Systems (H) COMPSCI4013<h2>summary</h2><p id=""_COMPSCI40130""><span id=""_COMPSCI40131"">From the basic skills derived in CS</span><span id=""_COMPSCI40132"">1F</span><span id=""_COMPSCI40133"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI40134""><span id=""_COMPSCI40135"">Understanding of how conventional programming languages </span><span id=""_COMPSCI40136"">(e.g., Java/JDBC) </span><span id=""_COMPSCI40137"">interact with databases;</span></p><p id=""_COMPSCI40138""><span id=""_COMPSCI40139"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401310""><span id=""_COMPSCI401311"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401312""><span id=""_COMPSCI401313"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401314""><span id=""_COMPSCI401315"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401316""><span id=""_COMPSCI401317"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p><h2>content</h2><p id=""_COMPSCI401355""><span id=""_COMPSCI401356"">From the basic skills derived in CS1</span><span id=""_COMPSCI401357"">F</span><span id=""_COMPSCI401358"">, to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite. </span></p><p id=""_COMPSCI401359""><span id=""_COMPSCI401360"">Understanding of how conventional programming languages interact with databases;</span></p><p id=""_COMPSCI401361""><span id=""_COMPSCI401362"">Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;</span></p><p id=""_COMPSCI401363""><span id=""_COMPSCI401364"">Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;</span></p><p id=""_COMPSCI401365""><span id=""_COMPSCI401366"">Understanding the cost-based query optimization methods;</span></p><p id=""_COMPSCI401367""><span id=""_COMPSCI401368"">Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;</span></p><p id=""_COMPSCI401369""><span id=""_COMPSCI401370"">Introduction to data analytics tasks and advanced methods &amp; techniques.</span></p><h2>ilo</h2><p id=""_COMPSCI401372""><span id=""_COMPSCI401373"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401374""><span id=""_COMPSCI401375"">1. </span><span id=""_COMPSCI401376"">Demonstrate competence in performing sophisticated queries and updates against an existing RDBMS using most of the advanced features of SQL standard;</span></p><p id=""_COMPSCI401377""><span id=""_COMPSCI401378"">2. </span><span id=""_COMPSCI401379"">Demonstrate skills in designing, writing, changing and testing programs </span><span id=""_COMPSCI401380"">(</span><span id=""_COMPSCI401381"">e.g., Java/JDBC</span><span id=""_COMPSCI401382"">) </span><span id=""_COMPSCI401383"">that use an RDB</span><span id=""_COMPSCI401384"">MS</span><span id=""_COMPSCI401385"">;</span></p><p id=""_COMPSCI401386""><span id=""_COMPSCI401387"">3. </span><span id=""_COMPSCI401388"">Interpret and optimize SQL queries based on the principles of the cost-based query optimization;</span></p><p id=""_COMPSCI401389""><span id=""_COMPSCI401390"">4. </span><span id=""_COMPSCI401391"">Provide an explanation of the database indexing techniques including File Hashing, Search Trees, Multi-level Indexes, B Trees and B+ Trees;</span></p><p id=""_COMPSCI401392""><span id=""_COMPSCI401393"">5. </span><span id=""_COMPSCI401394"">Specify advanced constraints on the DB scheme </span><span id=""_COMPSCI401395"">based on Functional Dependencies &amp; Normalization</span><span id=""_COMPSCI401396"">;</span></p><p id=""_COMPSCI401397""><span id=""_COMPSCI401398"">6. </span><span id=""_COMPSCI401399"">Appreciate </span><span id=""_COMPSCI4013100"">Data analytics and aggregation tasks and t</span><span id=""_COMPSCI4013101"">echniques</span><span id=""_COMPSCI4013102"">;</span></p><p id=""_COMPSCI4013103""><span id=""_COMPSCI4013104"">7. </span><span id=""_COMPSCI4013105"">Provide an explanation of the selection selectivity and join selectivity using histograms for query optimization.</span></p> ",COMPSCI4013,Glasgow_Scotland,Database Systems (H) COMPSCI4013,DM,DM,DM,DM,DM,DM
Functional Programming (H) COMPSCI4021,"<h2>title</h2>Functional Programming (H) COMPSCI4021<h2>summary</h2><p id=""_COMPSCI40210""><span id=""_COMPSCI40211"">Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.</span></p><h2>content</h2><p id=""_COMPSCI402127""><span id=""_COMPSCI402128"">Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills, </span><span id=""_COMPSCI402129"">applying</span><span id=""_COMPSCI402130"">&nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.</span></p><p id=""_COMPSCI402131""><span id=""_COMPSCI402132"">The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.</span></p><h2>ilo</h2><p id=""_COMPSCI402134""><span id=""_COMPSCI402135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402136""><span id=""_COMPSCI402137"">1. </span><span id=""_COMPSCI402138"">Write simple programs involving elementary Haskell techniques, including pure function definitions; </span></p><p id=""_COMPSCI402139""><span id=""_COMPSCI402140"">2. </span><span id=""_COMPSCI402141"">Use standard </span><span id=""_COMPSCI402142"">combinators</span><span id=""_COMPSCI402143"">&nbsp;for operating on lists;</span></p><p id=""_COMPSCI402144""><span id=""_COMPSCI402145"">3. </span><span id=""_COMPSCI402146"">Define new algebraic data types and use recursion to define functions that traverse recursive types;</span></p><p id=""_COMPSCI402147""><span id=""_COMPSCI402148"">4. </span><span id=""_COMPSCI402149"">Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;</span></p><p id=""_COMPSCI402150""><span id=""_COMPSCI402151"">5. </span><span id=""_COMPSCI402152"">Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;</span></p><p id=""_COMPSCI402153""><span id=""_COMPSCI402154"">6. </span><span id=""_COMPSCI402155"">Develop substantial software applications including GUIs and system interaction;</span></p><p id=""_COMPSCI402156""><span id=""_COMPSCI402157"">7. </span><span id=""_COMPSCI402158"">Use formal methods to prove properties of functional programs;</span></p><p id=""_COMPSCI402159""><span id=""_COMPSCI402160"">8. </span><span id=""_COMPSCI402161"">Construct, adapt, and analyse </span><span id=""_COMPSCI402162"">code using standard Haskell platform tools.</span><span id=""_COMPSCI402163"">&nbsp;</span></p> ",COMPSCI4021,Glasgow_Scotland,Functional Programming (H) COMPSCI4021,FPL,FPL,FPL,FPL,FPL,FPL
Human-Computer Interaction (H) COMPSCI4023,"<h2>title</h2>Human-Computer Interaction (H) COMPSCI4023<h2>summary</h2><p id=""_COMPSCI40230""><span id=""_COMPSCI40231"">The aim of this course is to introduce stude</span><span id=""_COMPSCI40232"">nts to advanced topics in Human-</span><span id=""_COMPSCI40233"">Computer Interaction. I</span><span id=""_COMPSCI40234"">n technical terms, i</span><span id=""_COMPSCI40235"">t focuses on </span><span id=""_COMPSCI40236"">data visualisation, collaborative systems and multimodal interaction. It also introduces other </span><span id=""_COMPSCI40237"">novel forms in interaction</span><span id=""_COMPSCI40238"">&nbsp;and evaluation, and legal and ethical issues around interactive and data-centred systems</span><span id=""_COMPSCI40239"">.</span></p><h2>content</h2><p id=""_COMPSCI402347""><span id=""_COMPSCI402348"">This course will bring depth and breadth to the material covered in Interactive Systems H.  Human-Computer Interaction has moved away from a narrow focus on textual windows on a desktop, operated by one person using a keyboard and mouse.  In terms of devices, phones and other mobile systems lead to ubiquitous use and also ubiquitous sharing of data about us. In terms of data, such systems are often used to manipulate and explore complex data, including individual and social data.  They are used at a scale that pervades and changes our society, and legal and ethical issues (e.g. GDPR) are influencing what we design and how we design them. The aim of Human-Computer Interaction H will be to equip our students with skills to design for this broad use of technology. It will also to feed into Mobile Human-Computer Interaction H, which concentrates on mobile systems.</span></p><p id=""_COMPSCI402349"">&nbsp;</p><p id=""_COMPSCI402350""><span id=""_COMPSCI402351"">The aim of </span><span id=""_COMPSCI402352"">this </span><span id=""_COMPSCI402353"">course is to give the students an o</span><span id=""_COMPSCI402354"">verview of advanced topics in Human-Computer </span><span id=""_COMPSCI402355"">I</span><span id=""_COMPSCI402356"">nteraction, covering the</span><span id=""_COMPSCI402357"">&nbsp;key areas of </span><span id=""_COMPSCI402358"">interaction with complex, personal and social data, via data analytics (in particular, visual analytics), and via multimodal interaction. It will address the ways that we design and evaluate such systems</span><span id=""_COMPSCI402359"">. There will also be a significant piece of coursework where the students will have </span><span id=""_COMPSCI402360"">to design, implement and evaluate an </span><span id=""_COMPSCI402361"">interactive application. This will give them valuable experience in </span><span id=""_COMPSCI402362"">development and justification of</span><span id=""_COMPSCI402363"">&nbsp;</span><span id=""_COMPSCI402364"">such systems</span><span id=""_COMPSCI402365"">.</span></p><h2>ilo</h2><p id=""_COMPSCI402367""><span id=""_COMPSCI402368"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI402369""><span id=""_COMPSCI402370"">1. </span><span id=""_COMPSCI402371"">Identify the </span><span id=""_COMPSCI402372"">key</span><span id=""_COMPSCI402373"">&nbsp;</span><span id=""_COMPSCI402374"">concepts</span><span id=""_COMPSCI402375"">&nbsp;and </span><span id=""_COMPSCI402376"">exemplars</span><span id=""_COMPSCI402377"">&nbsp;in </span><span id=""_COMPSCI402378"">the design of</span><span id=""_COMPSCI402379"">&nbsp;novel </span><span id=""_COMPSCI402380"">visualisation systems, collaborative systems, and </span><span id=""_COMPSCI402381"">multimodal </span><span id=""_COMPSCI402382"">systems, and in ethical system design</span><span id=""_COMPSCI402383"">;</span></p><p id=""_COMPSCI402384""><span id=""_COMPSCI402385"">2. </span><span id=""_COMPSCI402386"">Identify the</span><span id=""_COMPSCI402387"">&nbsp;main</span><span id=""_COMPSCI402388"">&nbsp;issues </span><span id=""_COMPSCI402389"">and key concepts in evaluating such systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria</span><span id=""_COMPSCI402390"">;</span></p><p id=""_COMPSCI402391""><span id=""_COMPSCI402392"">3. </span><span id=""_COMPSCI402393"">Have</span><span id=""_COMPSCI402394"">&nbsp;experience designing </span><span id=""_COMPSCI402395"">such systems, by d</span><span id=""_COMPSCI402396"">esign</span><span id=""_COMPSCI402397"">ing</span><span id=""_COMPSCI402398"">, develop</span><span id=""_COMPSCI402399"">ing and evaluating</span><span id=""_COMPSCI4023100"">&nbsp;a significant piece of interactive software embodying key aspects of the course.</span></p> ",COMPSCI4023,Glasgow_Scotland,Human-Computer Interaction (H) COMPSCI4023,HCI,HCI; SEP,HCI,HCI,HCI,HCI
Machine Learning (H) COMPSCI4061,"<h2>title</h2>Machine Learning (H) COMPSCI4061<h2>summary</h2><p id=""_COMPSCI40610""><span id=""_COMPSCI40611"">A practical introduction to the foundations of machine learning.</span></p><h2>content</h2><p id=""_COMPSCI406132""><span id=""_COMPSCI406133"">To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.</span></p><h2>ilo</h2><p id=""_COMPSCI406134""><span id=""_COMPSCI406135"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI406136""><span id=""_COMPSCI406137"">1. </span><span id=""_COMPSCI406138"">Discuss the principle of learning from data;</span></p><p id=""_COMPSCI406139""><span id=""_COMPSCI406140"">2. </span><span id=""_COMPSCI406141"">Describe the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;</span></p><p id=""_COMPSCI406142""><span id=""_COMPSCI406143"">3. </span><span id=""_COMPSCI406144"">Use a selection of common machine learning algorithms and be aware of when one is to be favoured over other;</span></p><p id=""_COMPSCI406145""><span id=""_COMPSCI406146"">4. </span><span id=""_COMPSCI406147"">Implement and use machine learning algorithms in </span><span id=""_COMPSCI406148"">Matlab</span><span id=""_COMPSCI406149"">;</span></p><p id=""_COMPSCI406150""><span id=""_COMPSCI406151"">5. </span><span id=""_COMPSCI406152"">Discuss the major machine learning application area in, for example, Information Retrieval,</span></p><p id=""_COMPSCI406153""><span id=""_COMPSCI406154"">6. </span><span id=""_COMPSCI406155"">Human Computer Interaction, Bioinformatics and Computer Visions &amp; Graphics;</span></p><p id=""_COMPSCI406156""><span id=""_COMPSCI406157"">7. </span><span id=""_COMPSCI406158"">Detail emerging machine learning approaches such as non-parametric methods and sampling techniques</span><span id=""_COMPSCI406159"">;</span></p><p id=""_COMPSCI406160""><span id=""_COMPSCI406161"">8. </span><span id=""_COMPSCI406162"">Produce a Multimedia System.</span></p> ",COMPSCI4061,Glasgow_Scotland,Machine Learning (H) COMPSCI4061,AI,AI,AI,AI,AI,AI
Mobile Human-Computer Interaction (H) COMPSCI4068,"<h2>title</h2>Mobile Human-Computer Interaction (H) COMPSCI4068<h2>summary</h2><p id=""_COMPSCI40680""><span id=""_COMPSCI40681"">Mobile Human-Computer Interaction </span><span id=""_COMPSCI40682"">(H) </span><span id=""_COMPSCI40683"">gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.</span></p><h2>content</h2><p id=""_COMPSCI406827""><span id=""_COMPSCI406828"">This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and </span><span id=""_COMPSCI406829"">methods</span><span id=""_COMPSCI406830"">&nbsp;</span><span id=""_COMPSCI406831"">for</span><span id=""_COMPSCI406832"">&nbsp;prototyping novel interactions.</span></p><h2>ilo</h2><p id=""_COMPSCI406833""><span id=""_COMPSCI406834"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI406835""><span id=""_COMPSCI406836"">1. </span><span id=""_COMPSCI406837"">Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.</span></p><p id=""_COMPSCI406838""><span id=""_COMPSCI406839"">2. </span><span id=""_COMPSCI406840"">Critically analyse a proposed mobile interactive system considering its intended usage context.</span></p><p id=""_COMPSCI406841""><span id=""_COMPSCI406842"">3. </span><span id=""_COMPSCI406843"">Design usable mobile interactive systems for a given problem or application area.</span></p><p id=""_COMPSCI406844""><span id=""_COMPSCI406845"">4. </span><span id=""_COMPSCI406846"">Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.</span></p><p id=""_COMPSCI406847""><span id=""_COMPSCI406848"">5. </span><span id=""_COMPSCI406849"">Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.</span></p> ",COMPSCI4068,Glasgow_Scotland,Mobile Human-Computer Interaction (H) COMPSCI4068,HCI,SPD; HCI,HCI,HCI; SPD,HCI,HCI; GIT
Networked Systems (H) COMPSCI4012,"<h2>title</h2>Networked Systems (H) COMPSCI4012<h2>summary</h2><p id=""_COMPSCI40120""><span id=""_COMPSCI40121"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI40122""><span id=""_COMPSCI40123"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI40124""><span id=""_COMPSCI40125"">To introduce low-level network programming concepts, and give students practice with systems programming in C;</span></p><p id=""_COMPSCI40126""><span id=""_COMPSCI40127"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p><h2>content</h2><p id=""_COMPSCI401247""><span id=""_COMPSCI401248"">■&nbsp;</span><span id=""_COMPSCI401249"">To introduce the fundamental concepts and theory of communications;</span></p><p id=""_COMPSCI401250""><span id=""_COMPSCI401251"">■&nbsp;</span><span id=""_COMPSCI401252"">To provide a solid understanding of the technologies that support modern networked computer systems;</span></p><p id=""_COMPSCI401253""><span id=""_COMPSCI401254"">■&nbsp;</span><span id=""_COMPSCI401255"">To introduce low-level network </span><span id=""_COMPSCI401256"">programming concepts, and give students practice with systems programming in C</span><span id=""_COMPSCI401257"">;</span></p><p id=""_COMPSCI401258""><span id=""_COMPSCI401259"">■&nbsp;</span><span id=""_COMPSCI401260"">To provide our students with the ability to evaluate and advise industry on the use and deployment of networked systems.</span></p><h2>ilo</h2><p id=""_COMPSCI401262""><span id=""_COMPSCI401263"">By the end of the course students will be able to:</span></p><p id=""_COMPSCI401264""><span id=""_COMPSCI401265"">1. </span><span id=""_COMPSCI401266"">Describe and compare capabilities of various communication technologies and techniques;</span></p><p id=""_COMPSCI401267""><span id=""_COMPSCI401268"">2. </span><span id=""_COMPSCI401269"">Point out differences between networks of different scale, and how these affect their design;</span></p><p id=""_COMPSCI401270""><span id=""_COMPSCI401271"">3. </span><span id=""_COMPSCI401272"">Describe the issues in connecting heterogeneous networks;</span></p><p id=""_COMPSCI401273""><span id=""_COMPSCI401274"">4. </span><span id=""_COMPSCI401275"">Describe importance of layering, and the OSI reference model;</span></p><p id=""_COMPSCI401276""><span id=""_COMPSCI401277"">5. </span><span id=""_COMPSCI401278"">Detail demands of different applications on quality of service requirements for the underlying communication network;</span></p><p id=""_COMPSCI401279""><span id=""_COMPSCI401280"">6. </span><span id=""_COMPSCI401281"">Demonstrate an understanding of the design and operation of an IP network, such as the Internet, and explain the purpose and function of its various components;</span></p><p id=""_COMPSCI401282""><span id=""_COMPSCI401283"">7. </span><span id=""_COMPSCI401284"">Write simple l</span><span id=""_COMPSCI401285"">ow-level communication software, showing awareness of good practice for correct and secure programming.</span></p> ",COMPSCI4012,Glasgow_Scotland,Networked Systems (H) COMPSCI4012,SEC; NC,NC,NC,NC,NC; SF,NC
Robotics Foundations (H) COMPSCI4076,"<h2>title</h2>Robotics Foundations (H) COMPSCI4076<h2>summary</h2><p id=""_COMPSCI40760""><span id=""_COMPSCI40761"">This course will introduce students to the computational</span><span id=""_COMPSCI40762"">&nbsp;and mathematical</span><span id=""_COMPSCI40763"">&nbsp;concepts, information processing and software frameworks of robotic systems. It will also consider the sensory and actuation systems required by a robot to sense, understand and interact with its environment. The primary aim is to give students an understanding of how to prototype and implement </span><span id=""_COMPSCI40764"">autonomous </span><span id=""_COMPSCI40765"">robotic systems by making use of </span><span id=""_COMPSCI40766"">a </span><span id=""_COMPSCI40767"">sophisticated robotic middleware (e.g. Robot Operating System (ROS)), its associated data transmission channels</span><span id=""_COMPSCI40768"">, </span><span id=""_COMPSCI40769"">software </span><span id=""_COMPSCI407610"">robotic </span><span id=""_COMPSCI407611"">stacks</span><span id=""_COMPSCI407612"">&nbsp;and the underlying mathematics required to operate a robot</span><span id=""_COMPSCI407613"">. </span><span id=""_COMPSCI407614"">This</span><span id=""_COMPSCI407615"">&nbsp;is a hands-on course, designed to provide </span><span id=""_COMPSCI407616"">student</span><span id=""_COMPSCI407617"">s with the required programming</span><span id=""_COMPSCI407618"">, mathematical</span><span id=""_COMPSCI407619"">&nbsp;and debugging skill-set to implement robotic solutions based on</span><span id=""_COMPSCI407620"">&nbsp;the</span><span id=""_COMPSCI407621"">&nbsp;use of off-the-shelf commercially available real and virtual robots.</span><span id=""_COMPSCI407622"">&nbsp;P</span><span id=""_COMPSCI407623"">ython skills are a requirement for this course</span><span id=""_COMPSCI407624"">; </span><span id=""_COMPSCI407625"">C/C++ skills are desirable but not essential</span><span id=""_COMPSCI407626"">.</span></p><h2>content</h2><p id=""_COMPSCI407653""><span id=""_COMPSCI407654"">The aims of Robotics Foundations are:</span></p><p id=""_COMPSCI407655""><span id=""_COMPSCI407656"">■&nbsp;</span><span id=""_COMPSCI407657"">To facilitate students understanding of </span><span id=""_COMPSCI407658"">core concepts involved in robot</span><span id=""_COMPSCI407659"">ic software </span><span id=""_COMPSCI407660"">development</span><span id=""_COMPSCI407661"">, from perception to planning and action</span><span id=""_COMPSCI407662"">;</span></p><p id=""_COMPSCI407663""><span id=""_COMPSCI407664"">■&nbsp;</span><span id=""_COMPSCI407665"">To </span><span id=""_COMPSCI407666"">understand</span><span id=""_COMPSCI407667"">&nbsp;</span><span id=""_COMPSCI407668"">how sensed data and pre-obtained information, or world/domain ""knowledge"", is used to plan interaction with the environment</span></p><p id=""_COMPSCI407669""><span id=""_COMPSCI407670"">■&nbsp;</span><span id=""_COMPSCI407671"">To understand matrix and </span><span id=""_COMPSCI407672"">transformation </span><span id=""_COMPSCI407673"">mathematical </span><span id=""_COMPSCI407674"">operators to accomplish complex robotic motions.</span></p><p id=""_COMPSCI407675""><span id=""_COMPSCI407676"">■&nbsp;</span><span id=""_COMPSCI407677"">To develop the ability to implement, test</span><span id=""_COMPSCI407678"">, validate and deploy a </span><span id=""_COMPSCI407679"">mobile/manipulation robotic problem, based on </span><span id=""_COMPSCI407680"">the </span><span id=""_COMPSCI407681"">use of </span><span id=""_COMPSCI407682"">the</span><span id=""_COMPSCI407683"">&nbsp;</span><span id=""_COMPSCI407684"">R</span><span id=""_COMPSCI407685"">obot </span><span id=""_COMPSCI407686"">O</span><span id=""_COMPSCI407687"">perating </span><span id=""_COMPSCI407688"">S</span><span id=""_COMPSCI407689"">ystem</span><span id=""_COMPSCI407690"">.</span></p><p id=""_COMPSCI407691""><span id=""_COMPSCI407692"">■&nbsp;</span><span id=""_COMPSCI407693"">The relationship between physical robots and their virtual equivalents required for simulation, development </span><span id=""_COMPSCI407694"">and debugging</span><span id=""_COMPSCI407695"">&nbsp;will also be considered.</span></p><p id=""_COMPSCI407696""><span id=""_COMPSCI407697"">■&nbsp;</span><span id=""_COMPSCI407698"">To develop a complete robotic application using off-the-shelf virtual robotic platforms.</span></p><h2>ilo</h2><p id=""_COMPSCI4076100""><span id=""_COMPSCI4076101"">By the end of this course</span><span id=""_COMPSCI4076102"">,</span><span id=""_COMPSCI4076103"">&nbsp;students will be able to:</span></p><p id=""_COMPSCI4076104"">&nbsp;</p><p id=""_COMPSCI4076105""><span id=""_COMPSCI4076106"">1. </span><span id=""_COMPSCI4076107"">Describe </span><span id=""_COMPSCI4076108"">and understand </span><span id=""_COMPSCI4076109"">what constitutes a robot system</span></p><p id=""_COMPSCI4076110""><span id=""_COMPSCI4076111"">2. </span><span id=""_COMPSCI4076112"">Formulate</span><span id=""_COMPSCI4076113"">&nbsp;robot's information capabilities within robotic middleware and understand how data is transformed </span><span id=""_COMPSCI4076114"">from basic</span><span id=""_COMPSCI4076115"">&nbsp;control, sensor and perception functions to robot actions</span></p><p id=""_COMPSCI4076116""><span id=""_COMPSCI4076117"">3. </span><span id=""_COMPSCI4076118"">Create and implement</span><span id=""_COMPSCI4076119"">&nbsp;robot kinematics and motions in mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076120""><span id=""_COMPSCI4076121"">4. </span><span id=""_COMPSCI4076122"">Apply techniques for path and motion planning that allows a robot to move</span></p><p id=""_COMPSCI4076123""><span id=""_COMPSCI4076124"">5. </span><span id=""_COMPSCI4076125"">Design control/behaviour tasks for mobile robots and robot manipulators</span></p><p id=""_COMPSCI4076126""><span id=""_COMPSCI4076127"">6. </span><span id=""_COMPSCI4076128"">Apply</span><span id=""_COMPSCI4076129"">&nbsp;practical software engineering principles during the development of a robotic application</span></p><p id=""_COMPSCI4076130""><span id=""_COMPSCI4076131"">7. </span><span id=""_COMPSCI4076132"">Understand the facilities provided by ROS and how to structure robot control software systems using ROS and vision systems in </span><span id=""_COMPSCI4076133"">OpenCV</span><span id=""_COMPSCI4076134"">.</span></p><p id=""_COMPSCI4076135""><span id=""_COMPSCI4076136"">8. </span><span id=""_COMPSCI4076137"">Be able to program a data processing pipeline consisting of a robot control system in the ROS environment to carry out a specific task, such as locating an object, grasping it and placing it in another location.</span></p> ",COMPSCI4076,Glasgow_Scotland,Robotics Foundations (H) COMPSCI4076,FPL,SPD,AI,AI; SPD,SPD,SPD; AI
Text as Data - An Introduction to Document Analytics (H) COMPSCI4074,"<h2>title</h2>Text as Data - An Introduction to Document Analytics (H) COMPSCI4074<h2>summary</h2><p id=""_COMPSCI40740""><span id=""_COMPSCI40741"">This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches.</span><span id=""_COMPSCI40742"">&nbsp;</span><span id=""_COMPSCI40743"">The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka/Spark Mlib).</span></p><h2>content</h2><p id=""_COMPSCI407418""><span id=""_COMPSCI407419"">This course aims to introduce students to </span><span id=""_COMPSCI407420"">language modelling, geometric interpretations of documents, information theory, network models and in general the use of </span><span id=""_COMPSCI407421"">stochastic thinking (including building on the probability theory learned during the </span><span id=""_COMPSCI407422"">Data Fundamentals</span><span id=""_COMPSCI407423"">&nbsp;c</span><span id=""_COMPSCI407424"">ourse). This is</span><span id=""_COMPSCI407425"">&nbsp;illustrated through </span><span id=""_COMPSCI407426"">a number of</span><span id=""_COMPSCI407427"">&nbsp;supervised and unsupervised text processing and analytics approaches</span><span id=""_COMPSCI407428"">&nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics</span><span id=""_COMPSCI407429"">. </span><span id=""_COMPSCI407430"">&nbsp;</span><span id=""_COMPSCI407431"">The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka/Spark </span><span id=""_COMPSCI407432"">Mlib</span><span id=""_COMPSCI407433"">).</span></p><h2>ilo</h2><p id=""_COMPSCI407436""><span id=""_COMPSCI407437"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407438""><span id=""_COMPSCI407439"">1. </span><span id=""_COMPSCI407440"">Describe classical models</span><span id=""_COMPSCI407441"">&nbsp;for textual representations</span><span id=""_COMPSCI407442"">&nbsp;such as the vector space, network graphs, language modelling.</span></p><p id=""_COMPSCI407443""><span id=""_COMPSCI407444"">2. </span><span id=""_COMPSCI407445"">Identify potential applications of text analytics in practice.  </span></p><p id=""_COMPSCI407446""><span id=""_COMPSCI407447"">3. </span><span id=""_COMPSCI407448"">Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.</span></p><p id=""_COMPSCI407449""><span id=""_COMPSCI407450"">4. </span><span id=""_COMPSCI407451"">Represent data as features to serve as input to machine learning models. </span></p><p id=""_COMPSCI407452""><span id=""_COMPSCI407453"">5. </span><span id=""_COMPSCI407454"">Assess machine learning model quality in terms</span><span id=""_COMPSCI407455"">&nbsp;of relevant error metrics for</span><span id=""_COMPSCI407456"">&nbsp;document processing tasks, in an appropriate experimental design.</span></p><p id=""_COMPSCI407457""><span id=""_COMPSCI407458"">6. </span><span id=""_COMPSCI407459"">Deploy unsupervised and machine learned approaches for document/text analytics tasks.</span></p> ",COMPSCI4074,Glasgow_Scotland,Text as Data - An Introduction to Document Analytics (H) COMPSCI4074,DM,AI,AI,AI,FPL; AI,AI; DM
Theory of Computation (H) COMPSCI4072,"<h2>title</h2>Theory of Computation (H) COMPSCI4072<h2>summary</h2><p id=""_COMPSCI40720""><span id=""_COMPSCI40721"">This course covers the theory of sequential and concurrent computation. The main topics include the lambda calculus as a foundation for functional computation and the pi calculus as a foundation for concurrent computation; the theory of operational semantics and type systems for both these calculi.</span></p><h2>content</h2><p id=""_COMPSCI407222""><span id=""_COMPSCI407223"">The aim of the course is to show how these two models of computation can be formally defined in order to give a rigorous foundation for sequential and concurrent programming paradigms.</span></p><h2>ilo</h2><p id=""_COMPSCI407224""><span id=""_COMPSCI407225"">By the end of this course students will be able to:</span></p><p id=""_COMPSCI407226""><span id=""_COMPSCI407227"">1. </span><span id=""_COMPSCI407228"">Express concepts such as syntax, semantics and typing rules in a formal way;</span></p><p id=""_COMPSCI407229""><span id=""_COMPSCI407230"">2. </span><span id=""_COMPSCI407231"">Evaluate expressions in lambda calculus according to the definition of the reduction relation</span><span id=""_COMPSCI407232"">;</span></p><p id=""_COMPSCI407233""><span id=""_COMPSCI407234"">3. </span><span id=""_COMPSCI407235"">Determine whether or not expressions in lambda calculus are typable in the simple type system</span><span id=""_COMPSCI407236"">;</span></p><p id=""_COMPSCI407237""><span id=""_COMPSCI407238"">4. </span><span id=""_COMPSCI407239"">Implement lambda calculus expressions in a functional language such as Haskell or ML, or the functional fragment of Python</span><span id=""_COMPSCI407240"">;</span></p><p id=""_COMPSCI407241""><span id=""_COMPSCI407242"">5. </span><span id=""_COMPSCI407243"">Execute pi calculus processes according to the definition </span><span id=""_COMPSCI407244"">of the reduction relation, and determine </span><span id=""_COMPSCI407245"">bisimulation</span><span id=""_COMPSCI407246"">&nbsp;relationships between processes;</span></p><p id=""_COMPSCI407247""><span id=""_COMPSCI407248"">6. </span><span id=""_COMPSCI407249"">Determine whether or not processes in pi calculus are typable in the simple type system</span><span id=""_COMPSCI407250"">;</span></p><p id=""_COMPSCI407251""><span id=""_COMPSCI407252"">7. </span><span id=""_COMPSCI407253"">Implement pi calculus processes in a simulation environment or in an appropriate fragment of the Go programming language</span><span id=""_COMPSCI407254"">;</span></p><p id=""_COMPSCI407255""><span id=""_COMPSCI407256"">8. </span><span id=""_COMPSCI407257"">Connect both the lambda calculus and the pi calculus to logic under Curry-Howard correspondences, which make the foundation for functional and concurrent programming.</span></p> ",COMPSCI4072,Glasgow_Scotland,Theory of Computation (H) COMPSCI4072,FPL,FPL; MSF,FPL; AL,AL,MSF; PDC,AL
Neural networks and deep learning,"<h2>title</h2>Neural networks and deep learning<h2>summary</h2>Neural Networks and Deep Learning recently have gained strong interest (Deep Learning has been considered one of 10 breakthrough technologies by the MIT Technology Review 2013). The aim of the course is to provide a fundamental understanding of important concepts, algorithms, techniques and architectures of neural networks and deep learning.<h2>content</h2>Biological basis (neuron and networks)Artificial neuron modelsArtificial neural networks: Architectures and the learning problemFeedforward neural networks, multi-layer perceptronLearning in neural networks and the backpropagation algorithmDeep Learning: Motivation and conceptsConvolutional neural networks(If time permits:) Recurrent neural networks: Long Short Term Memory (LSTM)(If time permits:) Unsupervised learning: Autoencoders(If time permits:) Generative models: Variational Autoencoder, Generative Adversarial Networks<h2>ilo</h2>After completing the course, students shouldhave a basic overview over neural network and deep learning concepts, algorithms and architectures, suitable applications, capabilities and limitations,be able to apply suitable neural network and deep learning techniques to new problems,analyze the outcome of neural network and deep learning experiments and explore potential methods to improve performance. ",Inf-NNDL,CAU_Germany,Neural networks and deep learning,SEC; NC,AI,AI,AI,AI,AI
Introduction to Nonlinear Optimization,"<h2>title</h2>Introduction to Nonlinear Optimization<h2>summary</h2>Theory and algorithms for solving general, non-linear optimization problems with and without constraints from various fields of application.<h2>content</h2>Classification of optimization problemsOptimality criteria for unconstrained problemsAlgorithms for unconstrained problems, gradient-based and derivative-free methodsAlgorithmic DifferentiationOptimality criteria for problems with constraintsAlgorithms for constraint problems<h2>ilo</h2>Modeling and formalization of optimization tasks given in text formClassify optimization problemsApply optimality criteriaImplement and apply algorithms to solve optimization tasksEvaluate and evaluate the results of optimization algorithms ",inf-EnlOpt,CAU_Germany,Introduction to Nonlinear Optimization,AL,MSF,AL,AL; 09,MSF,AI
Autonomous Learning,"<h2>title</h2>Autonomous Learning<h2>summary</h2>Autonomous Learning research aims at understanding how autonomous systems can efficiently learn from the interaction with the environment, especially by having an integrated approach to decision making and learning, allowing systems to autonomously decide on actions, representations, hyper-parameters and model structures for the purpose of efficient learning. The term ""autonomous"" refers to the ability of the system to learn without or with only very limited external support, which includes manual intervention of humans, availability of pre-defined models or expert knowledge, and availability of large sets of sample data. Specific research topics are: Adaptation of the learning models / techniques based on observations, learning from interaction with the environment, re-using knowledge from one domain in another domain, detection of behaviour that deviates from 'usual' or expected behaviour, and learning from and with other systems of the same kind. The lecture gives an introduction to the field of autonomous learning with a particular focus on a utilisation of the different techniques within intelligent systems. Autonomous Learning is cutting edge research, which means that parts of the lecture are based on current research articles rather than on textbooks. Furthermore, a practitioner's perspective is combined with theoretical understanding of the concepts: the lecture units are combined with traditional exercises but also with practical tasks that have to be solved by making use of techniques discussed in the lecture.<h2>content</h2>a) Introduction and organisationb) Machine learning basicsc) Reinforcement Learningd) Anomaly/Novelty Detectione) Active LearningFurther (depending on time and scope), the following topics may be covered as well:f) Transfer Learningg) Model selection (hyper-parameter optimisation and evaluation)h) Collaborative Learningi) Summary and outlook (incl. meta-learning)<h2>ilo</h2>The overall goal of the course is to derive a basic understanding of the motivation, the general concept, and particularly important methods covering the most prominent parts of the field of autonomous learning. This includes techniques for the following aspects of machine learning:Fully autonomous learning behaviour: hyper-parameter optimisation, transfer learning, (self-)evaluation,self-awareness or environment-awareness with a major focus on anomaly/novelty detectionBy interaction with the environment via sensors and actuators: reinforcement learningBy efficiently integrating humans into the learning process: active learningBy interacting with other intelligent systems: collaborative learningBy using all the above: meta-learningParticular goals are:a) Knowledge / Skills:Understanding of methods for achieving ""intelligence"" in technical systems, control of learning behaviour with minimal user interaction, continuous self-improvement of system behaviour, cooperation in learning between distributed technical systemsb) Abilities:Selection and application of techniques of machine learning in technical systems under real-world conditions to control autonomous system behaviourc) Competencies:Ability to analyse autonomous learning processes and their behaviour, to determine and interpret relevant assessment parameters / Competence to plan, design and develop intelligent technical systems with the ability to learn autonomously ",inf-AuLearn,CAU_Germany,Autonomous Learning,AI; FPL,AI,AI,AI,AI,AI; SDF
Multimedia Signal Processing and Data Compression,"<h2>title</h2>Multimedia Signal Processing and Data Compression<h2>summary</h2>There will be basic features of audiovisual information processing with applications in the compression and coding of audiovisual data. The basics of digital signal processing occupy a wide space (50%). Themes:Basics of human perception (psycho-optics and psycho-acoustics)Basics of digital signal processingBasics of data compressionCompression of multimedia data using the example of JPEG and MPEG<h2>content</h2>1) Basics of human perceptionPsycho-opticsPsycho-acoustics2) Basics of signal processingSignal models and system modelsContinuous and discrete signalsContinuous and discreet Fourier transformationFiltering of audio signals3) Basics of data compressionEntropy codes (Huffmann Code, Arithmetic Code)Dictionaries (Lempel-Ziv)4) Application in the field of audiovisual information processingJPEGMPEG VideoMPEG Audio<h2>ilo</h2>The processing of real-world signals in the computer is a central task of digital signal processing. In this lecture, the basics of continuous and discrete signals as well as their representation and processing in the time and frequency range are discussed. These basics are explained in more detail in the context of data compression of multimedia data (JPEG, MPEG).The lecture deals with the basics of signal processing (50%) as well as its use in the compression of audiovisual data (50%). The students learn the theoretical basics and apply them practically using the example of audio and video compression. Exercises are performed in Matlab/Oktav. ",Inf-DigSig,CAU_Germany,Multimedia Signal Processing and Data Compression,GIT,MSF; GIT,AL; AR,10; AL,AL; 03,GIT; AR
E-Business und E-Marketing,"<h2>title</h2>E-Business und E-Marketing<h2>summary</h2>In this module, important application systems and their implementation are considered as examples. In addition, the integration of subcomponents is considered. Deployment concepts are developed from a business point of view.<h2>content</h2>The subject of the event is the following areas and subsystems of electronic commerce:Web shops and eProcurementCustomer Relationship Management Systems (CRM)Public administration systems (e.g. B. E-Government)mobile tradeIntegration of systems, e.g. web shop with CRM and merchandise management systemsTrade between companies and marketing concepts is considered.<h2>ilo</h2>The participants have an in-depth understanding of selected sub-areas of electronic commerce and other operational application systems. The theoretical aspects known from other events are supplemented by an understanding of the practical procedure. The students have experience in the practical use of the systems and know procedures for the systematic procedure. They have developed the first business models and can understand business models that are typical of electronic commerce. ",WInf-eBeM,CAU_Germany,E-Business und E-Marketing,17,17,SPD; SEP; 17,DM; SE,SPD,17; SE; DM
Mobile Web Development,"<h2>title</h2>Mobile Web Development<h2>summary</h2>This course introduces the concepts, practices, and technologies to design, develop, and manage cross-platform web sites and applications running on modern mobile devices.<h2>ilo</h2>1. Compare and contrast user interactions with web sites and applications delivered as desktop web, mobile web, and mobile application.2. Apply appropriate mobile user interface design principles and techniques to create responsive and touch friendly web user interfaces.3. Use latest web technologies and programming languages to create cross platform web sites and applications.4. Identify and use the appropriate development technologies, tools, and frameworks for mobile web development. ",IT4213,Kennesaw_USA,Mobile Web Development,GIT,SPD,SPD; SEP,SPD,SPD,SDF; SE
3D Modeling and Animation,"<h2>title</h2>3D Modeling and Animation<h2>summary</h2>This course explores the theory and application of 3D geometric model generation and animation. Topics include mesh and Non-uniform Rational B-Spline (NURB) modeling, textures, subdivision and levels of model detail, rigid/constrained body dynamics, and non-rigid/fluid dynamics. Students will be required to develop and animate a complex model, and a significant project is required <h2>ilo</h2>1. Describe the mathematics of 3D modeling and animation2. Apply 3D modeling animation in generating a complex rendered scene3. Utilize modern applications that streamline the modeling and animation process4. Discuss the complexity of modeling and animation and trade-offs between fidelity and performance ",CGDD4113,Kennesaw_USA,3D Modeling and Animation,GIT,GIT; MSF,GIT,GIT,GIT,GIT; SDF
Production Pipeline and Asset Management,"<h2>title</h2>Production Pipeline and Asset Management<h2>summary</h2>This course provides an in-depth exploration of the production of media content. This course covers elements of the production pipeline from concept to content generation to post production and quality assurance. Topics include asset creation and management, cost-quality tradeoffs, and phases of production. Current and emerging models of the production pipeline such as user-generated content and participation will also be discussed. A significant, team-based project is required. <h2>ilo</h2>1. Describe the phases of game and media production2. Apply quality-assurance concepts in a game and media setting3. Work within a team environment to produce game media content4. Describe current and emerging models of game production and user-generated content ",CGDD4603,Kennesaw_USA,Production Pipeline and Asset Management,GIT; HCI,GIT; SPD; 21,SEP; 17,SE; SPD,SPD,SE; SPD
Deep Learning,"<h2>title</h2>Deep Learning<h2>summary</h2>This course covers the foundations of Deep Learning; how to build neural networks and how to design successful deep learning projects. The course topics include convolutional networks, sequence modeling such as recurrent and recursive neural networks (RNNs), long short-term memory (LSTM), Adam, Dropout, BatchNorm, Xavier/He initialization, state-of-the-art technologies, and research topics leveraging Deep Learning. The course includes programming assignments in Python and in TensorFlow. <h2>ilo</h2>1. Understand the state-of-the-art technologies and their trends driving Deep Learning2. Build, train, and apply fully connected deep neural networks3. Understand how to implement efficient neural networks4. Understand key parameters in Deep Learning architecture5. Explain how Deep Learning works6. Demonstrate the capability of communication with peers for research ideas in Deep Learning related fields ",CS4277,Kennesaw_USA,Deep Learning,AI; FPL,AI,AI,AI; SPD,AI,AI
Mobile Software Development,<h2>title</h2>Mobile Software Development<h2>summary</h2>This course primarily focuses on mobile sensor application development and security of smartphones and mobile telecommunication systems. The goals of the course is to provide students with real world relevant mobile sensor app development and improve their knowledge and skills on mobile application development and mobile security. <h2>ilo</h2>1. Use Android Development Environment2. Design a user interface for a mobile device3. Use Android Development Libraries to develop mobile apps4. Test mobile apps ,CS4322,Kennesaw_USA,Mobile Software Development,18,SPD,NC; SE,SPD,SPD,SE; SPD
Information Retrieval,"<h2>title</h2>Information Retrieval<h2>summary</h2>This course covers the fundamentals of Internet search engines, including Web crawlers, inverted indices, hyperlink analysis, and relevance ranking. Also covered are advanced topics including information extraction for knowledge base construction, question answering, search marketing and ad targeting, and activity mining for relevance optimization and personalization. <h2>ilo</h2>1. Master the fundamentals of Web search engines2. Master the Web search related enabling technologies.3. Explore information extraction for knowledge base construction4. Explore search marketing and ad targeting5. Explore relevance optimization ",CS4422,Kennesaw_USA,Information Retrieval,GIT; SEP,DM,AI; 17; NC,AI; 16; 24,AI,AI; DM
HPC & Parallel Programming,"<h2>title</h2>HPC & Parallel Programming<h2>summary</h2>This course will introduce parallel programming techniques for shared memory and distributed memory systems. Topics include threading, OpenMP, and MPI. <h2>ilo</h2>1. Discuss the different processor and memory configurations used in HPC2. Implement programs for shared memory environments using OpenMP3. Implement programs for distributed memory environments using MPI ",CS4522,Kennesaw_USA,HPC & Parallel Programming,PDC,PDC,PDC; FPL,PDC; AR,PDC,PDC; SDF
Cloud Computing,"<h2>title</h2>Cloud Computing<h2>summary</h2>This course discusses the fundamental concepts and techniques of cloud computing. Students will develop an understanding of cloud computing architecture, Infrastructure as a Service (IaaS), Platform-as-a-Service (PaaS), Software as a Service (SaaS), Virtualization, and Application Development on Cloud. <h2>ilo</h2>1. Explain fundamental concepts and architecture of Cloud Computing2. Explain the concepts of IaaS, PaaS, SaaS3. Explain virtualization4. Explain distributed computing environment on cloud5. Develop applications on cloud6. Conduct big data analytics on cloud ",CS4524,Kennesaw_USA,Cloud Computing,AR; SF,SPD,AR; DM,AR,SPD,AR; PDC; SPD; AI; DM
Software Security,"<h2>title</h2>Software Security<h2>summary</h2>The course introduces the fundamental concepts and principles of software security. Topics covered include buffer overflows, defense mechanisms, return oriented programming, reverse engineering, vulnerabilities analysis. Additional topics: mobile security, hardware platform security, embedded system security. <h2>ilo</h2>1. Describe common vulnerabilities in software security and understand how to avoid such problems in software.2. Explain how various attack work in software systems.3. Evaluate and assess security threats, risks, and attack vectors for software systems.4. Design and implement security mechanisms to protect software systems.5. Understand security mechanisms in Android and iOS platforms.6. Discover vulnerabilities of software using various techniques. ",CS4612,Kennesaw_USA,Software Security,SEC,SEC,SEC,SF; SEC,SEC,SE; SEC
Computer and Network Security,"<h2>title</h2>Computer and Network Security<h2>summary</h2>This course is a comprehensive study of the security principles and practices for computer systems and networks. Topics to be covered include basic security concepts, common network attack techniques and impacts, common security policies, Internet protocol vulnerabilities, basic cryptographic tools and secure protocols. Defense techniques such as authentication, access control, encryption, and network intrusion detection will be discussed. This course will also survey new and emerging network security topics, applications and technologies. Exercises for this course will include network programming in some language and using various tools in understanding and analyzing packet traces and network traffic. <h2>ilo</h2>1. Explain the concepts, components, methodology, and architecture of network security;2. Identify, classify and discuss some common network attacks and threats;3. Explain various network access control and authentication techniques, design principles, and protocols;4. Explain various encryption techniques and their vulnerabilities;5. Discuss some new and emerging network security topics, applications, and technologies. ",CS4626,Kennesaw_USA,Computer and Network Security,NC; SEC,SEC,SEC,NC; SEC,SEC,SEC; NC
Internet Programming,"<h2>title</h2>Internet Programming<h2>summary</h2>This course introduces current technologies for modeling, designing, implementing, and developing Web applications. Topics include developing for the server and the client, programming frameworks, server administration and integration with databases. Practice will involve platforms and language such as Linux, Python, PHP, Ruby and JavaScript. <h2>ilo</h2>1. Master the architecture and basic operations of IDE2. Understand the fundamental concepts of web applications3. Model a project based on the MVC model using an MVC diagram4. Design a project with page-flow and dataflow, strategies for separating three layers, and methods for increasing software reusability and maintainability5. Control database CRUD6. Present term project and write documents ",CS4720,Kennesaw_USA,Internet Programming,FPL,SPD,FPL; AR,SPD,SPD,SPD
Natural Language Processing,"<h2>title</h2>Natural Language Processing<h2>summary</h2>This course provides an introduction to the field of natural language processing (NLP). The topics include creating systems that can understand and produce language for applications such as information extraction, machine translation, automatic summarization, question-answering, and interactive dialogue systems. This course covers linguistic (knowledge-based) and statistical approaches to language processing in the areas of syntax (language structures), semantics (language meaning), and pragmatics/discourse (the interpretation of language in context). Students will design and develop programs for analyzing and extracting information from large online corpora. <h2>ilo</h2>1. Demonstrate understanding knowledge of NLP.2. Demonstrate understanding of syntax (language structures).3. Demonstrate understanding of semantics (language meaning), and4. Demonstrate understanding of pragmatics/discourse (the interpretation of language in context).5. Demonstrate the knowledge of NLP applications and implement NLP-related techniques with Python/Java/C++. ",CS4742,Kennesaw_USA,Natural Language Processing,AL; FPL,AI,AI,AI; 19,AI,AI
Global IS Project Management,"<h2>title</h2>Global IS Project Management<h2>summary</h2>In this course, students will be exposed to the basic principles of Global Project Management, effective teamwork and collaboration. It will prepare students to understand key issues in global project management such as project initiation, planning, scheduling, budgeting, risk analysis, quality management and communicating and collaborating across political and cultural boundaries. Tools such as Microsoft Project will be used to develop and track Information Systems projects. <h2>ilo</h2>1. Describe project design and management2. Explain planning, design, and team concepts3. Explain project control mechanisms, estimating techniques and risk assessment4. Discuss budget planning, integration, reporting, and tracking in PM.5. Demonstrate Microsoft Project, illustrate projects in writing and presentation6. Integrate business law and ethics in Information Systems projects.7. Use computer applications to solve common problems at school, work or home.  8. Explain how diverse culture facilitates innovation and project success. ",CYBR3220,Kennesaw_USA,Global IS Project Management,SEP,SEP,SEP; 17,SE; SEP,SEP,SE
Management of Digital Forensics and eDiscovery,"<h2>title</h2>Management of Digital Forensics and eDiscovery<h2>summary</h2>This course explores the key issues in digital forensics: the detection, isolation and response to security breaches and attacks. It provides specific procedures required to respond to a computer crime incident and also provides coverage of the entire digital forensic sequence and the eDiscovery process within organizations. <h2>ilo</h2>1. Define and explain the role of digital forensics in the incident response and investigatory process2. Identify the requirements for proper evidence collection, handling and storage3. Identify and explain basic techniques to properly collect and analyze evidentiary data using appropriate tools and techniques in common scenarios4. Organize and present evidentiary data and investigatory findings for use in corporate or legal proceedings. ",CYBR4350,Kennesaw_USA,Management of Digital Forensics and eDiscovery,GIT,SEP,SEC; 16,SEC,SEC,SEP; SEC
Wireless Security,"<h2>title</h2>Wireless Security<h2>summary</h2>This course explores the theory and practice of securing wireless networks from threats and attacks. Topics include Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, and Security in Wireless Ad Hoc Networks. <h2>ilo</h2>1. Describe the fundamental concepts of information security2. Discuss the difference between wireless network security and wired network security3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems4. Outline the security issues and solutions in mobile security ",CYBR4833,Kennesaw_USA,Wireless Security,SEC; NC,SEC; NC,SEC; NC,NC; SEC,NC; SEC,SEC; NC
Infrastructure Defense,"<h2>title</h2>Infrastructure Defense<h2>summary</h2>This course provides an overview of the infrastructure assessment and penetration testing process and the processes and techniques for improving the defensibility of that infrastructure. <h2>ilo</h2>1. Apply problem solving skills, core IT concepts, best practices and standards to information technologies2. Identify and evaluate organizational requirements and current and emerging technologies3. Communicate effectively, both in writing and in speaking4. Demonstrate an ability to participate effectively in the planning and execution of team projects ",CYBR4883,Kennesaw_USA,Infrastructure Defense,GIT; SEP,SEC; SEP,SEC; AR,SEC,SEC,SEC; NC
Introduction to Data Analytics and Technology,"<h2>title</h2>Introduction to Data Analytics and Technology<h2>summary</h2>This course provides a comprehensive overview of processing technologies, systems, and application. Latest trends in data analytics, big data, and data science will be introduced. <h2>ilo</h2>1. Describe the role of data and data technologies in todayâ€™s organizational environments.2. Identify key functional areas and trends in data management and analytics.3. Describe common data formats and models used in data driven solutions.4. Compare and contrast technologies, systems, and approaches used for data and information management.5. Analyze the general process and the methods involved in a data analytics solution. ",IT3703,Kennesaw_USA,Introduction to Data Analytics and Technology,DM,DM,DM; AI,DM; AI,SPD,DM; AI
Advanced Web and Mobile Applications,"<h2>title</h2>Advanced Web and Mobile Applications<h2>summary</h2>This course covers advanced topics on web and mobile applications with a focus on modern web application architectures and mobile friendly user interfaces. Students will complete one major development project using the latest web technologies. <h2>ilo</h2>1. Explain modern web application architectures and related concepts.2. Compare major mobile and web development approaches, platforms, and tools.3. Examine and use popular web APIs.4. Apply appropriate web and mobile user interface design principles and techniques.5. Create a cross-platform mobile web application using the latest web technologies and services. ",IT4403,Kennesaw_USA,Advanced Web and Mobile Applications,GIT; AR,SPD,AR; HCI,SPD,SPD,SPD
Clinical Processes and Workflows: Analysis and Redesign,"<h2>title</h2>Clinical Processes and Workflows: Analysis and Redesign<h2>summary</h2>This course introduces the fundamentals of healthcare workflow and process analysis and redesign as a necessary component of complete practice automation. Students will become familiar with the concepts of processes, process analysis and redesign in the healthcare settings. Workflow and process mapping in healthcare improvement including detailed guidance, helpful tools, and case studies are introduced. <h2>ilo</h2>1. Identify the elements involved in patient care in different health care settings that must be taken into consideration when examining and proposing changes in workflow processes2. Use tools to create different diagrams of processes that support healthcare workflow analysis and redesign3. Analyze the workflow processes in healthcare settings to determine their effectiveness4. Evaluate and select ways in which quality improvement methods, tools and health information technology can be applied to improve healthcare workflow processes5. Evaluate and select approaches that would ensure the success of workflow redesign from development and presentation of the implementation plan to facilitation of decision making meetings, implementation of the changes, evaluation of the new processes, sustainability of new workflow processes, and continuous quality improvement efforts to achieve meaningful use ",IT4523,Kennesaw_USA,Clinical Processes and Workflows: Analysis and Redesign,2,SE; 02,01; SPD; 02,02; SPD,SPD,02; SE
Health information Security and Privacy,"<h2>title</h2>Health information Security and Privacy<h2>summary</h2>Health information security and privacy are of utmost importance in today's healthcare environment. This course introduces the concepts, practices and concerns of information privacy and security unique to the healthcare settings. The course provides the student with a thorough understanding of the HIPAA security and privacy rules, meaningful use security requirements, security risk assessment and management, and how to integrate privacy and security into medical practices. Resources of privacy and security in healthcare are provided. <h2>ilo</h2>1. Describe the concepts of information privacy and security in healthcare2. Describe and use HIPAA privacy and security regulations and Meaningful Use  MU  security requirements3. Discuss the components involved in an information security management program in the modern healthcare environment4. Demonstrate familiarity with resources for information privacy and security in healthcare ",IT4533,Kennesaw_USA,Health information Security and Privacy,02; SEC,SEC; SEP; 03,01; SEC; 02,SEC; SEP,SEC; SPD,02; SEP
Big Data System Administration,"<h2>title</h2>Big Data System Administration<h2>summary</h2>This course introduces contemporary distributed big data platforms and database systems. Topics include big data computing paradigms, big data platform architectures and administration, and big data database concepts and administration. <h2>ilo</h2>1. Explain the contemporary big data computing paradigm.2. Compare NoSQL database systems with traditional database systems.3. Perform system administration on contemporary big data platforms ",IT4733,Kennesaw_USA,Big Data System Administration,DM,DM,DM,DM,SPD,AI; DM
Machine Learning for Enterprise Applications,"<h2>title</h2>Machine Learning for Enterprise Applications<h2>summary</h2>This course covers enterprise applications of machine learning on data analytics.  Topics span the complete life cycle of data analytics from envisioning the problem, identifying proper data, selecting suitable machine learning methods, evaluating modeling performance, and deploying the results to improve decision-making. <h2>ilo</h2>1. explain the concepts of supervised and unsupervised learning2. explain the concepts of how machine learning fits in the organization/enterprise and leads to competitive advantages. 3. Perform data analytics using supervised and unsupervised learning. 4. Evaluate the performance of machine learning models on data analysis. ",IT4773,Kennesaw_USA,Machine Learning for Enterprise Applications,AI,AI,AI; 17; DM,DM; AI,AI,DM; AI
Applied Data Driven Solutions,"<h2>title</h2>Applied Data Driven Solutions<h2>summary</h2>This course will apply data technologies and applications in a chosen application domain and expose students to real world problems and issues. Students will analyze, design, and develop a practical and technical data driven solution in a chosen field, such as healthcare, finance, security, social media, academia, sports, and utilities. <h2>ilo</h2>1. Describe common data concepts, practices, and issues in a chosen domain.2. Analyze practical problems and requirements in a context (a company, organization, or other entities).3. Design and develop a technical solution driven by data technologies to address the problems identified. ",IT4793,Kennesaw_USA,Applied Data Driven Solutions,SEC; SE,SE; DM,DM; 17,DM,SPD,DM; SPD
Wireless Security,"<h2>title</h2>Wireless Security<h2>summary</h2>This course covers methods and techniques to secure wireless networks against threats and attacks. The topics may include Security and Cryptography, Network Security Protocols, Security and Layered Architecture, Voice-Oriented Wireless Networks, Data-Oriented Wireless Networks, Security in Traditional Wireless Networks, Security in Wireless LAN, Security in Wireless Ad Hoc Network, Special Topics such as Mobile Security. <h2>ilo</h2>1. Describe the fundamental concepts of information security2. Discuss the difference between wireless network security and wired network security3. Explain the security protocols and solutions for data-oriented and voice-oriented wireless systems4. Outline the security issues and solutions in mobile security ",IT4833,Kennesaw_USA,Wireless Security,NC; SEC,SEC; NC,SEC; NC,NC; SEC,NC; SEC,NC; SEC
Ethical Hacking for Effective Defense,"<h2>title</h2>Ethical Hacking for Effective Defense<h2>summary</h2>This course focuses on detection of network and system vulnerabilities by taking an attacker-like approach to system, network, and data access. Topics include network attacks and defenses, Operating System and application vulnerabilities, social engineering attacks, and malware. Ethical, legal implications of network attacks are also discussed. <h2>ilo</h2>1. Explain what an ethical hacker can and cannot do legally2. Describe security threats and vulnerabilities3. Use hacking tools to locate and fix security leaks4. Identify operating systems vulnerabilities5. Explain cryptosystems and describe attacks on cryptosystems6. Analyze network security vulnerabilities and technical controls ",IT4843,Kennesaw_USA,Ethical Hacking for Effective Defense,SEC; NC,SEC; SEP,SEC; SEP; 16,SEC; SEP,SEC; SEP,SEP; SEC
Web and Mobile Application Security,"<h2>title</h2>Web and Mobile Application Security<h2>summary</h2>This course introduces web and mobile application security issues, hands-on practices to explore security vulnerabilities, and best practices to defend against vulnerabilities in web and mobile. <h2>ilo</h2>1. Describe common web and mobile security vulnerabilities 2. Exploit web and mobile vulnerabilities with hands-on tools3. Defend against common web and mobile vulnerabilities ",IT4863,Kennesaw_USA,Web and Mobile Application Security,SE; GIT,SEC; SPD,SEC; NC,SEC; NC,SPD; SEC,SEC; SPD
Embedded Systems Analysis and Design,"<h2>title</h2>Embedded Systems Analysis and Design<h2>summary</h2>The analysis and design course focuses on using modern methods, techniques, and tools for specification and design of embedded systems. Topics include analytical methods such as RMA, development methods such as HOOD, and notations like UML, Petri-nets, etc. are covered. Performance evaluation based on modeling and simulation techniques is also covered. This is a project based course. <h2>ilo</h2>1. Understand the importance of embedded systems, the challenges involved, and systematic approaches to building such systems.2. Explain and implement fundamental principles and methodologies of embedded software development effectively utilizing current OOAD methodologies.3. Appreciate engineering issues in the development of embedded software, such as user concerns, maintainability, dependability and safety, and division of labor.4. Analyze a software development problem, express it succinctly and precisely, design module structures to solve a problem, and evaluate alternatives.5. Implement a module so that it executes efficiently and correctly.6. Work in a small team on an embedded systems project of significant scale and scope.7. Apply knowledge about software requirements, design, construction, project management, and quality to an embedded systems project.8. Effectively use embedded operating systems, CASE tools, languages, etc.9. Understand the scope, roles, uses, and development trends of the most widely used embedded software engineering standards. ",SWE3683,Kennesaw_USA,Embedded Systems Analysis and Design,SDF,SE; SPD,SE; SPD,SE; SPD,OS,AR; SE
Object-Oriented Development,"<h2>title</h2>Object-Oriented Development<h2>summary</h2>This course involves engineering activities related to the analysis, design, and implementation of object-oriented software systems. Topics include modeling foundations, requirements specification and documentation, design concepts and strategies, and OOAD methodologies with an emphasis on UML. The course includes a major project utilizing current analysis and design methods and tools implemented in a contemporary IDE. <h2>ilo</h2>1. Understand and be able to apply the principles of object-oriented software engineering to software analysis design and development2. Utilize current OO design and analysis methodologies such as UML responsibility-driven design and data-driven design effectively3. Use current software tools to effectively model specify design and develop object-oriented software systems using common OO design patterns ",SWE4743,Kennesaw_USA,Object-Oriented Development,SDF,SE,FPL; SE,FPL; SE,AL,SE
Programming on the Web,"<h2>title</h2>Programming on the Web<h2>content</h2>An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. ",CSC309H5,UofT_Canada,Programming on the Web,FPL,SPD,FPL; SE,SPD; SE,SPD,SPD
Introduction to Machine Learning,"<h2>title</h2>Introduction to Machine Learning<h2>content</h2>An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Basics of reinforcement learning. ",CSC311H5,UofT_Canada,Introduction to Machine Learning,AI,AI,AI; MSF,AI,AI,AI
Introduction to Information Security,"<h2>title</h2>Introduction to Information Security<h2>content</h2>An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security. ",CSC347H5,UofT_Canada,Introduction to Information Security,SEC,SEC,SEC,SEC,SEC,SEC
Parallel Programming,"<h2>title</h2>Parallel Programming<h2>content</h2>Introduction to aspects of parallel programming. Topics include computer instruction execution, instruction-level parallelism, memory system performance, task and data parallelism, parallel models (shared memory, message passing), synchronization, scalability and Amdahl's law, Flynn taxonomy, vector processing and parallel computing architectures. ",CSC367H5,UofT_Canada,Parallel Programming,PDC,PDC,PDC,FPL; AR,PDC,PDC
Neural Networks and Deep Learning,<h2>title</h2>Neural Networks and Deep Learning<h2>content</h2>An introduction to neural networks and deep learning. Backpropagation and automatic differentiation. Architectures: convolutional networks and recurrent neural networks. Methods for improving optimization and generalization. Neural networks for unsupervised and reinforcement learning. ,CSC413H5,UofT_Canada,Neural Networks and Deep Learning,NC,AI,MSF; AI,AI,AI,AI
Compilers and Interpreters,"<h2>title</h2>Compilers and Interpreters<h2>content</h2>Compiler organization, compiler writing tools, use of regular expressions, finite automata and content-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation. ",CSC488H5,UofT_Canada,Compilers and Interpreters,FPL,FPL,SE; FPL,FPL,FPL,AR; SDF
Computer networks security,"<h2>title</h2>Computer networks security<h2>summary</h2>This course presents the problem of security in computer networks, and more specifically in TCP/IP networks.The structure of this course follows the following model. First, the problem of security in TCP/IP networks is presented. Once we have seen the possible security problems in this type of network, we will focus on the prevention mechanisms that exist, based mainly on information filtering. Subsequently, and assuming that not all TCP/IP network prevention and protection systems are infallible, we will study the different intrusion detection mechanisms that exist. Finally we will highlight the specific protection techniques that exist. Specifically, we will introduce the basic notions of cryptography that will allow us to understand the operation of different mechanisms and applications that allow us to protect ourselves against attacks.The focus of this course assumes that the student already has basic knowledge about the operation of TCP/IP networks and the Unix work environment. Its orientation is eminently practical and implies that the student must dedicate an effort to the installation and configuration of the software, as part of the evaluable objectives of the subject.<h2>content</h2>Introduction to computer securitySafety and riskscomputer attacksDefense and computer securityfirewall systemsTypes of firewall systemsImplementation of security policies through perimeter securityiptablesIntrusion detection systemsCyber ​​defense and intrusion detection toolsManagement of events, alerts and incidentssnortSecurity in the communications layersLink Layer Protection: Wireless NetworksNetwork Layer Protection: IPsecTransport Layer Protection: TLSApplication Layer SecuritySSHVPNsecure emailApart from these contents, basic contents on encryption and authentication are also offered to allow students without knowledge of cryptographic subjects to follow the subject.Finally, in the activities of this subject, different tools are used to reinforce the theoretical knowledge acquired in a practical way. Some of these tools are:nmapwiresharkiptablesopensslSSHsnortnessus ",5.574,UOC_Spain,Computer networks security,SEC; NC,SEC; NC,SEC; NC,SEC; NC,NC; SEC,NC; SEC
Computer networks design,"<h2>title</h2>Computer networks design<h2>summary</h2>Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.The ""Design of Computer Networks"" (DRC) course uses the basics of network design as a narrative thread to train students in two important aspects of network deployment in multi-branch organizations. On the one hand, the creation of redundant and scalable local area networks (LAN), and on the other hand, the basic mechanisms to achieve connectivity through different WAN technologies (Wide Area Network, Wide Area Networks).Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the world of professional networks and serves as an entry point for a number of specializations in the field (design, security, etc.).Specifically, within the entire agenda of this latest version of the CCNA agenda, called ""CCNA Routing & Switching"", the first module corresponds to a small part of the ""Scaling Networks"" curriculum and the rest with practically all of ""Connecting networks”. "".<h2>content</h2>Due to the characteristics of the subject, the materials that will be used throughout the DXC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"".The course agenda within the subject is divided into four thematic blocks, each associated with an evaluable activity, which encompass the different chapters of the materials. The first two modules correspond to the ""Scaling Networks"" part and the last two to the ""Accessing the WAN"" part.Module 1. Scalable local area networks[Optional] LAN Design: Strategies that can be used to systematically design a high-functionality network are studied, such as the hierarchical network design model and proper device selections.[Optional] VLAN Escalation: The implementation of inter-VLAN routing using a Layer 3 switch is discussed. Problems encountered when implementing the VTP protocol, DTP protocol, and inter-VLAN routing are also described.STP Protocol: The protocols used to manage redundancy in LANs are covered. In addition, some of the potential problems with such redundancy and their symptoms are covered.EtherChannel and HSRP protocol: The EtherChannel link aggregation mechanism is studied and emphasis is placed on the operation and configuration of the HSRP protocol (Hot Standby Router Protocol, hot standby router protocol).Module 2. Planning routing protocolsDynamic Routing – Introduces dynamic routing protocols, explores the benefits of using this class of protocols, how different routing protocols are classified, and the metrics that routing protocols use to determine the best path for network traffic.EIGRP – Explains the EIGRP protocol and provides basic configuration commands to enable it on a Cisco IOS router. It also explores how the routing protocol works, and provides more detail on how EIGRP determines the best path.EIGRP Protocol Tuning and Troubleshooting: Covers additional EIGRP tuning features and the configuration mode commands to implement them for IPv4 and IPv6.Single-Area OSPF – Covers the basic implementations and configurations of the OSPF link-state protocol, in its single-area mode of operation.Multi-Area OSPF - Instructions are provided for splitting a large single-area OSPF into multiple areas efficiently, how to configure OSPFv2 and OSPFv3, and an overview of the commands used to verify their configuration.OSPF Protocol Tuning and Troubleshooting - Describes the tuning functions in OSPF, the configuration mode commands that are used to implement various features for IPv4 and IPv6, and the components and commands that are used to troubleshoot OSPFv2 and OSPFv3.Module 3. WAN connectivityWAN Concepts – Introduces WAN standards, technologies, and purposes and covers choosing the appropriate WAN technologies, services, and devices to meet the changing business requirements of a growing business.Point-to-Point Connections – Covers the terms, technology, and protocols used in serial connections. Point-to-point protocols (PPP) and HDLC are introduced.Branch Office Connections: Frequently used broadband solutions such as cable, DSL, and wireless are introduced, as well as PPPoE (PPP over Ethernet) implementation. He also studies how to deploy VPNs (Virtual Private Networks) and the BGP protocol.Module 4. Advanced aspects of networksAccess Control Lists – Explains how to configure and troubleshoot extended IPv4 ACLs and IPv6 ACLs as part of a security solution.Network Security and Monitoring: Details the most common LAN security threats and how to mitigate the risk. In addition, SNMP is described and how to use it to monitor a network, and how to implement local SPAN to capture and monitor traffic with port analyzers or IPS devices.Quality of Service: Network transmission quality, traffic characteristics, queuing algorithms, QoS models, and QoS implementation techniques are described.Network Evolution - Provides an introduction to emerging trends in today's networks, such as IoT, cloud, or software-defined networks.Network Troubleshooting – Lists general network troubleshooting procedures, methods, tools, and documentation that should be retained. Typical symptoms and causes at different layers of the OSI model are also discussed. ",5.576,UOC_Spain,Computer networks design,NC; SEC,NC,NC; SEC,NC,NC,NC
Operating systems design,"<h2>title</h2>Operating systems design<h2>summary</h2>Once we have seen the functionalities that the Operating System (OS) offers to users, we are in a position to analyze the different techniques and policies that make them possible. This knowledge has to allow us a better use of the operating system as end users, and provides the bases to be able to carry out a correct administration of the Operating System.This subject will present what an Operating System is, from an internal point of view. The different possibilities of managing the elements of the OS, both hardware and software, will be seen.To achieve these objectives, theoretical and practical concepts are combined. In the practical part, the source code of the Linux operating system will be studied and modified.<h2>content</h2>Module 1. Structural and functional concepts of the operating systemThe didactic materials of this module present the fundamental aspects for you to achieve the following objectives:Know the different internal structures that the core of an OS can have and the respective differential characteristics, and know how to differentiate them based on their specialization.Knowing how to identify the hardware elements necessary to implement some specific OS services.Know the execution modes of the processes with respect to their privileges, especially the OS kernel mode.Learn the reasons why the operating system needs hardware support to control the system. Some reasons have to do with efficiency and others have to do with the nature of control.Understand the importance of the computer's hardware support when performing certain OS functions and know what types of procedures require this support.Being able to differentiate the execution of normal operations from the execution of privileged instructions, and knowing what type of management of the OS services allow these instructions.Module 2. Process managementIn the teaching materials provided in this module, you will find the necessary tools to achieve the following objectives:Learn the concepts of process and thread of execution.Know the different states in which a process can be found and the reasons that cause a change of state.Understand the need to make context switches to take better advantage of the performance of the computer.Relate the number of processes that occur in the machine with the performance that is achieved from them.Understand the functions of the different levels of processor programming.Understand processor scheduling algorithms and detect the advantages and disadvantages.Module 3. Virtual memoryThe didactic materials of this module contain the necessary tools to achieve the following objectives:Extend the concept of virtual memory that you have learned in other subjects by describing the system hardware and software needs to efficiently implement paged virtual memory management.Learn about the different page load management, allocation, and replacement policies and discuss their pros and cons.See how memory management affects the execution of program code.Learn the most important aspects of memory allocation in the Linux kernel.Module 4. Input/output managementIn the didactic materials of this module you will find the necessary tools to achieve the following objectives:Know the functions and structure of device drivers, as well as some techniques to manage them.Acquire knowledge about the different implementations of the technique of storage in the intermediate memory (buffering) to adapt the speeds of the device and the processor.Know how to differentiate between independent and device-dependent I/O procedures.Know an implementation scheme of I/O procedures.Knowing how to apply techniques such as synchronous and asynchronous calls, device management, generic I/O operations, etc.Know the objectives of the layers of the I/O routines of the operating system.Show the complexity involved in the design of controllers (device drivers) through a concrete example.Module 5. The file systemIn this didactic module you will find the necessary materials to achieve the following objectives:Know how the information on the disc is structured.Know different alternatives to structure a file system.Find out what alternatives there are to organize free disk space.Learn about the possibilities to distribute the space allocated to files.Learn to identify the data structures needed in memory to perform operations related to the file system.Knowing what steps the operating system must take to carry out a certain operation and knowing its motivation.Be aware of techniques that allow you to improve the efficiency and reliability of file systems.Know the characteristics of the most common file systems.Module 6. Concurrency: principles and toolsIn the materials of this module, you will find the necessary tools to achieve the following objectives:Know and analyze examples with the different high-level synchronization tools that allow concurrent programming to be carried out with guarantees.Analyze real use cases on concurrent programming in Gnu/Linux.Analyze the problem of deadlock and indefinite wait considering the different situations, evaluating their advantages and disadvantages. Also, consider the different tools at the administrator level to manage these situations and help you make decisions. ",5.577,UOC_Spain,Operating systems design,OS,OS,OS,OS,OS,OS
Compilers,"<h2>title</h2>Compilers<h2>summary</h2>Compilers are essential tools for any computer scientist, responsible for translating textual information from one format or language to another. For example, they act as key players in the execution process of a program: they translate the program from the high-level language used by humans into a low-level language that can be executed on a computer (such as assembler or machine code).This course introduces the basic structure of a compiler: the modules that make it up and how they communicate with each other. We will focus on the case of general purpose programming languages ​​and on the process of generating an executable from a high level program.Specifically, we will see how a source program is analyzed to obtain its components and possible errors introduced by the programmer are detected. The concept of interpreter and its relationship with compilers will also be introduced. Subsequently, it will be studied how the object code is generated and optimized from the data obtained in the analysis part to improve performance. All of this will be implemented by using compiler build tools.<h2>content</h2>The subject is structured in six modules:1. General Information1. Languages2. Basic notions3. Structure of a compiler4. Building compilersYou will see an overview of the general structure of a compiler.2. Lexical analysis1. General organization2. Construction of lexical analyzers3. Specification of a lexical analyzer4. Error handling5. The entry system6. The symbol tablesThe only part of the compiler that interacts with the source file will be studied, converting its characters into a sequence of lexical symbols (tokens) and eliminating everything that is not necessary for its analysis (comments, line breaks...).3. Analysis1. General notions2. Top-down analysis3. Bottom-up analysisThe phase in charge of verifying that the lexical symbols of the source program arrive in the correct order and that the specifications of the context-free grammar that defines the source language are met will be studied.4. Semantic analysis1. Semantic analysis2. Intermediate code generationThe verification of the semantics of the source program, which depends on the context, will be studied, incorporating semantic attributes and actions in the productions of the grammar.5. Synthesis phases1. Code generation2. Code optimizationThe generation of code from the intermediate code will be studied, as well as everything to take into account to carry out an automatic translation and the final optimization phase.6. Interpreted languages1. Interpreters2. The abstract stack machine3. Construction of an interpreterA concrete model of architecture for interpreters based on a memory in the form of a stack will be presented. The construction process of an interpreter based on this model will be studied. ",5.58,UOC_Spain,Compilers,FPL,FPL,FPL,FPL,FPL,SDF; FPL
Knowledge representation,"<h2>title</h2>Knowledge representation<h2>summary</h2>Intelligent systems need to use information in their decision making process. Not only the ability to store and query information is required, functionalities that can be achieved through databases or in-memory data structures. In addition to this, it is necessary to be able to relate the information and use it as a base from which to infer new knowledge.This course presents the most common representation schemes to represent knowledge in intelligent systems: ontologies, semantic networks, logical representations, frameworks, etc. It also presents fields of application where these schemes are used, such as the field of the semantic web.<h2>content</h2>The units of this subject are the following:Unit 1: Introduction to knowledge representationSection 1: KnowledgeSection 2: Systems of representationUnit 2: Ontologies and semantic webSection 1: The relationship with the webSection 2: The Semantic WebSection 3: Ontologies and the webSection 4: FormatsSection 5: ToolsSection 6: Resources ",5.581,UOC_Spain,Knowledge representation,SPD; GIT,AI,AI,AI,AI,SF; AI
Analysis and design with patterns,"<h2>title</h2>Analysis and design with patterns<h2>summary</h2>This course is focused on the study of analysis and design patterns contemplated from a practical perspective. The contents are located within the object-oriented methodology, the most currently accepted, and using the UML notation for the same reason.Patterns (analysis, design, architecture...) are one of the innovations that have had the greatest impact in object-oriented development in recent years, along with the appearance of the UML language. Their main advantage is that they save time and improve quality by applying solutions (which we call patterns) that have already been widely tested by other designers.For this reason, the use of patterns is considered a basic skill that object-oriented software designers must acquire today. Now, it does not seem that this ability can be acquired in any other way than through practice; In this practice, the detailed information found in books -which are already beginning to be numerous- about patterns is usually used, and this way of working is the one that is recommended to students for their future professional work.This course provides summary descriptions of many of the most popular and currently accepted patterns, as well as some general concepts about patterns and their usage.<h2>content</h2>The didactic material of the course consists of three didactic modules:Learning Module 1: Introduction to PatternsIn this module, notions of UML are given with practical examples of the different modeling techniques. Includes an analysis example and a design example.Didactic module 2: Catalog of patternsThe most significant patterns are discussed and a description of patterns covering practically the entire software life cycle is provided.Learning Module 3: Pattern Development Case StudyIt includes the detailed development of a case study similar to the practice proposed to the students.The materials of this subject are not designed to be studied in a linear way, but once the introduction (Module 1) has been read, it is recommended to combine the study of theory (Module 2) with practice (Module 3). In the description of each activity, you will find a detailed description of which specific sections of each module must be studied in order to carry out the activity. ",5.586,UOC_Spain,Analysis and design with patterns,SE,SE,AR; SE,SE,AL,AI
Software engineering of components and distributed systems,"<h2>title</h2>Software engineering of components and distributed systems<h2>summary</h2>Ongoing advances in computing and telecommunications are changing the way software is developed. In particular, the relentless increase in the power of personal computers and mobile devices, the lowering of hardware costs, and the appearance of global coverage data networks have made possible an infrastructure that is especially conducive to the use of open and distributed systems. These changes have caused, among other things, that the traditional methods of software design and development (seen in the subjects of Engineering and Software Analysis and design with patterns) are insufficient, since, more or less implicitly, they assume that The application to be developed will be executed in a basically centralized environment. Therefore, traditional methods are unable to naturally manage the complexity of the requirements of this new type of systems. On the other hand, the aspects closest to the analysis and specification of requirements studied in the Requirements Engineering subject do not change with respect to what was seen in previous courses and, therefore, are not repeated here.This subject serves as an introduction to software architectures as a framework for the design and development of distributed applications where the fundamentals, techniques and skills applicable to the modern definition of software architectures are studied and put into practice and knowledge is complemented. acquired in previous courses. The design of the architecture of software systems makes it possible to describe in an abstract and high-level way both the functionality of the system and many other non-functional aspects of it (distribution, reliability, security, adaptability, benefits, etc.). This system description is often defined by an architectural style, a classification of software systems into large families that follow a common structural pattern. Among the most common architectural styles for distributed systems are systems organized into microservices, multiple layers, client-server systems, or peer-to-peer systems.Application design in terms of software microservices must be further refined to accommodate and implement it on a particular distributed software technology. These architectures can be implemented using any programming paradigm (object-oriented, structured...). In our specific case, the reference language will be Java, which allows the development of distributed applications with microservices architectures. These microservices are the ones that will be used to implement and test the architectural elements described in the system architecture.Finally, some good practices in the development and production of software in distributed architectures are collected. Some of the key concepts are worked on when developing and putting into production, such as continuous delivery, DevOps culture, and deployment with containers.<h2>content</h2>The subject is structured into 5 main activities, each one with its specific contents: Activity 1: ""Distributed software architectures: a solution for every problem"" Book ""Fundamentals of Software Architecture"" (Richards & Ford): Chapter 1. Introduction.Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part I Foundations (Chapters 2 - 8)Book ""Fundamentals of Software Architecture"" (Richards & Ford): Part II Architecture Styles (Chapters 9 - 18). Activity 2: ""Hexagonal architectures and microservices design: a well-matched relationship"" Book ""Microservices patterns"" (Richardson): Chapter 1. Section 6: ""The Microservice architecture pattern language"".Book ""Microservices patterns"" (Richardson): Chapter 2: ""Decomposition strategies"".Book ""Microservices patterns"" (Richardson): Chapter 3: ""Interprocess communication in a microservice architecture""Book ""Microservices patterns"" (Richardson): Chapter 5: ""Designing business logic in a microservice architecture"". Activity 3: ""From creation to interconnection of microservices"" Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"". Introduction.Book ""Microservices Patterns"" (Chris Richardson): Chapter 6: ""Developing business logic with event sourcing"".Book ""Microservices patterns"" (Richardson): Chapter 7: ""Implementing queries in a microservice architecture""Book ""Microservices patterns"" (Richardson): Chapter 8: ""External API patterns"".Activity 4: ""Quality of distributed software: inherent, transversal and critical"" Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"". Introduction.Book ""Microservice Patterns"" (Chris Richardson): Chapter 9. ""Testing Microservices: Part 1"".Book ""Microservice Patterns"" (Chris Richardson): Chapter 10. ""Testing Microservices: Part 2"".Book ""Software Architecture Fundamentals"" (Richards & Ford): Part I Fundamentals (Chapters 3 and 6). Activity 5: ""DevOps, CD/CI and agile culture: good practices for distributed software development"" Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices. Introduction.Book Microservice Patterns (Chris Richardson) Chapter 12 Implementation of microservices.Book ""Continuous Delivery: Reliable Software Releases Through Automated Build, Test, and Deployment (Jez Humble and Dave Farley) Part I: Chapters 1-10.Book ""The DevOps Handbook"" (Patrick Debois, John Willis, Jez Humble & Gene Kim): Chapters 1 - 4. ",5.587,UOC_Spain,Software engineering of components and distributed systems,SE; SDF,SE,SE; PDC,SE,SE; PDC,SE; PDC
Computer networks structure,"<h2>title</h2>Computer networks structure<h2>summary</h2>Today, large networks are a fundamental part of our environment, mainly thanks to the Internet phenomenon and the proliferation of broadband. From email or instant messaging to web services, networks are one more aspect of our lives, always present invisibly, but now unavoidable. For this reason, new specialists are needed every day to support companies that want to get the most out of their networks and use remote interconnection technologies to make the distance that separates them disappear completely. This need has also created a set of professional certifications attesting to their expertise.The course ""Computer Network Structure"" (ERC) focuses on learning the fundamentals of the lowest level communication protocols that allow different types of devices to communicate: Transport, Internet and Network Access. Within this, special prominence is given to the operation of Ethernet local area networks (LAN) and the creation of IP addressing schemes.Its main particularity compared to other degree subjects is that its content is fully aligned with part of the latest version of the official Cisco syllabus for obtaining the CCNA (Cisco Certified Network Associate) professional certification, in Spanish. This is one of the most recognized in the professional world of networks and serves as an entry point for a whole set of specializations in the field (design, security, etc.).Specifically, within the entire agenda of this latest version of the CCNA agenda, this course encompasses practically the entire first part of the course, called ""Introduction to Networks"" (ITN), and a part of the second, called ""Switching , Routing and Wireless Fundamentals"" (SRWE).<h2>content</h2>Due to the characteristics of the subject, the materials that will be used throughout the ERC course are the official ones for the CCNA certification, provided within the official Cisco Systems training program, called ""Networking Academy"". These materials are supplemented by the book ""Computer Networks: A Top-Down Approach,"" which is not part of the curriculum for this certification.The course syllabus within the subject is divided into four thematic blocks, or modules, which include the different chapters of the materials from the parts ""Introduction to Networks"", ""Essential Switching, Routing and Wireless"", and some sections of the book .Module 1. How do networks work?(2 weeks)Introduction to Modern Networks - Introduces the concept of a data network, providing a very general overview of the foundation for exploring the services, technologies, and issues that network professionals face when designing, developing, and maintaining data networking. modern network.Basic configuration of switches and network devices: Serves as an introduction to the Cisco IOS operating system. The command line structure and basic commands are shown.Protocols and network models: The concept of protocol and the importance of standardization processes are presented. For this, the TCP/IP and OSI communication models are explained.The Physical Layer: Explains how the physical layer protocols enable communications on data networks.Module 2. Ethernet networks(4 weeks)The network access layer: the functions of the data link layer and the protocols associated with it are studied.Switching Concepts - Explains how Layer 2 switches transmit information.Ethernet Switching: Describes the characteristics and operation of the Ethernet network in terms of its evolution from contention-based data communication shared media technology to today's high-bandwidth full-duplex technology.VLANs: This part focuses on knowing what a virtual private network (VLAN) is and how it works, as well as its implementation.WLAN Concepts and Configuration - Explains how wireless WLANs enable network connection, as well as configuration, basic security, and troubleshooting.Module 3. The Internet Protocol(3 weeks)The Network Layer – Discusses the role of the network layer and how it divides networks into groups of equipment to manage the flow of data packets within a network. It also examines the way in which communication between networks, routing, is facilitated.Resolution of IP addresses: Protocols such as ARP and ""Network Discovery"" that allow communication on a network are explained.Basic configuration of routers: The initial implementation of parameters in a router (router) and network devices is explained.IPv4 and IPv6 Addressing: The creation and assignment of IPv4 and IPv6 network and subnet addresses are explained in detail through the efficient use of segmentation.ICMP – Explains the use of various tools to verify network connectivity.Module 4. Routing in the Internet and the Transport layer(3 weeks)Routing Concepts – This part is covered in conjunction with the book and focuses on seeing what algorithms and protocols exist to dynamically create routing tables for a router.Static Routing: Configuration of IPv4 and IPv6 static routes.The Transport Layer: The role of the transport layer in encapsulating application data using the network layer is examined. The transport layer also includes error control functions and allows the use of different services on the same computer. ",5.591,UOC_Spain,Computer networks structure,NC; SEC,NC,NC,NC,NC,NC
Embedded systems,"<h2>title</h2>Embedded systems<h2>summary</h2>Embedded systems are increasingly present in our lives. From network devices to industrial control systems, a wide range of devices make up what we know as an Embedded System. In this topic we want to give an overview of these systems. We will start from its definition and delve into its fields of application. The knowledge of the hardware components that constitute these systems will be deepened, we will know their programming models and the particularities that condition the development of applications for embedded systems.The main objective of the course is for the student to learn the basic programming techniques of an embedded system, have a basic knowledge of the hardware architecture that composes them and acquire skills to work with this type of device.<h2>content</h2>Module 1- Introduction to embedded systemsIn this module an introduction to embedded systems is made, the concept and its applications are presented and emphasis is placed on the development process of an embedded system.Module 2 - The hardware of an embedded systemThis module introduces the hardware architecture of an embedded system. The components that compose it are presented and their particularities are described. The objective of the module is that the student has an overview of the main hardware components that make up an embedded system.Module 3 - The software and programming models of an embedded systemThis module presents the most relevant programming models for the development of applications for embedded systems. Unlike what has been learned in other software development subjects, it will be seen that the efficiency and memory reduction used by the program is rewarded over its structuring and/or modularity.Module 4- Operating systems for embedded systemsThis module takes a hands-on approach to introduce the need for abstractions when operating with embedded systems. From the simplest approaches to real-time operating systems, the different ways to manage the resources of an embedded system are presented. Also in this module the peripheral controllers are worked on and their programming is deepened.Module 5- Validation and evaluation tools for embedded systems.This module introduces the tools available for an application developer to carry out their work and verify the developed software. ",5.594,UOC_Spain,Embedded systems,OS,SPD,OS,SE; SPD,OS,SDF; SF
Enterpreneurship,"<h2>title</h2>Enterpreneurship<h2>summary</h2>New business opportunities appear every day to respond to previously non-existent or unsatisfied needs or to improve the existing offer. In addition, organizations increasingly value having an entrepreneurial organizational culture and encourage people who work to act as entrepreneurs in the same organization. And it has been shown that there is a positive relationship between entrepreneurship and the development of a country or region. Among other characteristics, it contributes to economic growth, is a source of innovation, favors job creation and contributes to social cohesion and dynamism.In this sense, the Entrepreneurial Initiative subject aims to promote the entrepreneurial spirit of students from the introduction to the main elements that make up the entrepreneurial process from an applied and practical approach. Firstly, we will introduce ourselves to the entrepreneurial phenomenon, analyzing various typologies and taking into account the gender perspective. Next, we will immerse ourselves in the ideation, validation, modeling and presentation of a viable and sustainable entrepreneurial project (following the sustainable development objectives) developing our capacities for initiative, innovation and teamwork.<h2>content</h2>1. Entrepreneurship and business1.1. Key concepts1.2 Entrepreneurial person and founding teams1.3 Gender and entrepreneurship1.4 Entrepreneurship in other cultures1.5 Learning to undertake1.6 Innovate and undertake. Focus method.2. The inspiring problem2.1 Trends, sectors and technologies2.2 Knowing the field that motivates us2.3 Inspiring problem2.4 Validation. interview problem3. The innovative solution3.1 Ideation. Lateral thinking and creativity.3.2 Minimum viable and prototyped product3.3 Validation. Solution Interview4. The business model4.1 The SCOPE business model4.2 Applications of the business model4.3 Other tools to work on the business model5. Numerical aspects of the entrepreneurial project5.1 Marketing and sales. demand estimate5.2 Traction. Analytics and indicators to undertake5.3 Economic and financial aspects5.4 Economic-financial plan. Agility and feasibility5.5 Financing of the initiative6. Project communication6.1 Purpose of communication6.2 Target audience6.3 Effective Presentations ",5.595,UOC_Spain,Enterpreneurship,17,17,17; SEP,SEP,SEP,SEP; SPD; 17
Information systems integration,"<h2>title</h2>Information systems integration<h2>summary</h2>The contents of the subject ""Information Systems Integration"" (ISI) revolve around the various meanings of the word ""integration"" in relation to organizations of all kinds, and the information systems they use. Thus, to begin with, we will see the type of problems that usually arise in organizations with little structural integration, as well as the proposals that contribute to a better business integration, mainly the definition and implementation of business processes, transversal to the classic functional ones. areasSubsequently, it will be seen how organizations have been developing and implementing new information systems as a fundamental tool for their structural and informational integration, and as a means for their progress in terms of their functional management and strategic direction, in short, for their progress. in terms of quality and competitiveness.In this line, the different integrating roles that companies pursue through the main types of business information systems implemented in recent years, from ERP systems to BI systems, through CRM and SCM systems, through for EAI projects. Finally, some of the concepts related to the implementation of information systems in organizations will be introduced from a very practical point of view.<h2>content</h2>The purpose of the didactic material is to complement the theoretical knowledge of the modules studied with practical activities that allow the student to acquire basic theoretical and practical knowledge. With this, it is intended that, once the subject is finished, the acquired competences allow the student to apply the knowledge and methodologies to other circumstances and needs, both in the educational context and in professional life.The concepts around Business Integration through Information Systems are introduced progressively and gradually throughout the different didactic modules of the subject. From a thematic point of view, the subject is broken down into 4 main didactic modules:1. Motivations and Fundamentals of Business Integration. 2. Vertical Integration through Information Systems. 3. Horizontal Integration through Information Systems. 4. Implementation of Information Systems in the company. ",5.597,UOC_Spain,Information systems integration,17; DM,17,17; 10,SEP,SPD,DM; SPD; 17
Use of information systems in organizations,"<h2>title</h2>Use of information systems in organizations<h2>summary</h2>The subject Use of Information Systems in Organizations (USIO) has a deductive approach; that is, through the study and work of cases, the impact of Information and Communication Technologies (ICT) in organizations is analyzed. This approach allows establishing conclusions and interpretations whose purpose is to understand the efficient use of ICT in management and business decision making.The course is based on solving a case throughout the semester by working in interdisciplinary groups. The students of the Degrees in Computer Engineering (GII) and Business Administration and Management (ADE) will share a work space in which they will develop the activities of the subject. This point is very important and the student should consider it before enrolling. Unlike other subjects where there is detailed material to work on for further assessment, the USIO does not have material that the student must study in the classical sense. A group must be formed and work must be done on the approach of a case with contents of business information systems. The development must be collaborative and although some recommended readings are given, searches on the Internet or other sources must also be carried out, proposing a coherent and argued solution. It is not possible to think that there is ""the solution"" in the style of a mathematical exercise, there are several possible ones and the consultant will evaluate the different alternatives with pre-established criteria (indicated as part of the statement). Group work dynamics are usually complex and in this sense it is very important to form a cohesive group that is willing to work from the beginning.<h2>content</h2>Case title: ""PARROT""Affair:The subject Use of Information Systems in Organizations (USIO) is based on the development of a case study. We will focus on the case of LORO. It is intended to be a first approximation to the resolution of technological innovations to which companies must tend so as not to disappear in the future. The question that management teams in any organization must ask themselves is whether current products and services will continue to be marketed in the future. In the case of PARROT, a drone manufacturer, the help of a consultant is being considered to carry out a detailed study in five phases to take advantage of the disruptive technologies that are appearing in the current digital revolution.The topics to be studied in this case are the following:Emerging technologies according to the Gartner Hype Cycle.Digital Twins technology (Digital Twins) applied to an organization.The application of Conversational Intelligence technology to the manufacturing sector and its ethical concerns.Improving an organization's processes through hyperautomation and process miningMetaverse technology applied to a manufacturing organization.The students will be organized in groups to propose a detailed study to PARROT as a consultant. The case has been structured into five PECs corresponding to the five phases that the study will carry out to allow PARROT to take advantage of disruptive technologies; the first will be developed individually and the rest will be done in groups.Summary of Goals by Milestones:- PEC 1.- Reading, understanding the case. Gartner Hype Cycle analysis to detect emerging technologies to apply.Understand the case and analyze the technologies included in the Gartner Hype Cycle titled ""Hype Cycle for Mobile Robots and Drones, 2022"" published on July 19, 2022 by Dwight Klappich, to consider which 2 emerging technologies (since Innovation Trigger or Peak of Inflated Expectations ) could use Parrot, which could offer them the creation of new business models or economic growth- PEC 2.- Analysis of the application of Digital Twins Technology (Digital Twins) in an organization.Explore how PARROT could take advantage of the Digital Twins technology trend.- PEC 3.- Analysis of the application of Conversational Intelligence Technology in an organization.Analyze what possibilities of applying Conversational Intelligence such as ChatGPT to the manufacturing sector. And discuss what are the ethical concerns of using conversational intelligence like ChatGPT.- PEC 4.- Analysis of the application of Hyperautomation and Process Mining in an organization.Analyze how PARROT could carry out different initiatives to improve operational processes by applying hyperautomation, through Robotic Process Automation technology or Business Process Management Workflow Engines or Process Mining technologiesGet Celonis certified through the 10-hour Process Mining Fundamentals course.- PEC 5.- Analysis of the application of the Metaverse in an organization.Analyze how PARROT could take advantage of the technological trend of the Metaverse. ",5.598,UOC_Spain,Use of information systems in organizations,SPD; 17,SEP; 17,17; 10,SEP,SPD,SPD; SEP
Functional management of IS/IT services,"<h2>title</h2>Functional management of IS/IT services<h2>summary</h2>This subject presents an environment that guarantees the support of IS/IT services and infrastructure in the organization, for the achievement of corporate strategies and objectives. It treats the management of IS/IT services as a set of processes and functions, provided or managed from an IT department. There are references that are useful guides in the management of these services such as ITIL, COBIT, CMMi.<h2>content</h2>Module 1. Introduction to IS/IT services.1. IS/IT services in organizations2. Introduction to the management of the IS/IT departmentModule 2. The IS/IT department1. Governance of the IS/IT department2. Functional area: the IS/IT department3. Particular organizational differences according to type of companyModule 3. Construction of IS/IT services1. Management of the IS/IT service portfolio2. Design and transition of services3. Evolution and improvement of services. change management4. Financial management and costs of servicesModule 4: Provision of IS/IT services1. Customer Service Center2. Service requests3. Shipping management4. Availability and continuity of services5. Demand and capacity managementModule 5: IS/IT Service Operations1. Technological environment2. Incident management3. Configuration management4. Security managementITIL Module: An Introduction1. Context and precedents2. Some key ideas3. Changing orientation of ITIL versions4. The new ITIL 4 model ",5.599,UOC_Spain,Functional management of IS/IT services,17; SEC,SEP; 17,17,SEP,SPD,SPD
Cryptography,"<h2>title</h2>Cryptography<h2>summary</h2>The main objective of the Cryptography course is to train students in the field of modern cryptography. This discipline is increasingly important in the world we live in due to the increasing value of information. On the one hand, cryptographic techniques are necessary to protect the security and privacy of users when using technology and communication networks. In particular, it is important to protect users from mass surveillance activities that can be carried out illegally not only by private companies but also by some government agencies operating outside of legal circuits. On the other hand, beyond the protection of users, companies and any entity that is related to or uses technology needs mechanisms that protect their digital assets, which can sometimes be all the assets of a company. Finally, the development of cryptography also allows the birth of new relationship paradigms between people such as the creation of new virtual currencies, cryptocurrencies, which do not depend on any centralized entity to function.The subject wants to give a practical approach to cryptography, and that is why the subject is structured jointly based on both theoretical and practical content that is complemented by programming activities that allow us to know the real problems that arise in the implementation of cryptographic systems.<h2>content</h2>The contents of the subject are detailed below, grouping the different modules that make it up into thematic blocks:Unit 1: Basic conceptsBasic terminology as well as the historical evolution of cryptography are studied. The most relevant historical cryptosystems are reviewed. The most relevant concepts of modular arithmetic are introduced to have a sufficient mathematical base to understand the cryptosystems and cryptographic protocols that are presented throughout the course. This block includes modules 1 and 2.    Module 1: Introduction to cryptography    Module 2: Mathematical FundamentalsUnit 2: Shared Key CryptographyThe two large families of shared-key cryptosystems are studied: block cipher and flow cipher. For each family, its main properties are characterized and the most relevant cryptosystems are studied. On the other hand, hash functions are defined, focusing on their properties and applications and analyzing in depth one of its most relevant implementations: SHA256. This block includes modules 3 and 4.    Module 3: Symmetric Key Cryptography    Module 4: Hash functionsUnit 3: Public Key CiphersThe characterization of the most important properties of public key cryptosystems is given, emphasizing topics such as key distribution, digital signatures, the combination between public key/symmetric key, as well as relevant aspects of the implementation of public key cryptography. . . Finally, the architecture and protocols associated with public key infrastructures (Public Key Infrastructure, PKI) are studied. This block includes modules 5 and 6.    Module 5: Public Key Cryptography    Module 6: Public Key Infrastructure (PKI)Unit 4: Cryptographic protocolsThe cryptographic primitives described throughout the course are put into practice for the development of cryptographic protocols, such as secret sharing, null-knowledge proofs, unconscious transfer, or secure multipart computing. This block includes module 7.    Module 7: Cryptographic protocols ",5.601,UOC_Spain,Cryptography,NC; SEC,SEC; MSF,SEC; MSF,SEC,MSF; AL,SEC; MSF
Electronic commerce,"<h2>title</h2>Electronic commerce<h2>summary</h2>The Electronic Commerce subject aims to train students in this new discipline born as a result of widely used communication networks, such as the Internet. Despite the wide range of disciplines that are often included in the words ""e-commerce"" (new economics, marketing, law, social behavior, etc.), it is important to note that since we are dealing with a computer engineering subject, its approach is eminently technological. In any case, the fact that its focus is technological does not mean that it includes different disciplines within this aspect. Thus, we can identify three large areas of knowledge that we will focus on in this course.On the one hand we find the databases. In electronic commerce systems, the correct design and management of databases is extremely important since one of the characteristics of electronic commerce is its high degree of automation, more than in other areas. This makes databases play a very important role.Another relevant point in electronic commerce is presented by payment systems. As is well known, one of the reluctances that electronic commerce must overcome is distrust and therefore special emphasis must be placed on security.Finally, there is a part that is often forgotten, perhaps because it affects us little, or rather, it affects us positively, and that is the problem presented by electronic commerce of digital products. The ease of copying together with the precision of these implies that piracy becomes an inherent problem with this support. This problem, which often slows down the sale and distribution of products through electronic commerce, currently generates significant research efforts. We will see different possibilities to end piracy and what problems they present.The subject wants to be taught with a very practical approach, and that is why two compulsory practices have been included in the subject, in addition to the four PEC. In the first practice we will work with the basic web development technologies to launch an electronic commerce. On the other hand, in the second practice we will implement an electronic commerce system through a specialized content management tool (CMS) for electronic commerce: Prestashop.<h2>content</h2>The specific contents of the subject that are considered most important are detailed below for each of the modules:Module 1 - Introduction to electronic commerce (0.5 credits)Basic concepts and terminology of electronic commerce.The EDI standard.Legal aspects of electronic commerce.Module 2 - Security in electronic commerce (1 credit)Basic concepts of cryptography and information security.Specific concepts of public key cryptography.Security in electronic commerce: data, payments and products sold.Module 3 - Information Management (0.5 credits)Structure of a database for electronic commerce.Data analysis of an electronic commerce system.Module 4 - Electronic payment systems (1 credit)card paymentsvirtual wallet systemsPayments via SMSdigital moneyModule 5 - Electronic copyright protection systems (1 credit)Basic concepts of copyright protection techniques for content in digital format.Description of a still image marking system.Description of a digital video marking system. ",5.604,UOC_Spain,Electronic commerce,DM; 10,DM; SEC; 17,17; SEC; MSF,SEC; SEP,SPD,17; SPD; DM
Databases architecture,"<h2>title</h2>Databases architecture<h2>summary</h2>Database Architecture is an optional subject, proposed within the Information Technologies itinerary, belonging to the Degree in Computer Engineering. The subject delves into the knowledge acquired in previous compulsory subjects on databases, such as the Use of Databases and Database Design.The course begins by studying the main drawbacks of the relational model and presents some alternative data models. Next, the main problems related to the implementation of database management systems (DBMS) are analyzed, both in centralized and distributed environments. Finally, fundamental concepts on the design of distributed databases are introduced.The Degree in Computer Engineering has as a transversal competence to acquire the learning of foreign languages ​​(specifically English). That is why some subjects have the learning material in English. This is the case of Database Architecture, given its specific characteristics (specialization subject with a model based on continuous evaluation).<h2>content</h2>The objective of this course, as explained in the first module, is to first introduce the architecture of centralized Database Management Systems (DBMS), to evolve towards distributed systems, identifying the main differences.In the second module, the limitations of the relational model will be presented to introduce the use of objects and semi-structured data, giving special relevance to the Object-Relational and XML extensions. First, the main features of standard SQL will be covered (for example, large objects, user-defined types, inheritance, references, and multivalued attributes). Next, XML standards such as XSchema, XPath, and XQuery will be covered.Distributed databases will be introduced in the third module. First, a classification of distributed databases will be explained. Next, depending on whether the distribution is desired or imposed, it will be explained how to approach the design or the integration. The design is related to the sharding of the databases (for example, horizontal, vertical, or hybrid), while the integration can be implemented as a global view, local view, peer-to-peer, or based on containers or interfaces.Module four addresses aspects of computer security in databases, addressing the three key aspects of this concept: confidentiality, integrity and availability. Aspects such as access control, application access, vulnerabilities, inference mechanisms and auditing will be covered. Emphasis will be placed on different access control systems, as well as role-based access. Aspects related to advanced data management systems will also be worked on and aspects of access control for XML will be dealt with.Within the fifth module, the concept of transaction explained in previous topics will be deepened. Based on this concept, a distinction will be made between ACID and BASE transactions. Multilevel reservations, the multiversion mechanism and time stamping will be explained. The first two mechanisms have been chosen for their wide use in commercial DBMSs, while the last one has been chosen for its wide use in distributed environments.The sixth module introduces concepts related to data recovery, which in turn are related to transactions.Finally, in the seventh module, concepts related to query optimization in distributed environments will be explained. First of all, we will analyze the syntactic optimization to continue working with the physical optimization. The concepts of intra and interparallelism will also be worked on. ",5.607,UOC_Spain,Databases architecture,DM,DM,DM; PDC,DM,DM,DM
Computational thinking,"<h2>title</h2>Computational thinking<h2>summary</h2>This course is designed to prepare us to start in the world of programming, and to know and understand the basic concepts that will allow us to turn a specific problem into a small program that solves it.In order to do so, we will first learn to think in such a way that we can identify what kinds of problems can be solved using a computer running through a sequence of steps designed to solve the proposed problem. That is, through what is known as computational thinking, we will know the abstract concepts that determine the appropriate reasoning to be able to solve problems through programs.Next, we'll review programming languages, which have evolved very rapidly since the popularization of personal computers, and we'll also learn about other important elements of programming context and vocabulary, such as what a computer is and what its function is. basic function. .Finally, we will see how to put it into practice by developing a small program in a guided way, introducing the different concepts that make up what is known as structured programming. To do this, we will use the Processing programming language, which was created with the aim of encouraging creativity and learning to program in a simple and attractive way.<h2>content</h2>The contents of the course are grouped into two blocks:Computational thinking, or how we should think to solve a problem using a computer. In addition, the historical background, to know the context and basic vocabulary of the field of programming and what programming languages ​​are like.Step-by-step guided programming project to create a first program using the Processing language and letting our creativity fly. ",22.4,UOC_Spain,Computational thinking,SDF,SDF,SDF; AL; FPL; SE,SDF,AL,SDF
Mobile Software Development,"<h2>title</h2>Mobile Software Development<h2>content</h2>Technologies and concepts underlying software development for mobile devices (handheld computers). Mobile computing platforms, including architecture, operating system, and programming environment. Software design patterns and structuring for mobile applications. Network-centric mobile software development. Data persistence. Programming for mobile device components such as cameras, recorders, accelerometer, gyroscope and antennas. Location-aware software development. ",CS3714,VirginiaTech_USA,Mobile Software Development,SDF; 18,SPD,SE; NC,SPD,SPD,SPD
Introduction to Human-Computer Interaction,"<h2>title</h2>Introduction to Human-Computer Interaction<h2>content</h2>Survey of human-computer interaction concepts, theory, and practice. Basic components of human-computer interaction. Interdisciplinary underpinnings. Informed and critical evaluation of computer-based technology. User-oriented perspective, rather than system-oriented, with two thrusts: human (cognitive, social) and technological (input/output, interactions styles, devices). Design guidelines, evaluation methods, participatory design, communication between users and system developers. ",CS3724,VirginiaTech_USA,Introduction to Human-Computer Interaction,HCI,HCI,HCI,HCI,HCI,HCI
Cloud Software Development,"<h2>title</h2>Cloud Software Development<h2>content</h2>Fundamentals of cloud software development, including design patterns, application programming interfaces, and underlying middleware technologies. Development of distributed multi-tiered enterprise software applications that run on a server computer and are accessed using a web browser over the Internet on a network-connected computer such as desktop, laptop, or handheld computer (tablet, smartphone, or mobile device. A grade of C or better is required in prerequisite. ",CS3754,VirginiaTech_USA,Cloud Software Development,SDF,SPD,AR; SE,SPD,SPD,SPD; SE
Introduction to Computational Biology and Bioinformatics,<h2>title</h2>Introduction to Computational Biology and Bioinformatics<h2>content</h2>Introduction to computational biology and bioinformatics (CBB) through hands-on learning experiences. Emphasis on problem solving in CBB. Breadth of topics covering structural bioinformatics; modeling and simulation of biological networks; computational sequence analysis; algorithms for reconstructing phylogenies; computational systems biology; and data mining algorithms. ,CS3824,VirginiaTech_USA,Introduction to Computational Biology and Bioinformatics,3,AL; 03,03; 01,AI; 03,AL; 03,03; AL
Theory of Computation,"<h2>title</h2>Theory of Computation<h2>content</h2>Theoretical analysis of the computational process; fundamental concepts such as abstract programs, classes of computational machines and their equivalence, recursive function theory, unsolvable problems, Church's thesis, Kleene's theorem, program equivalence, and generability, acceptability, decidability will be covered. ",CS4124,VirginiaTech_USA,Theory of Computation,FPL,AL; MSF,AL; FPL,AL,MSF,AL; FPL
Systems & Networking Capstone,"<h2>title</h2>Systems & Networking Capstone<h2>content</h2>Advanced topics in computer systems & networking, e.g. distributed and parellel processing, emerging architectures, novel systems management & networking design, fault-tolerance, and robust and secure data management. Team-based approach to solving open-ended computer systems & networking problems. Designing, implementing and documenting advanced computer/networking systems. ",CS4284,VirginiaTech_USA,Systems & Networking Capstone,NC; SEC,,NC; PDC,NC,SF; NC,NC; SF
Quantum Computation and Information Processing,"<h2>title</h2>Quantum Computation and Information Processing<h2>content</h2>Quantum states and quantum phenomena. Quantum communication concepts such as superdense coding, teleportation, and complexity. Classical and quantum circuits and gate sets for computation. Quantum algorithms and comparison to classical algorithms. Quantum computational complexity theory and complexity classes. Quantum information concepts such as density operators, measurements, and quantum channels. Error correction, the stabilizer formalism, and fault-tolerance. The adiabatic theorem and adiabatic quantum computation. Entanglement and entanglement measures. ",CS4134,VirginiaTech_USA,Quantum Computation and Information Processing,FPL,AL; AR,MSF; PDC,07; AL,AR; MSF,AL; AI
Principles of Computer Security,"<h2>title</h2>Principles of Computer Security<h2>content</h2>Survey of computer security problems and fundamental computer security design principles and models for software systems. Cryptographic models and methods. Modern cyber security techniques for robust computer operating systems, software, web applications, large-scale networks and data protection. Privacy models and techniques. Contemporary computer and network security examples. ",CS4264,VirginiaTech_USA,Principles of Computer Security,SEC,SEC,SEC,SEC,SEC,SEC
Computer Organization,"<h2>title</h2>Computer Organization<h2>content</h2>Information representation and transfer; instructions and data access methods; the control unit and microprogramming; memories; input/output and interrupts; secondary storage; the von Neumann SISD organization; high level language machines; the RISC concept; special purpose processors including operating system, file, text, floating point, communication, etc. Multicomputers; multiprocessors; concurrent processing support; Pipeline machines, processor arrays, database machines; the data flow/data directed approach; computer networks. Cross-listed with ECE 4504. ",CS4504,VirginiaTech_USA,Computer Organization,DM,AR,SF; AR,AR,AR,AR
"Multimedia, Hypertext and Information Access","<h2>title</h2>Multimedia, Hypertext and Information Access<h2>content</h2>Introduces the architectures, concepts, data, hardware, methods, models, software, standards, structures, technologies, and issues involved with: networked multimedia (e.g., image, audio, video) information, access and systems; hypertext and hypermedia; electronic publishing; virtual reality. Coverage includes text processing, search, retrieval, browsing, time-based performance, synchronization, quality of service, video conferencing and authoring. ",CS4624,VirginiaTech_USA,"Multimedia, Hypertext and Information Access",GIT; 18,SPD,AR; SF,SPD; DM,SPD,HCI
Creative Computing Studio,"<h2>title</h2>Creative Computing Studio<h2>content</h2>Capstone computer science course at the intersection of arts and technology. Intensive immersion in different approaches to digital arts such as game design, interactive art, digital music, and immersive virtual reality. Students work in teams to conduct an end-to-end integrative design project. ",CS4644,VirginiaTech_USA,Creative Computing Studio,GIT; HCI,21,21,SEP; 21,SPD; 14,SPD; 21
Introduction to Artificial Intelligence,"<h2>title</h2>Introduction to Artificial Intelligence<h2>content</h2>Overview of the areas of problem solving, game playing, and computer vision. Search trees and/or graphs, game trees, block world vision, syntactic pattern recognition, object matching, natural language, and robotics. ",CS4804,VirginiaTech_USA,Introduction to Artificial Intelligence,AI,AI,AI,AI,AI,AI
Machine Learning,"<h2>title</h2>Machine Learning<h2>content</h2>Algorithms and principles involved in machine learning; focus on perception problems arising in computer vision, natural language processing and robotics; fundamentals of representing uncertainty, learning from data, supervised learning, ensemble methods, unsupervised learning, structured models, learning theory and reinforcement learning; design and analysis of machine perception systems; design and implementation of a technical project applied to real-world datasets (images, text, robotics). A grade of C- or better in prerequisites. ",CS4824,VirginiaTech_USA,Machine Learning,AI,AI,AI; MSF,AI,AI,AI