institution,elective,overview,title,summary,content,ilo
Durham_England,COMP3467,"<h2>Durham_England COMP3467</h2><h2>title</h2>COMP3467: 
ADVANCED COMPUTER SYSTEMS<h2>summary</h2>
			<li> To provide understanding of the relationship between hardware and software, and the design, implementation and verification of hardware and software in these situations.  </li>
			<li>To provide understanding of how performance and security of computer systems are affected by their architecture.</li>
		<h2>content</h2>
			<li> Computer Architecture including current processor characteristics and designs</li>
			<li>instruction set design</li>
			<li>memory systems: cache design and performance</li>
			<li>processor architecture and security</li>
		<h2>ilo</h2>
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li> The relationship between Computer Instruction Sets and High Level Programming Languages;  </li>
				<li> Complex performance issues of current computers, and the selection of processors for specific applications;  </li>
			","COMP3467: 
ADVANCED COMPUTER SYSTEMS","
			<li> To provide understanding of the relationship between hardware and software, and the design, implementation and verification of hardware and software in these situations.  </li>
			<li>To provide understanding of how performance and security of computer systems are affected by their architecture.</li>
		","
			<li> Computer Architecture including current processor characteristics and designs</li>
			<li>instruction set design</li>
			<li>memory systems: cache design and performance</li>
			<li>processor architecture and security</li>
		","
				<li>On completion of the module, students will be able to demonstrate: </li>
				<li> The relationship between Computer Instruction Sets and High Level Programming Languages;  </li>
				<li> Complex performance issues of current computers, and the selection of processors for specific applications;  </li>
			"
Uppsala_Sweden,1DL301,"<h2>Uppsala_Sweden 1DL301</h2><h2>title</h2>Database Design I<h2>content</h2> <li>an introduction to the database area and database terminology,</li> <li>entitets-relations (ER) modelling and expanded entitets-relations (EER) modelling,</li> <li>an overview of the relational data model and relational algebra and transformation of the data representation from the ER data model to the relational data model,</li> <li>an introduction to physical database design with functional dependencies and normalisation,</li> <li>an introduction to queries, updates and data definition with help of the query language SQL,</li> <li>an introduction to transactions, basic techniques for transaction management and concurrency control and recovery,</li> <li>an introduction to physical database design with file organisation, single level index and tree index,</li> <li>an introduction to procedural SQL and the application interface, and</li> <li>an orientation in advanced database applications and techniques.</li><h2>ilo</h2> <li>create conceptual models of relational databases based on requirement specification documents;</li> <li>translate a conceptual model to the relational model;</li> <li>create, modify and query relational databases using the SQL language;</li> <li>apply normalization techniques to reduce data redundancy and improve data integrity;</li> <li>create computer programs which store, modify and query data stored in databases;</li> <li>set up indexes and use other techniques to improve the performance of databases;</li> <li>set up users and their privileges;</li> <li>explain principles of security in database systems and apply protection mechanisms.</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level.</li>",Database Design I,," <li>an introduction to the database area and database terminology,</li> <li>entitets-relations (ER) modelling and expanded entitets-relations (EER) modelling,</li> <li>an overview of the relational data model and relational algebra and transformation of the data representation from the ER data model to the relational data model,</li> <li>an introduction to physical database design with functional dependencies and normalisation,</li> <li>an introduction to queries, updates and data definition with help of the query language SQL,</li> <li>an introduction to transactions, basic techniques for transaction management and concurrency control and recovery,</li> <li>an introduction to physical database design with file organisation, single level index and tree index,</li> <li>an introduction to procedural SQL and the application interface, and</li> <li>an orientation in advanced database applications and techniques.</li>"," <li>create conceptual models of relational databases based on requirement specification documents;</li> <li>translate a conceptual model to the relational model;</li> <li>create, modify and query relational databases using the SQL language;</li> <li>apply normalization techniques to reduce data redundancy and improve data integrity;</li> <li>create computer programs which store, modify and query data stored in databases;</li> <li>set up indexes and use other techniques to improve the performance of databases;</li> <li>set up users and their privileges;</li> <li>explain principles of security in database systems and apply protection mechanisms.</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level.</li>"
Uppsala_Sweden,1DL311,"<h2>Uppsala_Sweden 1DL311</h2><h2>title</h2>Semantics of Programming Languages<h2>content</h2><h2>ilo</h2> <li>explain and apply formal semantic descriptions of programming languages and other formal languages, particularly in operational semantics.</li> <li>construct simple semantic descriptions in operational semantics, and</li> <li>apply methods to prove basic properties of semantic descriptions.</li>",Semantics of Programming Languages,,," <li>explain and apply formal semantic descriptions of programming languages and other formal languages, particularly in operational semantics.</li> <li>construct simple semantic descriptions in operational semantics, and</li> <li>apply methods to prove basic properties of semantic descriptions.</li>"
Uppsala_Sweden,1DT052,<h2>Uppsala_Sweden 1DT052</h2><h2>title</h2>Computer Networks I<h2>content</h2><h2>ilo</h2> <li>Explain in a concise manner how the Internet is constructed and functions.</li> <li>Reason about design choices at different layers in the TCP/IP protocol stack.</li> <li>Use standard tools to debug a network path.</li> <li>Theorize about establishing and maintaining communication at different levels of abstraction.</li> <li>Identify and discuss usual security issues regarding computer network protocols and applications.</li>,Computer Networks I,,, <li>Explain in a concise manner how the Internet is constructed and functions.</li> <li>Reason about design choices at different layers in the TCP/IP protocol stack.</li> <li>Use standard tools to debug a network path.</li> <li>Theorize about establishing and maintaining communication at different levels of abstraction.</li> <li>Identify and discuss usual security issues regarding computer network protocols and applications.</li>
Uppsala_Sweden,1TD403,<h2>Uppsala_Sweden 1TD403</h2><h2>title</h2>Numerical Methods and Simulation<h2>content</h2><h2>ilo</h2>,Numerical Methods and Simulation,,,
Uppsala_Sweden,1DL231,"<h2>Uppsala_Sweden 1DL231</h2><h2>title</h2>Algorithms and Data Structures II<h2>content</h2><h2>ilo</h2> <li>use the notation of asymptotic growth of functions and be able to use this notation to describe the complexity of algorithms and computational problems</li> <li>derive equations for the complexity of algorithms and solve such equations</li> <li>work with common algorithmic techniques such as dynamic programming, greedy algorithms, etc.</li> <li>deal with basic problems using graph algorithms, string matching and flow networks.</li> <li>define the complexity classes P and NP, and discuss the open question whether P=NP.</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>",Algorithms and Data Structures II,,," <li>use the notation of asymptotic growth of functions and be able to use this notation to describe the complexity of algorithms and computational problems</li> <li>derive equations for the complexity of algorithms and solve such equations</li> <li>work with common algorithmic techniques such as dynamic programming, greedy algorithms, etc.</li> <li>deal with basic problems using graph algorithms, string matching and flow networks.</li> <li>define the complexity classes P and NP, and discuss the open question whether P=NP.</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>"
Uppsala_Sweden,1DL321,"<h2>Uppsala_Sweden 1DL321</h2><h2>title</h2>Compiler Design I<h2>content</h2><h2>ilo</h2> <li>structure a compiler as a sequence of distinct translation steps</li> <li>use regular languages to describe the lexical elements of a programming language</li> <li>describe lexical analysis using a finite automaton</li> <li>use context free languages to describe the syntactic structure of a programming language</li> <li>use the parsing methods top-down (recursive descent) and bottom-up (LR)</li> <li>use abstract syntax trees to represent the results of the syntactic analysis</li> <li>break down statements and expressions to simpler designs, and translate syntax trees to intermediate code</li> <li>describe how recursive procedure calls can be implemented by means of stacks, activation posts and machine registers</li> <li>translate the simplified intermediate code of a program to machine-specific instructions</li>",Compiler Design I,,," <li>structure a compiler as a sequence of distinct translation steps</li> <li>use regular languages to describe the lexical elements of a programming language</li> <li>describe lexical analysis using a finite automaton</li> <li>use context free languages to describe the syntactic structure of a programming language</li> <li>use the parsing methods top-down (recursive descent) and bottom-up (LR)</li> <li>use abstract syntax trees to represent the results of the syntactic analysis</li> <li>break down statements and expressions to simpler designs, and translate syntax trees to intermediate code</li> <li>describe how recursive procedure calls can be implemented by means of stacks, activation posts and machine registers</li> <li>translate the simplified intermediate code of a program to machine-specific instructions</li>"
Uppsala_Sweden,1DT072,"<h2>Uppsala_Sweden 1DT072</h2><h2>title</h2>Secure Computer Systems I<h2>content</h2><h2>ilo</h2> <li>explain basic concepts, theories and principles for security in computer systems, such as identification, authenticity and access control</li> <li>explain principles for attacks and protective measures in different aspects of computer systems, such as operating systems, software, networks and web based systems</li> <li>identify weaknesses and strengths concerning the security in computer systems</li> <li>discuss ethical aspects of computer systems security and its application</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level</li>",Secure Computer Systems I,,," <li>explain basic concepts, theories and principles for security in computer systems, such as identification, authenticity and access control</li> <li>explain principles for attacks and protective measures in different aspects of computer systems, such as operating systems, software, networks and web based systems</li> <li>identify weaknesses and strengths concerning the security in computer systems</li> <li>discuss ethical aspects of computer systems security and its application</li> <li>present and discuss the course content orally and in writing with proficiency appropriate to the course level</li>"
Uppsala_Sweden,1DL481,"<h2>Uppsala_Sweden 1DL481</h2><h2>title</h2>Algorithms and Data Structures III<h2>content</h2><h2>ilo</h2> <li>analyse NP-completeness of an algorithmic problem;</li> <li>use advanced algorithm analysis methods, such as amortised analysis and probabilistic analysis;</li> <li>use advanced algorithm design methods in order to approach hard algorithmic problems in a pragmatic way, such as by using randomised algorithms (such as universal hashing), approximation algorithms, stochastic local search (such as simulated annealing and tabu search), integer programming, propositional satisfiability (SAT), and SAT modulo theories (SMT).</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>",Algorithms and Data Structures III,,," <li>analyse NP-completeness of an algorithmic problem;</li> <li>use advanced algorithm analysis methods, such as amortised analysis and probabilistic analysis;</li> <li>use advanced algorithm design methods in order to approach hard algorithmic problems in a pragmatic way, such as by using randomised algorithms (such as universal hashing), approximation algorithms, stochastic local search (such as simulated annealing and tabu search), integer programming, propositional satisfiability (SAT), and SAT modulo theories (SMT).</li> <li>present and discuss topics related to the course content orally and in writing with a skill appropriate for the level of education.</li>"
Uppsala_Sweden,1MD001,<h2>Uppsala_Sweden 1MD001</h2><h2>title</h2>Advanced Interaction Design<h2>content</h2><h2>ilo</h2>,Advanced Interaction Design,,,
Uppsala_Sweden,1TD169,"<h2>Uppsala_Sweden 1TD169</h2><h2>title</h2>Data Engineering I<h2>content</h2><h2>ilo</h2> <li>use public and private cloud infrastructure;</li> <li>discuss key concepts in cloud computing such as Infrastructure as a Service (IaaS), Platform as a service (PaaS) och Software as a Service (SaaS);</li> <li>apply cloud security best practices in solutions;</li> <li>use modern systems for handling massive datasets;</li> <li>analyse properties of data-intensive applications and based on this suggest suitable strategies and architectures to meet application needs;</li> <li>implement software based on analysis as in the previous point and using technology presented in the course;</li> <li>critically analyse, discuss and present solutions and implementations in writing and orally.</li>",Data Engineering I,,," <li>use public and private cloud infrastructure;</li> <li>discuss key concepts in cloud computing such as Infrastructure as a Service (IaaS), Platform as a service (PaaS) och Software as a Service (SaaS);</li> <li>apply cloud security best practices in solutions;</li> <li>use modern systems for handling massive datasets;</li> <li>analyse properties of data-intensive applications and based on this suggest suitable strategies and architectures to meet application needs;</li> <li>implement software based on analysis as in the previous point and using technology presented in the course;</li> <li>critically analyse, discuss and present solutions and implementations in writing and orally.</li>"
Uppsala_Sweden,1TD388,"<h2>Uppsala_Sweden 1TD388</h2><h2>title</h2>Computer Graphics<h2>content</h2><h2>ilo</h2> <li>describe the data flow in a graphics rendering system;</li> <p></p><p class=""linebreak""> </p><li>use matrix algebra in computer graphics applications;</li> <p></p><p class=""linebreak""> </p><li>implement fundamental algorithms and transformations involved in viewing models, projection models, illumination models and the handling of hidden surfaces in polygon-based computer graphics;</li> <p></p><p class=""linebreak""> </p><li>describe effects such as texture mapping, bump mapping and antialiasing;</li> <p></p><p class=""linebreak""> </p><li>describe curves and surfaces that can be represented by splines;</li> <p></p><p class=""linebreak""> </p><li>use the OpenGL API with C++ in 3D graphics programming;</li> <p></p><p class=""linebreak""> </p><li>program GPU hardware, so called shader programming;</li>",Computer Graphics,,," <li>describe the data flow in a graphics rendering system;</li> <p></p><p class=""linebreak""> </p><li>use matrix algebra in computer graphics applications;</li> <p></p><p class=""linebreak""> </p><li>implement fundamental algorithms and transformations involved in viewing models, projection models, illumination models and the handling of hidden surfaces in polygon-based computer graphics;</li> <p></p><p class=""linebreak""> </p><li>describe effects such as texture mapping, bump mapping and antialiasing;</li> <p></p><p class=""linebreak""> </p><li>describe curves and surfaces that can be represented by splines;</li> <p></p><p class=""linebreak""> </p><li>use the OpenGL API with C++ in 3D graphics programming;</li> <p></p><p class=""linebreak""> </p><li>program GPU hardware, so called shader programming;</li>"
Uppsala_Sweden,1TD062,<h2>Uppsala_Sweden 1TD062</h2><h2>title</h2>High Performance Programming<h2>content</h2><h2>ilo</h2> <li>implement computational algorithms to efficient C-code for modern computer architectures;</li> <li>use tools for performance optimisation and debugging;</li> <li>propose and implement efficient performance optimisations;</li> <li>identify factors that restrict parallelism in an algorithm or a program;</li> <li>present written performance analysis in a clear and explicit way.</li>,High Performance Programming,,, <li>implement computational algorithms to efficient C-code for modern computer architectures;</li> <li>use tools for performance optimisation and debugging;</li> <li>propose and implement efficient performance optimisations;</li> <li>identify factors that restrict parallelism in an algorithm or a program;</li> <li>present written performance analysis in a clear and explicit way.</li>
Uppsala_Sweden,1DL034,<h2>Uppsala_Sweden 1DL034</h2><h2>title</h2>Introduction to Machine Learning<h2>content</h2><h2>ilo</h2> <li>explain and compare basic machine learning methods;</li> <li>use machine learning software in practical applications;</li> <li>evaluate the applicability of the studied methods.</li>,Introduction to Machine Learning,,, <li>explain and compare basic machine learning methods;</li> <li>use machine learning software in practical applications;</li> <li>evaluate the applicability of the studied methods.</li>
Uppsala_Sweden,1MD004,"<h2>Uppsala_Sweden 1MD004</h2><h2>title</h2>IT, Ethics and Organisation<h2>content</h2><h2>ilo</h2> <li>report for which ethical theories and organisation theories that are relevant to use at analysis at design and using IT-system;</li> <li>handle and solve ethical problems in connection with design and using IT-systems;</li> <li>using questionnaires, surveys, interviews and the like in connection with software development and IT-use.</li>","IT, Ethics and Organisation",,," <li>report for which ethical theories and organisation theories that are relevant to use at analysis at design and using IT-system;</li> <li>handle and solve ethical problems in connection with design and using IT-systems;</li> <li>using questionnaires, surveys, interviews and the like in connection with software development and IT-use.</li>"
Uppsala_Sweden,1DT075,"<h2>Uppsala_Sweden 1DT075</h2><h2>title</h2>Cryptology<h2>content</h2><h2>ilo</h2> <li>give examples of how theories, principles, and techniques based on cryptology can be used to achieve data security.</li> <li>explain the theories underpinning common cryptographic methods, such as different types of hash-functions, symmetric and asymmetric ciphers, digital signatures and random numbers.</li> <li>analyse, use and implement such methods and reflect on their limits and applicability.</li>",Cryptology,,," <li>give examples of how theories, principles, and techniques based on cryptology can be used to achieve data security.</li> <li>explain the theories underpinning common cryptographic methods, such as different types of hash-functions, symmetric and asymmetric ciphers, digital signatures and random numbers.</li> <li>analyse, use and implement such methods and reflect on their limits and applicability.</li>"
Uppsala_Sweden,1DL550,"<h2>Uppsala_Sweden 1DL550</h2><h2>title</h2>Low-Level Parallel Programming<h2>content</h2><h2>ilo</h2> <li>explain key issues of parallel programming, including data distribution, load balancing, locking and synchronisation</li> <li>construct parallel algorithms, i.e., identify parallelism in a given algorithm, implement this parallelism, and identify factors that limit the parallelism in a program or algorithm</li> <li>compare several parallel programming frameworks in terms of performance and efficiency of development</li> <li>use several high-performance parallel programming frameworks and choose an appropriate framework under given circumstances such as computer architecture, application and efficiency</li>",Low-Level Parallel Programming,,," <li>explain key issues of parallel programming, including data distribution, load balancing, locking and synchronisation</li> <li>construct parallel algorithms, i.e., identify parallelism in a given algorithm, implement this parallelism, and identify factors that limit the parallelism in a program or algorithm</li> <li>compare several parallel programming frameworks in terms of performance and efficiency of development</li> <li>use several high-performance parallel programming frameworks and choose an appropriate framework under given circumstances such as computer architecture, application and efficiency</li>"
Uppsala_Sweden,1DL251,"<h2>Uppsala_Sweden 1DL251</h2><h2>title</h2>Software Engineering and Project Management<h2>content</h2><h2>ilo</h2> <li>describe the principal tasks of software project managers, and basic concepts in software projects</li> <li>plan software projects, including risk and quality management</li> <li>explain basic concepts and principles of components of software engineering, e.g., of requirements engineering, system design, software implementation, testing and maintenance, and how these components contribute to the software process</li> <li>evaluate and relate different software processes, system models and architetural designs and assess their suitability in a given context</li> <li>explain, using theory of group dynamics, how the project manager can act to influence success of the project</li> <li>present and discuss course contents, orally and in writing.</li>",Software Engineering and Project Management,,," <li>describe the principal tasks of software project managers, and basic concepts in software projects</li> <li>plan software projects, including risk and quality management</li> <li>explain basic concepts and principles of components of software engineering, e.g., of requirements engineering, system design, software implementation, testing and maintenance, and how these components contribute to the software process</li> <li>evaluate and relate different software processes, system models and architetural designs and assess their suitability in a given context</li> <li>explain, using theory of group dynamics, how the project manager can act to influence success of the project</li> <li>present and discuss course contents, orally and in writing.</li>"
Uppsala_Sweden,1MD300,<h2>Uppsala_Sweden 1MD300</h2><h2>title</h2>Social Robotics and Human-Robot Interaction<h2>content</h2><h2>ilo</h2> <li>understand principles and theories of human-robot interaction</li> <li>carry out user requirement analysis and design of human-robot interaction in concrete scenarios</li> <li>design and develop social skills for human-robot interaction using a physical robotic platform</li> <li>use quantitative and qualitative approaches for evaluation and analysis of human-robot interaction data</li> <li>evaluate the impact that social robots may have on ethical values like privacy and autonomy that are important for users and society at large</li>,Social Robotics and Human-Robot Interaction,,, <li>understand principles and theories of human-robot interaction</li> <li>carry out user requirement analysis and design of human-robot interaction in concrete scenarios</li> <li>design and develop social skills for human-robot interaction using a physical robotic platform</li> <li>use quantitative and qualitative approaches for evaluation and analysis of human-robot interaction data</li> <li>evaluate the impact that social robots may have on ethical values like privacy and autonomy that are important for users and society at large</li>