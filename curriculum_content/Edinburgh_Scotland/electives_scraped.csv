institution,elective,overview,title,summary,content,ilo
Edinburgh_UK,cxinfr08020,"<h2>title</h2>Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020)<h2>summary</h2>This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.<h2>content</h2>
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020),"This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.","
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",
Edinburgh_UK,cxinfr08010,"<h2>title</h2>Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)<h2>summary</h2>This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.<h2>content</h2>
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010),"This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.","
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",
Edinburgh_UK,cxinfr08033,"<h2>title</h2>Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033)<h2>summary</h2><h2>content</h2>Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033),,"Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",
Edinburgh_UK,cxinfr10052,"<h2>title</h2>Undergraduate Course: Algorithms and Data Structures (INFR10052)<h2>summary</h2>The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.<h2>content</h2>
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",Undergraduate Course: Algorithms and Data Structures (INFR10052),"The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.","
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",
Edinburgh_UK,cxinfr10087,"<h2>title</h2>Undergraduate Course: Automated Reasoning (INFR10087)<h2>summary</h2>**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.<h2>content</h2>
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",Undergraduate Course: Automated Reasoning (INFR10087),"**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.","
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",
Edinburgh_UK,cxinfr10065,"<h2>title</h2>Undergraduate Course: Compiling Techniques (INFR10065)<h2>summary</h2>This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.<h2>content</h2>
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",Undergraduate Course: Compiling Techniques (INFR10065),"This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.","
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",
Edinburgh_UK,cxinfr10054,"<h2>title</h2>Undergraduate Course: Computational Cognitive Science (INFR10054)<h2>summary</h2>This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.<h2>content</h2>
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",Undergraduate Course: Computational Cognitive Science (INFR10054),"This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.","
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",
Edinburgh_UK,cxinfr10076,"<h2>title</h2>Undergraduate Course: Computer Architecture and Design (INFR10076)<h2>summary</h2>In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.<h2>content</h2>
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",Undergraduate Course: Computer Architecture and Design (INFR10076),"In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.","
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",
Edinburgh_UK,cxinfr10074,"<h2>title</h2>Undergraduate Course: Computer Communications and Networks (INFR10074)<h2>summary</h2>This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.<h2>content</h2>
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",Undergraduate Course: Computer Communications and Networks (INFR10074),"This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.","
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",
Edinburgh_UK,cxinfr10077,"<h2>title</h2>Undergraduate Course: Computing in the Classroom (INFR10077)<h2>summary</h2>This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.<h2>content</h2>
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",Undergraduate Course: Computing in the Classroom (INFR10077),"This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.","
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",
Edinburgh_UK,cxinfr10061,"<h2>title</h2>Undergraduate Course: Elements of Programming Languages (INFR10061)<h2>summary</h2>Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.<h2>content</h2>
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",Undergraduate Course: Elements of Programming Languages (INFR10061),"Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.","
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",
Edinburgh_UK,cxinfr10078,"<h2>title</h2>Undergraduate Course: Foundations of Natural Language Processing (INFR10078)<h2>summary</h2>***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
<h2>content</h2>
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",Undergraduate Course: Foundations of Natural Language Processing (INFR10078),"***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
","
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",
Edinburgh_UK,cxinfr10084,"<h2>title</h2>Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)<h2>summary</h2><h2>content</h2>Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. <br>
<br>
This course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. <br>
<br>
It is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084),,"Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. <br>
<br>
This course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. <br>
<br>
It is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",
Edinburgh_UK,cxinfr10080,"<h2>title</h2>Undergraduate Course: Introduction to Databases (INFR10080)<h2>summary</h2>Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *<h2>content</h2>
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",Undergraduate Course: Introduction to Databases (INFR10080),"Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *","
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",
Edinburgh_UK,cxinfr10085,"<h2>title</h2>Undergraduate Course: Introduction to Mobile Robotics (INFR10085)<h2>summary</h2>A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.<h2>content</h2>
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",Undergraduate Course: Introduction to Mobile Robotics (INFR10085),"A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.","
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",
Edinburgh_UK,cxinfr10059,"<h2>title</h2>Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)<h2>summary</h2>This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
<h2>content</h2>
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059),"This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
","
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",
Edinburgh_UK,cxinfr10086,"<h2>title</h2>Undergraduate Course: Machine Learning (INFR10086)<h2>summary</h2>***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",Undergraduate Course: Machine Learning (INFR10086),"***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",
Edinburgh_UK,cxinfr10079,"<h2>title</h2>Undergraduate Course: Operating Systems (INFR10079)<h2>summary</h2>This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
<h2>content</h2>
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",Undergraduate Course: Operating Systems (INFR10079),"This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
","
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",
Edinburgh_UK,cxinfr10064,"<h2>title</h2>Undergraduate Course: Software Design and Modelling (INFR10064)<h2>summary</h2>This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.<h2>content</h2>
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",Undergraduate Course: Software Design and Modelling (INFR10064),"This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.","
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",
Edinburgh_UK,cxinfr10057,"<h2>title</h2>Undergraduate Course: Software Testing (INFR10057)<h2>summary</h2>This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.<h2>content</h2>
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",Undergraduate Course: Software Testing (INFR10057),"This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.","
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",
Edinburgh_UK,cxinfr10075,"<h2>title</h2>Undergraduate Course: Work-Based Professional Practice B in Data Analytics (INFR10075)<h2>summary</h2>This course is work-based and is focused on the real-world application of data science in a workplace environment.  It includes experiencing how statistical modelling , machine learning and relevant algorithms are applied to conduct data science studies on real data in a commercial environment. Students who do this course will obtain practical experience in the design, implementation, and evaluation of data science approaches.<h2>content</h2>
    
    *This course is not a stand-alone introduction to applied data analytics and can only be delivered as part of the BSc Hons Graduate Apprenticeship in Data Science.*<br>
<br>
This course provides Graduate Apprenticeship students with a holistic approach to business problem solving to support decision making and providing business insights. It is a key stage in the learning and development strategy of the graduate apprenticeship programme in Data Science. It is project based, introduced in the university and facilitated in the workplace around team-based projects.<br>
This is a work-based learning course worth 40-credits.  Students undertake an eight-month professional practice period in year 3 over semester 2 and the summer and are expected to spend around 400 hours in total on this course. This is in addition to work activities the employer will be setting. The SLICC will be planned to cover the group of graduate apprenticeship students working with a specific employer and the work will directly link to their own contexts in the workplace.  <br>
The main topics are: the application of data science tools and techniques, developing an understanding of the application of machine learning, statistical modelling and algorithms to solve business problems. In addition, this course covers the meta skills required to operate in a professional environment including graduate attributes for: lifelong learning, aspiration and personal development, outlook and engagement, research and enquiry, personal and intellectual autonomy, personal effectiveness and communication in both university and the workplace<br>
The year 3 taught courses in computing and mathematics, particularly those in statistics and machine learning are applied to real world data science problems and projects.<br>
Students will journal their learning using the Student-Led Individually Created Course (SLICC) approach. The SLICC framework requires that students use the generic learning outcomes to articulate their data science learning in the context of their work tasks, reflect frequently in a reflective journal, and collect and curate evidence in an e-portfolio of both their data science learning and metaskills development during their 8 months placement. They will experience different applications of data analytics in different projects during their placement and will have access to a company career coach to aid their professional development.  They will also produce a final report in the format required for their employer. All this is with the guidance of a professional practice academic tutor.<br>
The course will encourage appraisal of students' own practical experiences and allow them to reflect on their learning in the context of data analytics.
    
    
",Undergraduate Course: Work-Based Professional Practice B in Data Analytics (INFR10075),"This course is work-based and is focused on the real-world application of data science in a workplace environment.  It includes experiencing how statistical modelling , machine learning and relevant algorithms are applied to conduct data science studies on real data in a commercial environment. Students who do this course will obtain practical experience in the design, implementation, and evaluation of data science approaches.","
    
    *This course is not a stand-alone introduction to applied data analytics and can only be delivered as part of the BSc Hons Graduate Apprenticeship in Data Science.*<br>
<br>
This course provides Graduate Apprenticeship students with a holistic approach to business problem solving to support decision making and providing business insights. It is a key stage in the learning and development strategy of the graduate apprenticeship programme in Data Science. It is project based, introduced in the university and facilitated in the workplace around team-based projects.<br>
This is a work-based learning course worth 40-credits.  Students undertake an eight-month professional practice period in year 3 over semester 2 and the summer and are expected to spend around 400 hours in total on this course. This is in addition to work activities the employer will be setting. The SLICC will be planned to cover the group of graduate apprenticeship students working with a specific employer and the work will directly link to their own contexts in the workplace.  <br>
The main topics are: the application of data science tools and techniques, developing an understanding of the application of machine learning, statistical modelling and algorithms to solve business problems. In addition, this course covers the meta skills required to operate in a professional environment including graduate attributes for: lifelong learning, aspiration and personal development, outlook and engagement, research and enquiry, personal and intellectual autonomy, personal effectiveness and communication in both university and the workplace<br>
The year 3 taught courses in computing and mathematics, particularly those in statistics and machine learning are applied to real world data science problems and projects.<br>
Students will journal their learning using the Student-Led Individually Created Course (SLICC) approach. The SLICC framework requires that students use the generic learning outcomes to articulate their data science learning in the context of their work tasks, reflect frequently in a reflective journal, and collect and curate evidence in an e-portfolio of both their data science learning and metaskills development during their 8 months placement. They will experience different applications of data analytics in different projects during their placement and will have access to a company career coach to aid their professional development.  They will also produce a final report in the format required for their employer. All this is with the guidance of a professional practice academic tutor.<br>
The course will encourage appraisal of students' own practical experiences and allow them to reflect on their learning in the context of data analytics.
    
    
",
Edinburgh_UK,cxinfr10083,"<h2>title</h2>Undergraduate Course: Work-Based Professional Practice C in Data Analytics (INFR10083)<h2>summary</h2>This course is work-based and is focused on the real-world application of data analytics and the development of self-analytic skills in a workplace environment. It includes experiencing how computation, analysis, mathematical modelling and statistics are applied to conduct data analysis studies on real data in a commercial environment. Students who do this course will obtain practical experience in the design, implementation, and evaluation of data analysis approaches. They will also learn how to reflect on their personal development throughout their time in the placement and their own professional development as a data scientist.<h2>content</h2>
    
    *This is a work-based course and is only available as part of the Graduate Apprenticeship BSc Hons in Data Science.*<br>
<br>
The aim of this course is to provide data science graduate apprenticeship students with work-based professional practice in the application of data analysis and statistical techniques. It gives students a practical introduction and understanding of the foundations, concepts and techniques applied to data analytics and provides an opportunity to apply the learning gained in the core courses to address data analysis problems and challenges in the workplace. The main topics are: the application of data analysis tools and techniques, an introduction to common data quality problems, and the application of statistics and machine learning. In addition, this course covers the meta-skills required to operate in a professional environment including teamwork, problem-solving and communication skills and personal self-awareness.<br>
<br>
The course is delivered over four months during Semester 2 of Year 4. Students are expected to spend around 200 hours in total on this course on data science activities embedded in the work activities the employer will set. The work will directly link to their own contexts in the workplace. Students will be directed in their learning using the Student-Led Individually Created Course (SLICC) approach. They will reflect on and evaluate data analysis studies from their own work context in data analytics. <br>
<br>
The SLICC framework requires that students use the generic learning outcomes to articulate their learning in their own defined project, reflect frequently using a blog, and collect and curate evidence of their learning in an e-portfolio. The final report which forms the summative assessment will draw together the evidence in the reflective journals and portfolios. All this is carried out with the guidance of a professional practice academic tutor. The course will encourage appraisal of students' own practical experiences and allow them to reflect on their learning, professional and personal development in the context of data analytics.
    
    
",Undergraduate Course: Work-Based Professional Practice C in Data Analytics (INFR10083),"This course is work-based and is focused on the real-world application of data analytics and the development of self-analytic skills in a workplace environment. It includes experiencing how computation, analysis, mathematical modelling and statistics are applied to conduct data analysis studies on real data in a commercial environment. Students who do this course will obtain practical experience in the design, implementation, and evaluation of data analysis approaches. They will also learn how to reflect on their personal development throughout their time in the placement and their own professional development as a data scientist.","
    
    *This is a work-based course and is only available as part of the Graduate Apprenticeship BSc Hons in Data Science.*<br>
<br>
The aim of this course is to provide data science graduate apprenticeship students with work-based professional practice in the application of data analysis and statistical techniques. It gives students a practical introduction and understanding of the foundations, concepts and techniques applied to data analytics and provides an opportunity to apply the learning gained in the core courses to address data analysis problems and challenges in the workplace. The main topics are: the application of data analysis tools and techniques, an introduction to common data quality problems, and the application of statistics and machine learning. In addition, this course covers the meta-skills required to operate in a professional environment including teamwork, problem-solving and communication skills and personal self-awareness.<br>
<br>
The course is delivered over four months during Semester 2 of Year 4. Students are expected to spend around 200 hours in total on this course on data science activities embedded in the work activities the employer will set. The work will directly link to their own contexts in the workplace. Students will be directed in their learning using the Student-Led Individually Created Course (SLICC) approach. They will reflect on and evaluate data analysis studies from their own work context in data analytics. <br>
<br>
The SLICC framework requires that students use the generic learning outcomes to articulate their learning in their own defined project, reflect frequently using a blog, and collect and curate evidence of their learning in an e-portfolio. The final report which forms the summative assessment will draw together the evidence in the reflective journals and portfolios. All this is carried out with the guidance of a professional practice academic tutor. The course will encourage appraisal of students' own practical experiences and allow them to reflect on their learning, professional and personal development in the context of data analytics.
    
    
",
Edinburgh_UK,cxinfr11199,"<h2>title</h2>Undergraduate Course: Advanced Database Systems (INFR11199)<h2>summary</h2>Database management systems are at the core of computer applications that need to store, manipulate, and query data. This course takes a deep dive into how modern database systems function internally, from studying their high-level design to understanding the underlying data structures and algorithms used for efficient data processing. The course covers a range of data management techniques from both commercial systems and cutting-edge research literature, enabling students to apply these techniques to other fields of computer science.<br>
<br>
The covered topics include database architecture, storage manager, data models (row, columnar), indexing (tree-based, hash tables), transaction processing (ACID, concurrency control), crash recovery, parallel architectures (multi-core, distributed), and large-scale data processing systems. These topics will be valuable to students who plan to work in the data science industry but also to students who want to do research in the area of data management. The programming component of this course will allow students to develop first-hand experience working with database systems that goes beyond writing SQL queries.<h2>content</h2>
    
    Lectures will cover roughly the following topics:<br>
- Database systems architectures, row stores and column stores, OLTP vs. OLAP, in-memory database systems<br>
- Storage: secondary-storage devices<br>
- Indexing: tree-based and hash-based techniques, multi-dimensional indexing, learning indices from data<br>
- Query evaluation: theory of query evaluation, sorting and join processing, selection, projection, aggregation<br>
- Query optimisation: cardinality estimation, cost-based query optimisation, dynamic programming, rule-based optimisation<br>
- Transaction management: ACID properties, concurrency control, locking and multi-version protocols, crash recovery<br>
- Distributed database systems: parallel query evaluation, distributed transaction processing<br>
- Big data and NoSQL systems
    
    
",Undergraduate Course: Advanced Database Systems (INFR11199),"Database management systems are at the core of computer applications that need to store, manipulate, and query data. This course takes a deep dive into how modern database systems function internally, from studying their high-level design to understanding the underlying data structures and algorithms used for efficient data processing. The course covers a range of data management techniques from both commercial systems and cutting-edge research literature, enabling students to apply these techniques to other fields of computer science.<br>
<br>
The covered topics include database architecture, storage manager, data models (row, columnar), indexing (tree-based, hash tables), transaction processing (ACID, concurrency control), crash recovery, parallel architectures (multi-core, distributed), and large-scale data processing systems. These topics will be valuable to students who plan to work in the data science industry but also to students who want to do research in the area of data management. The programming component of this course will allow students to develop first-hand experience working with database systems that goes beyond writing SQL queries.","
    
    Lectures will cover roughly the following topics:<br>
- Database systems architectures, row stores and column stores, OLTP vs. OLAP, in-memory database systems<br>
- Storage: secondary-storage devices<br>
- Indexing: tree-based and hash-based techniques, multi-dimensional indexing, learning indices from data<br>
- Query evaluation: theory of query evaluation, sorting and join processing, selection, projection, aggregation<br>
- Query optimisation: cardinality estimation, cost-based query optimisation, dynamic programming, rule-based optimisation<br>
- Transaction management: ACID properties, concurrency control, locking and multi-version protocols, crash recovery<br>
- Distributed database systems: parallel query evaluation, distributed transaction processing<br>
- Big data and NoSQL systems
    
    
",
Edinburgh_UK,cxinfr11217,"<h2>title</h2>Undergraduate Course: Advanced Database Systems (UG) (INFR11217)<h2>summary</h2>This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",Undergraduate Course: Advanced Database Systems (UG) (INFR11217),"This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.","
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",
Edinburgh_UK,cxinfr11213,"<h2>title</h2>Postgraduate Course: Advanced Robotics (INFR11213)<h2>summary</h2>***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
<h2>content</h2>
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",Postgraduate Course: Advanced Robotics (INFR11213),"***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
","
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",
Edinburgh_UK,cxinfr11020,"<h2>title</h2>Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020)<h2>summary</h2>Game theory is the formal study of interaction between ""self-interested"" (or ""goal-oriented"") ""systems"" (or ""agents"" or ""decision makers"" or ""players""), &amp; strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann &amp; Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology &amp; even to inspection regimes for arms control. <br>
<br>
Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification &amp; model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics &amp; computing have received extensive attention. These include electronic auctions, &amp; more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. <br>
<br>
Wherever game theory plays a quantitative role, algorithmic and computational questions related to ""solving"" games are also of central importance. <br>
<br>
This course aims to bring together as a coherent body of knowledge the game theoretic algorithms &amp; models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, &amp; AI. <br>
<h2>content</h2>
    
     Examples of diverse games<br>
Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem<br>
<br>
General games in strategic form:<br>
 - Equilibria and Nash's theorem<br>
 - 2-player equilibria: Lemke-Howson algorithm and its variants. <br>
<br>
Games in Extensive form (mainly zero-sum, perfect information):<br>
 - Game trees. Relation to Strategic games<br>
 - and / or game graphs and reachability games<br>
 - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)<br>
 - mean value games, MDPs, and stochastic games<br>
<br>
Mechanism design and inverse game theory: designing games where selfish players will behave as desired:<br>
 - Vickery auctions and other mechanisms<br>
 - Combinatorial auctions<br>
 - Incentive structures for the internet. <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing
    
    
",Postgraduate Course: Algorithmic Game Theory and its Applications (INFR11020),"Game theory is the formal study of interaction between ""self-interested"" (or ""goal-oriented"") ""systems"" (or ""agents"" or ""decision makers"" or ""players""), &amp; strategic scenarios that arise in such settings. It began life in Economics in the 1940's with the work of von Neumann &amp; Morgenstern, but has since been applied to an extraordinary range of subjects, including political science, evolutionary biology &amp; even to inspection regimes for arms control. <br>
<br>
Game theory has for years also played an important, if less recognized, role in several branches of computer science. Applications within computer science include the use of games in automated verification &amp; model checking to model computing systems in an unknown and possibly adverse environment. In AI games are applied to the analysis of multi-agent systems. Recently, with the advent of the internet and e-commerce, many game theoretic questions in the interplay between economics &amp; computing have received extensive attention. These include electronic auctions, &amp; more generally mechanism design questions (inverse game theory) related to finding incentive structures for cooperation between independent entities on the internet. <br>
<br>
Wherever game theory plays a quantitative role, algorithmic and computational questions related to ""solving"" games are also of central importance. <br>
<br>
This course aims to bring together as a coherent body of knowledge the game theoretic algorithms &amp; models that underpin several flourishing subjects at the intersection of computer science, economics and e-commerce, &amp; AI. <br>
","
    
     Examples of diverse games<br>
Zero-sum two-person games: LP, simplex, LP-duality, mixed strategies and the minimax theorem<br>
<br>
General games in strategic form:<br>
 - Equilibria and Nash's theorem<br>
 - 2-player equilibria: Lemke-Howson algorithm and its variants. <br>
<br>
Games in Extensive form (mainly zero-sum, perfect information):<br>
 - Game trees. Relation to Strategic games<br>
 - and / or game graphs and reachability games<br>
 - bisimulation, simulation, parity games, and other omega-games on automata (finitely presented, infinite duration games)<br>
 - mean value games, MDPs, and stochastic games<br>
<br>
Mechanism design and inverse game theory: designing games where selfish players will behave as desired:<br>
 - Vickery auctions and other mechanisms<br>
 - Combinatorial auctions<br>
 - Incentive structures for the internet. <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Data Structures and Algorithms, e-commerce, Simulation and Modelling, Theoretical Computing
    
    
",
Edinburgh_UK,cxinfr11218,"<h2>title</h2>Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)<h2>summary</h2>This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218),"This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.","
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",
Edinburgh_UK,cxinfr11033,"<h2>title</h2>Postgraduate Course: Automatic Speech Recognition (INFR11033)<h2>summary</h2>This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. <br>
<br>
Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.<h2>content</h2>
    
    Signal analysis for ASR<br>
Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)<br>
Hidden Markov Models (HMM)<br>
Context-dependent models<br>
Discriminative training<br>
Language models for LVCSR (large vocabulary continuous speech recognition)<br>
Decoding<br>
Robust ASR (Robust features Noise reduction, Microphone arrays)<br>
Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)<br>
Speaker recognition<br>
History of speech recognition<br>
Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)<br>
Speech recognition applications (including privacy implications)<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing
    
    
",Postgraduate Course: Automatic Speech Recognition (INFR11033),"This course covers the theory and practice of automatic speech recognition (ASR), with a focus on the statistical approaches that comprise the state of the art. The course introduces the overall framework for speech recognition, including speech signal analysis, acoustic modelling using hidden Markov models, language modelling and recognition search. <br>
<br>
Advanced topics covered will include speaker adaptation, robust speech recognition and speaker identification. The practical side of the course will involve the development of a speech recognition system using a speech recognition software toolkit.","
    
    Signal analysis for ASR<br>
Statistical pattern recognition (Bayes decision theory, Learning algorithms, Evaluation methods, Gaussian mixture model, and EM algorithm)<br>
Hidden Markov Models (HMM)<br>
Context-dependent models<br>
Discriminative training<br>
Language models for LVCSR (large vocabulary continuous speech recognition)<br>
Decoding<br>
Robust ASR (Robust features Noise reduction, Microphone arrays)<br>
Adaptation (Noise adaptation, Speaker adaptation/normalization, Language model adaptation)<br>
Speaker recognition<br>
History of speech recognition<br>
Advanced topics (Using prosody for ASR, Audio-visual ASR, Indexing, Bayesian network)<br>
Speech recognition applications (including privacy implications)<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Natural Language Computing
    
    
",
Edinburgh_UK,cxinfr11245,<h2>title</h2><h2>summary</h2><h2>content</h2>,,,,
Edinburgh_UK,cxinfr11160,"<h2>title</h2>Undergraduate Course: Bioinformatics 1 (INFR11160)<h2>summary</h2>**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.<h2>content</h2>
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",Undergraduate Course: Bioinformatics 1 (INFR11160),"**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.","
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",
Edinburgh_UK,cxinfr11144,"<h2>title</h2>Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144)<h2>summary</h2>Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. <br>
<br>
This course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.<h2>content</h2>
    
    The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. <br>
<br>
Syllabus:<br>
1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.<br>
2. The consensus layer. Basic Properties. Proof of Work.<br>
3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. <br>
4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.<br>
5. Scalability Issues. Byzantine agreement protocols. <br>
6. Blockchain as a platform. Smart Contracts. <br>
7. Secure multiparty computation techniques and their application to blockchain protocols. <br>
8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. <br>
9. Game theoretic analysis of blockchain protocols. <br>
10. Name and object registries. Reputation systems. Policy issues related to blockchain.
    
    
",Undergraduate Course: Blockchains and Distributed Ledgers (INFR11144),"Blockchain technology and distributed ledgers have been hailed as a turning point in scaling information technology services at a global level. Although the digital currency Bitcoin is the best-known Blockchain application today, the technology is set to play a much broader role in cyber security. <br>
<br>
This course is an introduction to blockchain systems and distributed ledgers, the relevant cryptographic tools and smart contracts programming.","
    
    The concept of blockchain will be covered in detail together with the supporting cryptographic technology. Questions that will be covered is why it works and what problems can it solve. <br>
<br>
Syllabus:<br>
1. Introduction to blockchain. What is a distributed ledger. Transactions. Digital Signatures.<br>
2. The consensus layer. Basic Properties. Proof of Work.<br>
3. Robust Transaction Ledgers. Properties and Objectives. Permissioned, permissionless ledgers. <br>
4. Privacy Issues. Anonymity, Pseudonymity, Unlinkability. Zero-Knowledge Proofs.<br>
5. Scalability Issues. Byzantine agreement protocols. <br>
6. Blockchain as a platform. Smart Contracts. <br>
7. Secure multiparty computation techniques and their application to blockchain protocols. <br>
8. Alternative techniques to proof of work for blockchain protocols, proof of stake/space. <br>
9. Game theoretic analysis of blockchain protocols. <br>
10. Name and object registries. Reputation systems. Policy issues related to blockchain.
    
    
",
Edinburgh_UK,cxinfr11209,"<h2>title</h2>Undergraduate Course: Computational Neuroscience (INFR11209)<h2>summary</h2>In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.<h2>content</h2>
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",Undergraduate Course: Computational Neuroscience (INFR11209),"In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.","
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",
Edinburgh_UK,cxinfr11241,"<h2>title</h2>Undergraduate Course: Computer Graphics: Geometry and Simulation (INFR11241)<h2>summary</h2>This course introduces classic and state-of-the-art methodology in computer graphics. We will focus on methods and best practices in geometry, physical simulation, and geometric deep learning, which are the basic building blocks for downstream applications such as animation, industrial design, game engineering, structural analysis, AR/VR, and medical imaging. Our curriculum will cover basic representations of shapes, geometric optimization, analysis, and principles of robust digital simulation of physical scenes. The techniques employed will involve classical numerical analysis up to deep learning. <br>
<br>
The course will include programming tasks to implement a few key algorithms in geometry processing, geometric learning, and physical simulation, to the extent that they can independently run and be analysed on modest open-source data.<br>
<br>
This course (CGGS) and Computer Graphics: Rendering (CGR) are both courses that require no previous knowledge of computer graphics. These two courses may be taken independently or together. CGGS focusses on the representation, processing and dynamics of 3D objects in the virtual world while CGR focusses on the rendering of virtual worlds as photo-realistic images.<h2>content</h2>
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content / Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year, but will include many of the following topics:<br>
<br>
-	Overview: geometry and simulation in digital applications. <br>
-	Elemental digital representations of geometry: simplicial meshes, point clouds, voxelizations, implicit functions, neural fields<br>
-	Elementary principles of discrete simulation: strain and stress tensors, force equations, time integration.<br>
-	Geometry acquisition and reconstruction: classical (least-squares based) and modern (neural-network based) algorithms.<br>
-	Discrete shape analysis: curvatures, topology, differential operators.<br>
-	Finite-element spaces for simulation and analysis, including basic PDEs like elasticity, Stokes equation, and Poisson equation.<br>
-	Simulation of rigid bodies with collisions.<br>
-	Modern deep-learning techniques for geometry and simulation, such as physics-informed neural networks, graph neural networks, and implicit representations (e.g., signed distance fields)<br>
-	Practical aspects of implementation and debugging in geometry: we will discuss how to identify, critically analyse, and improve performance in geometric methods, with emphasis on pitfalls and basic principles in implementation and design.
    
    
",Undergraduate Course: Computer Graphics: Geometry and Simulation (INFR11241),"This course introduces classic and state-of-the-art methodology in computer graphics. We will focus on methods and best practices in geometry, physical simulation, and geometric deep learning, which are the basic building blocks for downstream applications such as animation, industrial design, game engineering, structural analysis, AR/VR, and medical imaging. Our curriculum will cover basic representations of shapes, geometric optimization, analysis, and principles of robust digital simulation of physical scenes. The techniques employed will involve classical numerical analysis up to deep learning. <br>
<br>
The course will include programming tasks to implement a few key algorithms in geometry processing, geometric learning, and physical simulation, to the extent that they can independently run and be analysed on modest open-source data.<br>
<br>
This course (CGGS) and Computer Graphics: Rendering (CGR) are both courses that require no previous knowledge of computer graphics. These two courses may be taken independently or together. CGGS focusses on the representation, processing and dynamics of 3D objects in the virtual world while CGR focusses on the rendering of virtual worlds as photo-realistic images.","
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content / Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year, but will include many of the following topics:<br>
<br>
-	Overview: geometry and simulation in digital applications. <br>
-	Elemental digital representations of geometry: simplicial meshes, point clouds, voxelizations, implicit functions, neural fields<br>
-	Elementary principles of discrete simulation: strain and stress tensors, force equations, time integration.<br>
-	Geometry acquisition and reconstruction: classical (least-squares based) and modern (neural-network based) algorithms.<br>
-	Discrete shape analysis: curvatures, topology, differential operators.<br>
-	Finite-element spaces for simulation and analysis, including basic PDEs like elasticity, Stokes equation, and Poisson equation.<br>
-	Simulation of rigid bodies with collisions.<br>
-	Modern deep-learning techniques for geometry and simulation, such as physics-informed neural networks, graph neural networks, and implicit representations (e.g., signed distance fields)<br>
-	Practical aspects of implementation and debugging in geometry: we will discuss how to identify, critically analyse, and improve performance in geometric methods, with emphasis on pitfalls and basic principles in implementation and design.
    
    
",
Edinburgh_UK,cxinfr11246,<h2>title</h2><h2>summary</h2><h2>content</h2>,,,,
Edinburgh_UK,cxinfr11077,"<h2>title</h2>Postgraduate Course: MSc Dissertation (Informatics) (INFR11077)<h2>summary</h2><h2>content</h2>This is a major piece of full-time independent work which occupies the final months of the MSc course. It is intended to allow students to demonstrate their ability to organise and carry out a substantial investigation into a problem in Informatics, according to sound scientific and engineering principles. The project involves both the application of skills learnt in the past and the acquisition of new skills.<br>
<br>
The types of activity involved in each project will vary but will include most of the following:<br>
<br>
    * Researching the literature and gathering background information.<br>
    * Analysing requirements, comparing alternatives and specifying a solution.<br>
    * Analysing and extending relevant theory in novel ways.<br>
    * Designing and implementing the solution.<br>
    * Experimenting with and evaluating the solution.<br>
    * Discussing existing results and presenting new research.<br>
    * Developing written and oral presentation skills.<br>
<br>
The project is conducted individually by the student under the supervision of a member of teaching staff. Students are formed into groups for the purpose of a Review Meeting.",Postgraduate Course: MSc Dissertation (Informatics) (INFR11077),,"This is a major piece of full-time independent work which occupies the final months of the MSc course. It is intended to allow students to demonstrate their ability to organise and carry out a substantial investigation into a problem in Informatics, according to sound scientific and engineering principles. The project involves both the application of skills learnt in the past and the acquisition of new skills.<br>
<br>
The types of activity involved in each project will vary but will include most of the following:<br>
<br>
    * Researching the literature and gathering background information.<br>
    * Analysing requirements, comparing alternatives and specifying a solution.<br>
    * Analysing and extending relevant theory in novel ways.<br>
    * Designing and implementing the solution.<br>
    * Experimenting with and evaluating the solution.<br>
    * Discussing existing results and presenting new research.<br>
    * Developing written and oral presentation skills.<br>
<br>
The project is conducted individually by the student under the supervision of a member of teaching staff. Students are formed into groups for the purpose of a Review Meeting.",
Edinburgh_UK,cxinfr11088,"<h2>title</h2>Postgraduate Course: Extreme Computing (INFR11088)<h2>summary</h2>Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).<h2>content</h2>
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",Postgraduate Course: Extreme Computing (INFR11088),"Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).","
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",
Edinburgh_UK,cxinfr11129,"<h2>title</h2>Undergraduate Course: Formal Verification (INFR11129)<h2>summary</h2>Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.<h2>content</h2>
    
    In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br>
 <br>
This course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br>
 <br>
Topics the course covers include the following: <br>
*Formal verification in context, its current take-up in industry and challenges to its wider <br>
adoption <br>
*Syntax and semantics of CTL and LTL temporal logics <br>
*CTL and LTL model checking techniques, including automata-based approaches and <br>
bounded model checking with SAT solvers <br>
*The BDD data-structure used at the heart of many model checkers <br>
*Writing models for model checking and phrasing useful properties in CTL and LTL <br>
*Operational semantics of a simple imperative programming language, weakest precondition <br>
operators and verification condition generation <br>
*The capabilities of SMT solvers for discharging verification conditions <br>
*Assertion-based software verification <br>
 <br>
 <br>
Optional topics include: <br>
*Industrial temporal logics such as PSL and SVA used in hardware verification <br>
*Formal verification case studies <br>
*Formal verification of hybrid systems, system with both discrete state changes and <br>
continuous state changes governed by differential equations <br>
*Combining formal and simulation-based verification methods <br>
*Dual use of temporal logic properties and assertions in formal and simulation-based <br>
verification of hardware and software  <br>
*Software model checking, focusing on its use for finding concurrency bugs <br>
*Pattern-based detection of concurrency bugs
    
    
",Undergraduate Course: Formal Verification (INFR11129),"Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.","
    
    In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br>
 <br>
This course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br>
 <br>
Topics the course covers include the following: <br>
*Formal verification in context, its current take-up in industry and challenges to its wider <br>
adoption <br>
*Syntax and semantics of CTL and LTL temporal logics <br>
*CTL and LTL model checking techniques, including automata-based approaches and <br>
bounded model checking with SAT solvers <br>
*The BDD data-structure used at the heart of many model checkers <br>
*Writing models for model checking and phrasing useful properties in CTL and LTL <br>
*Operational semantics of a simple imperative programming language, weakest precondition <br>
operators and verification condition generation <br>
*The capabilities of SMT solvers for discharging verification conditions <br>
*Assertion-based software verification <br>
 <br>
 <br>
Optional topics include: <br>
*Industrial temporal logics such as PSL and SVA used in hardware verification <br>
*Formal verification case studies <br>
*Formal verification of hybrid systems, system with both discrete state changes and <br>
continuous state changes governed by differential equations <br>
*Combining formal and simulation-based verification methods <br>
*Dual use of temporal logic properties and assertions in formal and simulation-based <br>
verification of hardware and software  <br>
*Software model checking, focusing on its use for finding concurrency bugs <br>
*Pattern-based detection of concurrency bugs
    
    
",
Edinburgh_UK,cxinfr11017,"<h2>title</h2>Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)<h2>summary</h2>The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.<h2>content</h2>
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017),"The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.","
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",
Edinburgh_UK,cxinfr11131,"<h2>title</h2>Undergraduate Course: Introduction to Modern Cryptography (INFR11131)<h2>summary</h2>Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: ""system assumptions"" such as the faithful execution of code, or the availability of private randomness and ""computational assumptions"". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.<h2>content</h2>
    
    The course is divided in two parts: Private Key and Public Key. Topics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. In the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.<br>
<br>
Part 1: Private Key<br>
<br>
- Classical ciphers: Shift cipher, Vigenere<br>
- Perfect secrecy<br>
- One-time pad (OTP)<br>
- Computational secrecy<br>
- Pseudorandom generators (PRG)<br>
- Pseudo-OTP<br>
- Security against chosen-plaintext attacks (CPA)<br>
- Pseudorandom functions / permutations (PRF / PRP)<br>
- CPA-secure encryption using PRF/PRP: block ciphers<br>
- Modes of operation: block ciphers, stream ciphers<br>
- Malleability<br>
- Security against chosen-ciphertext attacks (CCA)<br>
- Padding-oracle attacks: non-CCA secure schemes<br>
- Secrecy vs. integrity: message authentication codes (MAC)<br>
- Hash functions<br>
<br>
Part 2: Public Key<br>
<br>
- Digital Signatures<br>
- Trapdoor One-Way functions<br>
- Random oracles<br>
- Cyclic groups<br>
- The discrete logarithm/Diffie-Hellman assumptions<br>
- Key exchange and the Diffie-Hellman protocol<br>
- Public Key Encryption<br>
- Security against chosen-plaintext attacks<br>
- ElGamal Encryption<br>
- Zero-Knowledge proofs<br>
- The Schnorr identification scheme
    
    
",Undergraduate Course: Introduction to Modern Cryptography (INFR11131),"Cryptography is the formal study of the notion of security in information systems. The course will offer an introduction to modern cryptography focusing on models and proofs of security for various basic cryptographic primitives and protocols. Cryptographic proofs are conditional on assumptions that fall in two categories: ""system assumptions"" such as the faithful execution of code, or the availability of private randomness and ""computational assumptions"". The latter are related to the computational complexity of various problems (including factoring large numbers and others). Students will learn to model security problems and prove them secure under precisely formulated system and computational assumptions.","
    
    The course is divided in two parts: Private Key and Public Key. Topics covered in the Private Key part are: classical ciphers (Caesar, Vigenere), one-time pad and perfect secrecy, computational secrecy, pseudorandom functions and permutations, CPA security, CCA security and proofs by reduction. The following topics are also briefly discussed: block ciphers, modes of operation, message integrity, hash functions and MACs. In the Public Key part we cover: hard computational problems such as factoring and discrete log, the Diffie-Hellman key exchange protocol, ElGamal and digital signatures. Other topics that may also be discussed (depending on time) are: zero-knowledge proofs, Schnorr Identification, commitment schemes and oblivious transfer protocols. A tentative outline of the material is given below.<br>
<br>
Part 1: Private Key<br>
<br>
- Classical ciphers: Shift cipher, Vigenere<br>
- Perfect secrecy<br>
- One-time pad (OTP)<br>
- Computational secrecy<br>
- Pseudorandom generators (PRG)<br>
- Pseudo-OTP<br>
- Security against chosen-plaintext attacks (CPA)<br>
- Pseudorandom functions / permutations (PRF / PRP)<br>
- CPA-secure encryption using PRF/PRP: block ciphers<br>
- Modes of operation: block ciphers, stream ciphers<br>
- Malleability<br>
- Security against chosen-ciphertext attacks (CCA)<br>
- Padding-oracle attacks: non-CCA secure schemes<br>
- Secrecy vs. integrity: message authentication codes (MAC)<br>
- Hash functions<br>
<br>
Part 2: Public Key<br>
<br>
- Digital Signatures<br>
- Trapdoor One-Way functions<br>
- Random oracles<br>
- Cyclic groups<br>
- The discrete logarithm/Diffie-Hellman assumptions<br>
- Key exchange and the Diffie-Hellman protocol<br>
- Public Key Encryption<br>
- Security against chosen-plaintext attacks<br>
- ElGamal Encryption<br>
- Zero-Knowledge proofs<br>
- The Schnorr identification scheme
    
    
",
Edinburgh_UK,cxinfr11099,"<h2>title</h2>Postgraduate Course: Introduction to Quantum Computing (INFR11099)<h2>summary</h2>The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well-known quantum algorithms and compare their performance with respect to classical computing. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures and secure delegated QC.<h2>content</h2>
    
    - Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics, <br>
- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements <br>
- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. <br>
- The first quantum protocols: Quantum teleportation and super dense coding <br>
- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform or Phase-Estimation <br>
- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. <br>
- Quantum Computing via measurement-based model: Description of graph state and measurement calculus <br>
- Advanced Topics: quantum error correction, algorithm for near-term architectures, unconditionally secure quantum cloud computing
    
    
",Postgraduate Course: Introduction to Quantum Computing (INFR11099),"The aim of this course is to give students a basic overview of the rapidly growing field of Quantum Computation (QC). The course will start with a brief introduction of the mathematical framework of QC. The two models of quantum circuit and measurement-based quantum computing will be introduced. We cover the most important quantum subroutines and their application to well-known quantum algorithms and compare their performance with respect to classical computing. We finish the course by surveying few more advanced topics, such as quantum error correction, algorithms for near-term architectures and secure delegated QC.","
    
    - Basic concepts from Linear Algebra necessary for understanding the axioms of Quantum Mechanics, <br>
- Axioms of Quantum Mechanics, describing quantum system, quantum operators, composition, entanglement and measurements <br>
- Quantum Computing via quantum circuit model: Description of qubit and universal set of gates. <br>
- The first quantum protocols: Quantum teleportation and super dense coding <br>
- Quantum subroutines such as Phase Kick-back, Quantum Fourier Transform or Phase-Estimation <br>
- Quantum Algorithms such as Grover's Search, Deutsch-Jozsa, Bernstein-Vazirani or Shor. <br>
- Quantum Computing via measurement-based model: Description of graph state and measurement calculus <br>
- Advanced Topics: quantum error correction, algorithm for near-term architectures, unconditionally secure quantum cloud computing
    
    
",
Edinburgh_UK,cxinfr11215,"<h2>title</h2>Undergraduate Course: Knowledge Graphs (INFR11215)<h2>summary</h2>Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them.<h2>content</h2>
    
    In this course, we will cover topics such as:<br>
Knowledge graph foundation and standards<br>
 - RDF (Resource Description Framework)<br>
 - OWL (Web Ontology Language)<br>
 - SPARQL (Query Language for RDF and OWL)<br>
Knowledge graph construction, embeddings, and completion<br>
Knowledge graph reasoning and querying<br>
 - Tableaux algorithm<br>
 - Tractable schema reasoning in EL<br>
 - Tractable query answering in DL-Lite<br>
 - Semantic parsing <br>
<br>
The students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories.
    
    
",Undergraduate Course: Knowledge Graphs (INFR11215),"Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them.","
    
    In this course, we will cover topics such as:<br>
Knowledge graph foundation and standards<br>
 - RDF (Resource Description Framework)<br>
 - OWL (Web Ontology Language)<br>
 - SPARQL (Query Language for RDF and OWL)<br>
Knowledge graph construction, embeddings, and completion<br>
Knowledge graph reasoning and querying<br>
 - Tableaux algorithm<br>
 - Tractable schema reasoning in EL<br>
 - Tractable query answering in DL-Lite<br>
 - Semantic parsing <br>
<br>
The students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories.
    
    
",
Edinburgh_UK,cxinfr11132,"<h2>title</h2>Undergraduate Course: Machine Learning Practical (INFR11132)<h2>summary</h2>This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
Semester 1 comprises lectures, labs, and individual coursework.<br>
<br>
Semester 2 is based around small group projects, and also includes tutorials and guest lectures.<br>
<br>
Note: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.<h2>content</h2>
    
    The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:<br>
<br>
* Feed-forward network architectures<br>
* Optimisation and learning rules <br>
* Regularisation and normalisation<br>
* Neural networks for classification<br>
* Autoencoders<br>
* Convolutional Neural Networks<br>
* Recurrent Neural Networks<br>
<br>
MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
MLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.<br>
<br>
Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area.
    
    
",Undergraduate Course: Machine Learning Practical (INFR11132),"This course is focused on the implementation and evaluation of machine learning systems, and is lab-based. Students who do this course will obtain experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
Semester 1 comprises lectures, labs, and individual coursework.<br>
<br>
Semester 2 is based around small group projects, and also includes tutorials and guest lectures.<br>
<br>
Note: this course is not a stand-alone introduction to machine learning. Please see 'Other Requirements' for details.","
    
    The course covers practical aspects of machine learning, and will focus on practical and experimental issues in deep learning and neural networks. Topics that are covered include:<br>
<br>
* Feed-forward network architectures<br>
* Optimisation and learning rules <br>
* Regularisation and normalisation<br>
* Neural networks for classification<br>
* Autoencoders<br>
* Convolutional Neural Networks<br>
* Recurrent Neural Networks<br>
<br>
MLP is coursework-based, with lectures to support the additional material required to carry out the practical. Students who complete this course will have experience in the design, implementation, training, and evaluation of machine learning systems.<br>
<br>
MLP is a two-semester course.  During Semester 1 the course will focus on developing a deep learning framework based on experiments using the task of classification of handwritten digits using the well-known MNIST dataset. The course uses a Python software framework, and a series of Jupyter notebooks. There is a series of ten weekly lectures in Semester 1 to provide the required theoretical support to the practical work.<br>
<br>
Semester 2 will be based on small group projects, with a focus on using deep neural networks within the context of a miniproject, using an open source toolkit such as TensorFlow or PyTorch. Lectures in Semester 2 will support the coursework, and also provide insights to the current state of the art in this very fast moving area.
    
    
",
Edinburgh_UK,cxinfr11202,"<h2>title</h2>Undergraduate Course: Machine Learning Theory (INFR11202)<h2>summary</h2>This course is an introduction to the theory of learning algorithms and their properties that are relevant to the widespread use of machine learning. The course starts with the standard mathematical concepts in theoretical ML. It then covers classical analytic results about accuracy, confidence, sample complexity and model complexity. Standard learning/optimisation algorithms are described in this context. In modern research areas such as trustworthy machine learning, several properties including privacy, fairness and interpretablity are considered vital for widespread reliable use of machine learning. These topics are discussed in a mathematical perspective.<br>
<br>
The course aims to provide a firm foundation in reading and understanding mathematical ideas so that students are equipped to follow the latest developments and research, and to interpret relevant properties and tradeoffs. Throughout, the course will take the approach of precise mathematical definition and analysis, coupled with easy examples and intuition to aid understanding.<h2>content</h2>
    
    The following is an indicative list of topics in the course:<br>
<br>
	1. Notations, terminology and formal models.<br>
	2. Learning theory: Empirical risk minimisation and sampling complexity. Probably approximately correct (PAC) guarantees.<br>
	3. Complexity of learning models (e.g. VC dimension) and bias-complexity tradeoff.<br>
	4. Optimization algorithms. Regression, SVM, Stochastic gradient descent and its variants.<br>
	5. Regularization, convexity, stability, Lipschitzness and other properties<br>
	6. Statistical Privacy<br>
	7. Mechanisms for privacy preserving machine learning. Differentially private stochastic gradient descent.<br>
	8. Interpretable machine learning. (E.g. Feature importance)<br>
	9. Fairness.<br>
<br>
The topics will be discussed with reference to standard machine learning techniques, and examples of realistic problems. Our approach will include precise definitions and analysis as well as examples and intuitive explanations. The relevance and domain of applicability of the various concepts will be discussed.<br>
<br>
Tutorials and problem sets will be available to help understanding and exploration of the subject.
    
    
",Undergraduate Course: Machine Learning Theory (INFR11202),"This course is an introduction to the theory of learning algorithms and their properties that are relevant to the widespread use of machine learning. The course starts with the standard mathematical concepts in theoretical ML. It then covers classical analytic results about accuracy, confidence, sample complexity and model complexity. Standard learning/optimisation algorithms are described in this context. In modern research areas such as trustworthy machine learning, several properties including privacy, fairness and interpretablity are considered vital for widespread reliable use of machine learning. These topics are discussed in a mathematical perspective.<br>
<br>
The course aims to provide a firm foundation in reading and understanding mathematical ideas so that students are equipped to follow the latest developments and research, and to interpret relevant properties and tradeoffs. Throughout, the course will take the approach of precise mathematical definition and analysis, coupled with easy examples and intuition to aid understanding.","
    
    The following is an indicative list of topics in the course:<br>
<br>
	1. Notations, terminology and formal models.<br>
	2. Learning theory: Empirical risk minimisation and sampling complexity. Probably approximately correct (PAC) guarantees.<br>
	3. Complexity of learning models (e.g. VC dimension) and bias-complexity tradeoff.<br>
	4. Optimization algorithms. Regression, SVM, Stochastic gradient descent and its variants.<br>
	5. Regularization, convexity, stability, Lipschitzness and other properties<br>
	6. Statistical Privacy<br>
	7. Mechanisms for privacy preserving machine learning. Differentially private stochastic gradient descent.<br>
	8. Interpretable machine learning. (E.g. Feature importance)<br>
	9. Fairness.<br>
<br>
The topics will be discussed with reference to standard machine learning techniques, and examples of realistic problems. Our approach will include precise definitions and analysis as well as examples and intuitive explanations. The relevance and domain of applicability of the various concepts will be discussed.<br>
<br>
Tutorials and problem sets will be available to help understanding and exploration of the subject.
    
    
",
Edinburgh_UK,cxinfr11130,"<h2>title</h2>Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)<h2>summary</h2>Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130),"Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",
Edinburgh_UK,cxinfr11248,<h2>title</h2><h2>summary</h2><h2>content</h2>,,,,
Edinburgh_UK,cxinfr11088,"<h2>title</h2>Postgraduate Course: Extreme Computing (INFR11088)<h2>summary</h2>Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).<h2>content</h2>
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",Postgraduate Course: Extreme Computing (INFR11088),"Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).","
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",
Edinburgh_UK,cxinfr11161,"<h2>title</h2>Undergraduate Course: Natural Computing (INFR11161)<h2>summary</h2>This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.<h2>content</h2>
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",Undergraduate Course: Natural Computing (INFR11161),"This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.","
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",
Edinburgh_UK,cxinfr11157,"<h2>title</h2>Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (INFR11157)<h2>summary</h2>This course explores current research on processing natural language: interpreting, generating, and translating. The course will focus mainly on deep learning approaches to various NLP tasks and applications. It will provide an introduction to the main neural network architectures used in NLP and how they are used for tasks such as syntactic and semantic parsing, as well as end-user applications such as machine translation and text summarisation.<br>
<br>
Building on linguistic and algorithmic knowledge taught in prerequisite courses, this course also aims to further develop students' understanding of the strengths and weaknesses of current approaches with respect to linguistic and computational considerations. Practical assignments will provide the opportunity to implement and analyse some of the approaches considered.<h2>content</h2>
    
    The course aims to familiarise students with recent research across a range of topics within NLP, mainly within the framework of neural network models, and with a focus on applications such as machine translation, summarisation, and semantic parsing. As an MSc-level course that assumes previous experience with NLP, it will discuss a range of different issues, including linguistic/representational capacity, computational efficiency, optimisation, etc. There is no textbook for the course; readings will come from recent research literature.
    
    
","Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (INFR11157)","This course explores current research on processing natural language: interpreting, generating, and translating. The course will focus mainly on deep learning approaches to various NLP tasks and applications. It will provide an introduction to the main neural network architectures used in NLP and how they are used for tasks such as syntactic and semantic parsing, as well as end-user applications such as machine translation and text summarisation.<br>
<br>
Building on linguistic and algorithmic knowledge taught in prerequisite courses, this course also aims to further develop students' understanding of the strengths and weaknesses of current approaches with respect to linguistic and computational considerations. Practical assignments will provide the opportunity to implement and analyse some of the approaches considered.","
    
    The course aims to familiarise students with recent research across a range of topics within NLP, mainly within the framework of neural network models, and with a focus on applications such as machine translation, summarisation, and semantic parsing. As an MSc-level course that assumes previous experience with NLP, it will discuss a range of different issues, including linguistic/representational capacity, computational efficiency, optimisation, etc. There is no textbook for the course; readings will come from recent research literature.
    
    
",
Edinburgh_UK,cxinfr11023,"<h2>title</h2>Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023)<h2>summary</h2>The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.<h2>content</h2>
    
    * Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.<br>
* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.<br>
* Realisation in Pthreads and Java.<br>
* Issues in message passing programming. Channels and synchronization models.<br>
* Realisation in MPI: communicators, simple and collective operations<br>
* Selected case studies highlighting alternative approaches, for example,<br>
o Associative models. Linda, tuple space and related primitives.<br>
o Threading Building Blocks.<br>
<br>
Relevant QAA Computing Curriculum Sections:  Concurrency and Parallelism
    
    
",Postgraduate Course: Parallel Programming Languages and Systems (Level 11) (INFR11023),"The module familiarises students with the issues involved in designing, implementing and applying parallel programming systems. Initial motivation will be provided by consideration of a number of typical high performance applications and parallel architectures. This will highlight the role of parallel software systems as a means of bridging the gap between these and allow abstraction of the issues which must be addressed by any such system (partitioning, communication, agglomeration, scheduling). It will explore the ways in which these challenges have been addressed by a range of systems, including both de facto standards and more adventurous research projects.","
    
    * Introduction. Conceptual and architectural models of parallelism. Parallel algorithmic paradigms and simple parallel algorithms.Iterative, recursive pipeline and bag-of-task parallelism.<br>
* Generic issues in shared variable programming. Mutual exclusion, condition synchronization. Locks, barriers semaphores and monitors, use and implementation.<br>
* Realisation in Pthreads and Java.<br>
* Issues in message passing programming. Channels and synchronization models.<br>
* Realisation in MPI: communicators, simple and collective operations<br>
* Selected case studies highlighting alternative approaches, for example,<br>
o Associative models. Linda, tuple space and related primitives.<br>
o Threading Building Blocks.<br>
<br>
Relevant QAA Computing Curriculum Sections:  Concurrency and Parallelism
    
    
",
Edinburgh_UK,cxinfr11150,"<h2>title</h2>Undergraduate Course: Principles and Design of IoT Systems (INFR11150)<h2>summary</h2>The course is concerned with the emerging discipline of digitising the physical world with networks of wireless sensors, analysing the sensor data using machine learning techniques to extract actionable information, and influencing the physical world via actuators, with an optional human in the loop. <br>
<br>
The course imparts foundational concepts in IoT through personal research distilled in the form of two survey papers on foundational topics in IoT, and students working in pairs gain hands-on experience by realising a healthcare application idea as a demonstratable IoT system using wearable sensors by  the send of the semester.<h2>content</h2>
    
    The course aims to deliver a sound understanding of the design and analysis of Internet of Things systems through personal research and practice. The research in a choice of selected foundational topics in IoT provides the foundational knowledge distilled in the form of two 3000-word survey papers.   <br>
<br>
The students conduct a major piece of coursework working in pairs to develop an IoT application using wearable sensors. Students will experience all the stages in the design and implementation of a complex system, from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning methods, user interface design, system integration and testing. Each pair will demonstrate a working prototype at the end of Semester 1 and deliver a written report at the start of Semester 2. <br>
<br>
Each student pair is given a set of Mbed development board (NRF52-DK), Inertial Measurement Unit (MPU-9250) with 3-axis accelerometer and gyroscope sensors, and an on-line software development environment - the ARM Mbed compiler. The task will be to design, implement and demonstrate a Step Tracker for walking on level ground, running and climbing stairs using the wearable sensor which interfaces to an Android App.
    
    
",Undergraduate Course: Principles and Design of IoT Systems (INFR11150),"The course is concerned with the emerging discipline of digitising the physical world with networks of wireless sensors, analysing the sensor data using machine learning techniques to extract actionable information, and influencing the physical world via actuators, with an optional human in the loop. <br>
<br>
The course imparts foundational concepts in IoT through personal research distilled in the form of two survey papers on foundational topics in IoT, and students working in pairs gain hands-on experience by realising a healthcare application idea as a demonstratable IoT system using wearable sensors by  the send of the semester.","
    
    The course aims to deliver a sound understanding of the design and analysis of Internet of Things systems through personal research and practice. The research in a choice of selected foundational topics in IoT provides the foundational knowledge distilled in the form of two 3000-word survey papers.   <br>
<br>
The students conduct a major piece of coursework working in pairs to develop an IoT application using wearable sensors. Students will experience all the stages in the design and implementation of a complex system, from its specification to the demonstration of a working prototype. They will be exposed to aspects of embedded systems programming, sensor data analytics using machine learning methods, user interface design, system integration and testing. Each pair will demonstrate a working prototype at the end of Semester 1 and deliver a written report at the start of Semester 2. <br>
<br>
Each student pair is given a set of Mbed development board (NRF52-DK), Inertial Measurement Unit (MPU-9250) with 3-axis accelerometer and gyroscope sensors, and an on-line software development environment - the ARM Mbed compiler. The task will be to design, implement and demonstrate a Step Tracker for walking on level ground, running and climbing stairs using the wearable sensor which interfaces to an Android App.
    
    
",
Edinburgh_UK,cxinfr11240,"<h2>title</h2>Undergraduate Course: Privacy and Security with Machine Learning (INFR11240)<h2>summary</h2>The increasing popularity of machine learning (ML) and its new applications has raised security and privacy concerns. ML techniques provide adversaries with new capabilities to undermine the security and privacy of ICT systems. Moreover, there is a growing recognition of the security and privacy issues of ML algorithms. These issues can have tremendous consequences in a society that increasingly relies on ML, so they call for more robust methods that allow harnessing the benefits of ML in adversarial settings.<br>
<br>
This is an introductory course on the topic. The course will provide an overview of adversarial applications of ML techniques, including those that undermine the privacy and security of ML-based systems. The course will also cover existing countermeasures and mitigation strategies.<h2>content</h2>
    
    The course is divided into two blocks:<br>
<br>
1.	Emerging applications of ML techniques in the security and privacy domain<br>
<br>
2.	Threats to the privacy and security of ML models and risk mitigation strategies<br>
<br>
In Block 1, we will cover novel applications of ML techniques to a range of problems in the security domain: traffic analysis, (de)anonymization of documents, hardware side channels, etc. The focus will be on how ML has augmented the attacker's capabilities.<br>
<br>
In Block 2, we will turn to threats to the security and privacy of ML algorithms. We will review some of the following attacks: membership inference attacks, poisoning attacks, adversarial examples, etc. We will also discuss countermeasures that have been proposed to mitigate these attacks. <br>
<br>
The lectures will combine presentations of specific research papers and the background in ML and Cyber Security required to follow the papers.<br>
<br>
Most of the lectures will have a traditional format, where the lecturer will guide the discussion. The students will prepare for the lectures by reading the papers and reviewing the theory.
    
    
",Undergraduate Course: Privacy and Security with Machine Learning (INFR11240),"The increasing popularity of machine learning (ML) and its new applications has raised security and privacy concerns. ML techniques provide adversaries with new capabilities to undermine the security and privacy of ICT systems. Moreover, there is a growing recognition of the security and privacy issues of ML algorithms. These issues can have tremendous consequences in a society that increasingly relies on ML, so they call for more robust methods that allow harnessing the benefits of ML in adversarial settings.<br>
<br>
This is an introductory course on the topic. The course will provide an overview of adversarial applications of ML techniques, including those that undermine the privacy and security of ML-based systems. The course will also cover existing countermeasures and mitigation strategies.","
    
    The course is divided into two blocks:<br>
<br>
1.	Emerging applications of ML techniques in the security and privacy domain<br>
<br>
2.	Threats to the privacy and security of ML models and risk mitigation strategies<br>
<br>
In Block 1, we will cover novel applications of ML techniques to a range of problems in the security domain: traffic analysis, (de)anonymization of documents, hardware side channels, etc. The focus will be on how ML has augmented the attacker's capabilities.<br>
<br>
In Block 2, we will turn to threats to the security and privacy of ML algorithms. We will review some of the following attacks: membership inference attacks, poisoning attacks, adversarial examples, etc. We will also discuss countermeasures that have been proposed to mitigate these attacks. <br>
<br>
The lectures will combine presentations of specific research papers and the background in ML and Cyber Security required to follow the papers.<br>
<br>
Most of the lectures will have a traditional format, where the lecturer will guide the discussion. The students will prepare for the lectures by reading the papers and reviewing the theory.
    
    
",
Edinburgh_UK,cxinfr11134,"<h2>title</h2>Postgraduate Course: Probabilistic Modelling and Reasoning (INFR11134)<h2>summary</h2>When dealing with real world data, we often need to deal with uncertainty. For example, short segments of speech may be ambiguous, and we need to take into account context in order to make sense of an utterance. Probability theory provides a rigorous method for representing and reasoning with uncertain knowledge. The course covers two main areas (i) the process of inference with probabilistic models and (ii) learning probabilistic models from data. <br>
<br>
Its aim is to provide a firm grounding in probabilistic modelling and reasoning, and to give a basis which will allow students to go on to develop their interests in more specific areas, such as statistical language modelling, bioinformatics, computational neuroscience, or computer vision, to name a few examples.<h2>content</h2>
    
    The course will cover the most important topics in probabilistic modelling and unsupervised learning, and provide a thorough basis for understanding extensions, further developments and applications.<br>
<br>
While the precise topics will vary slightly from year to year, the core content will revolve around:<br>
- probabilistic graphical models<br>
- exact inference<br>
- learning from data<br>
- methods for approximate inference and learning<br>
<br>
The course will be delivered in a series of lectures and exercises. In addition to working through exercises with pencil and paper, the students will be expected to complete some programming exercises to gain experience with implementing and using the material taught in the course.
    
    
",Postgraduate Course: Probabilistic Modelling and Reasoning (INFR11134),"When dealing with real world data, we often need to deal with uncertainty. For example, short segments of speech may be ambiguous, and we need to take into account context in order to make sense of an utterance. Probability theory provides a rigorous method for representing and reasoning with uncertain knowledge. The course covers two main areas (i) the process of inference with probabilistic models and (ii) learning probabilistic models from data. <br>
<br>
Its aim is to provide a firm grounding in probabilistic modelling and reasoning, and to give a basis which will allow students to go on to develop their interests in more specific areas, such as statistical language modelling, bioinformatics, computational neuroscience, or computer vision, to name a few examples.","
    
    The course will cover the most important topics in probabilistic modelling and unsupervised learning, and provide a thorough basis for understanding extensions, further developments and applications.<br>
<br>
While the precise topics will vary slightly from year to year, the core content will revolve around:<br>
- probabilistic graphical models<br>
- exact inference<br>
- learning from data<br>
- methods for approximate inference and learning<br>
<br>
The course will be delivered in a series of lectures and exercises. In addition to working through exercises with pencil and paper, the students will be expected to complete some programming exercises to gain experience with implementing and using the material taught in the course.
    
    
",
Edinburgh_UK,cxinfr11187,"<h2>title</h2>Undergraduate Course: Quantum Cyber Security (INFR11187)<h2>summary</h2>In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.<h2>content</h2>
    
    This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.<br>
<br>
The students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.<br>
<br>
The second part consists of learning and understanding quantum cryptography and specifically ""quantum-key-distribution"" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).<br>
<br>
The third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).<br>
<br>
Finally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3).
    
    
",Undergraduate Course: Quantum Cyber Security (INFR11187),"In this course we cover a broad range of effects that the development of quantum technologies bring on the security and privacy of communication and computation. In particular we consider (i) post-quantum security: security of classical protocols when the adversaries have access to quantum computers or other quantum technologies and (ii) quantumly-enhanced security: when quantum technologies are used by honest parties to achieve better (in terms of security or efficiency) performance. We give an overview of the field, while in each case we focus on selected examples to illustrate how to handle security in a world with quantum technologies.","
    
    This course deals with the various effects that developing quantum technologies will have on cyber security. Quantum computing and quantum information theory offers new possibilities (in terms of efficiency and security). Here we examine both the extra attacks that adversaries equipped with quantum technologies can perform and the extra possibilities opened when honest parties use quantum technologies.<br>
<br>
The students first will be introduced to quantum information concepts (qubits, mixed states, operations, distance measures) as well as quantum algorithms (factoring, discrete logarithms, search) and their limitations. This will lead to LO1, namely learn the mathematical machinery and the power (and limitations) of quantum information and computation, in view of using these for cyber security.<br>
<br>
The second part consists of learning and understanding quantum cryptography and specifically ""quantum-key-distribution"" protocols, including their security proofs and the how different implementations affect the performance (see LO4). The limitations (practical and theoretical) of quantum cryptography will also be analysed here (including impossibility results).<br>
<br>
The third part deals with generalising classical notions such as encryption, authentication and secure delegated computation to quantum information. Introducing students in these concepts prepares them for the next generation of quantum cyber security that is bound to become relevant when large(r) quantum computers are constructed (LO5).<br>
<br>
Finally, the last part of the course focuses on classical protocols and their security under quantum attacks. A cryptosystem based on the learning-with-errors problems will be introduced as a (key) example of this possibility (LO2). Furthermore, general quantum attacks (superposition attacks, the quantum random oracle model, etc) will be introduced and students will learn to analyse general quantum attacks on a given classical protocol (LO3).
    
    
",
Edinburgh_UK,cxinfr11201,"<h2>title</h2>Undergraduate Course: Randomized Algorithms (INFR11201)<h2>summary</h2>This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.<h2>content</h2>
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",Undergraduate Course: Randomized Algorithms (INFR11201),This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.,"
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",
Edinburgh_UK,cxinfr11098,"<h2>title</h2>Postgraduate Course: Secure Programming (INFR11098)<h2>summary</h2>This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).<h2>content</h2>
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",Postgraduate Course: Secure Programming (INFR11098),"This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).","
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",
Edinburgh_UK,cxinfr11208,"<h2>title</h2>Undergraduate Course: Security Engineering (INFR11208)<h2>summary</h2>This course aims to give students a thorough understanding of how to engineer security in modern systems. We discuss threat actors from nation states through cybercrime gangs to abuse by family members. We dive into detailed case studies of applications such as payment networks and vehicle systems. We analyse the protection mechanisms of platforms they rely on, such as smartcards, mobile phones and cloud systems. We work through multiple perspectives: classical systems engineering, the psychology of users good and bad, and the incentives facing different actors in the system. This enables students to take a holistic view of security as an emergent property of complex systems, and of related properties such as safety, and to understand how to manage them as systems and their environments evolve.<h2>content</h2>
    
    As ever more devices participate in online systems that become ever more complex, it is ever more important,and more difficult, to manage emergent properties such as security, safety and sustainability. Security engineering is not just about individual mechanisms such as cryptography and access controls but how they work together at scale in real systems. This course will illustrate how to analyse threats and hazards systematically, evolve security policies, integrate them with safety policies and accounting standards as need be, test and certify the resulting systems, and manage their evolution as vulnerabilities are discovered or as their requirements change over time.<br>
<br>
Over the course of 15 lectures we will study how real systems are attacked by a variety of opponents and how their defences evolve to cope. We will look in detail at important applications such as payments, home automation and vehicles. We will look at the psychology of secure design: how we can minimise the risk of attacks involving deception. We will analyse the economics of security: when service providers have adequate incentives to prevent fraud, and where market failure or poor regulation get in the way. <br>
<br>
We will take a deep dive into the protection mechanisms of the underlying platforms, from smartcards through mobile phones to containers, and at whole ecosystems such as phone apps, cloud services and network security. By the end of the course, students should be able to analyse a security problem across the entire systems stack, from the threats and protection goals down through the application and the platforms and if need be to the hardware. They should also appreciate how security interacts with related emergent properties such as safety and sustainability.
    
    
",Undergraduate Course: Security Engineering (INFR11208),"This course aims to give students a thorough understanding of how to engineer security in modern systems. We discuss threat actors from nation states through cybercrime gangs to abuse by family members. We dive into detailed case studies of applications such as payment networks and vehicle systems. We analyse the protection mechanisms of platforms they rely on, such as smartcards, mobile phones and cloud systems. We work through multiple perspectives: classical systems engineering, the psychology of users good and bad, and the incentives facing different actors in the system. This enables students to take a holistic view of security as an emergent property of complex systems, and of related properties such as safety, and to understand how to manage them as systems and their environments evolve.","
    
    As ever more devices participate in online systems that become ever more complex, it is ever more important,and more difficult, to manage emergent properties such as security, safety and sustainability. Security engineering is not just about individual mechanisms such as cryptography and access controls but how they work together at scale in real systems. This course will illustrate how to analyse threats and hazards systematically, evolve security policies, integrate them with safety policies and accounting standards as need be, test and certify the resulting systems, and manage their evolution as vulnerabilities are discovered or as their requirements change over time.<br>
<br>
Over the course of 15 lectures we will study how real systems are attacked by a variety of opponents and how their defences evolve to cope. We will look in detail at important applications such as payments, home automation and vehicles. We will look at the psychology of secure design: how we can minimise the risk of attacks involving deception. We will analyse the economics of security: when service providers have adequate incentives to prevent fraud, and where market failure or poor regulation get in the way. <br>
<br>
We will take a deep dive into the protection mechanisms of the underlying platforms, from smartcards through mobile phones to containers, and at whole ecosystems such as phone apps, cloud services and network security. By the end of the course, students should be able to analyse a security problem across the entire systems stack, from the threats and protection goals down through the application and the platforms and if need be to the hardware. They should also appreciate how security interacts with related emergent properties such as safety and sustainability.
    
    
",
Edinburgh_UK,cxinfr11124,"<h2>title</h2>Undergraduate Course: Social and Technological Networks (INFR11124)<h2>summary</h2>In this course, we will study core properties of networks arising in various social, scientific and technological contexts. We will see techniques for their analysis, and applications in social networks, World Wide Web, Internet, IoT etc. The course will cover fundamental theories and techniques from machine learning, algorithms and mathematics. We will see the relevance of these techniques in real networks, as well as use of network-based techniques in more general data analysis. The course will involve theoretical analysis in class, development of algorithms, and writing of programs to analyse network data.<h2>content</h2>
    
    The course will study computational, mathematical and data analysis aspects of networks. Typical topics will include properties of social networks, epidemics, spread of innovation, random graphs, metric properties, preferential attachments and power law networks. It will cover relation to data analysis and machine learning: including clustering and community detection, submodularity, optimization, embedding (dimension reduction) and classification. Other current topics will be covered as appropriate.
    
    
",Undergraduate Course: Social and Technological Networks (INFR11124),"In this course, we will study core properties of networks arising in various social, scientific and technological contexts. We will see techniques for their analysis, and applications in social networks, World Wide Web, Internet, IoT etc. The course will cover fundamental theories and techniques from machine learning, algorithms and mathematics. We will see the relevance of these techniques in real networks, as well as use of network-based techniques in more general data analysis. The course will involve theoretical analysis in class, development of algorithms, and writing of programs to analyse network data.","
    
    The course will study computational, mathematical and data analysis aspects of networks. Typical topics will include properties of social networks, epidemics, spread of innovation, random graphs, metric properties, preferential attachments and power law networks. It will cover relation to data analysis and machine learning: including clustering and community detection, submodularity, optimization, embedding (dimension reduction) and classification. Other current topics will be covered as appropriate.
    
    
",
Edinburgh_UK,cxinfr11145,"<h2>title</h2>Undergraduate Course: Text Technologies for Data Science (INFR11145)<h2>summary</h2>This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. <br>
<br>
This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.<h2>content</h2>
    
    Syllabus:<br>
* Introduction to IR and text processing, system components<br>
* Zipf, Heaps, and other text laws <br>
* Pre-processing: tokenization, normalisation, stemming, stopping.<br>
* Indexing: inverted index, boolean and proximity search<br>
* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).<br>
* Query expansion<br>
* IR toolkits and applications<br>
* Ranked retrieval and learning to rank<br>
* Text classification: feature extraction, baselines, evaluation<br>
* Web search
    
    
",Undergraduate Course: Text Technologies for Data Science (INFR11145),"This course teaches the basic technologies required for text processing, focussing mainly on information retrieval and text classification. It gives a detailed overview of information retrieval and describes how search engines work. It also covers basic knowledge of the main steps for text classification. <br>
<br>
This course is a highly practical course, where at least 50% of what is taught in the course will be implemented from scratch in course works and labs, and students are required to complete a final project in small groups. All lectures, labs, and two course works will take place in Semester 1. The final group project will be due early Semester 2 by week 3 or 4.","
    
    Syllabus:<br>
* Introduction to IR and text processing, system components<br>
* Zipf, Heaps, and other text laws <br>
* Pre-processing: tokenization, normalisation, stemming, stopping.<br>
* Indexing: inverted index, boolean and proximity search<br>
* Evaluation methods and measures (e.g., precision, recall, MAP, significance testing).<br>
* Query expansion<br>
* IR toolkits and applications<br>
* Ranked retrieval and learning to rank<br>
* Text classification: feature extraction, baselines, evaluation<br>
* Web search
    
    
",
Edinburgh_UK,cxinfr11114,"<h2>title</h2>Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)<h2>summary</h2>Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.<h2>content</h2>
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",Undergraduate Course: Types and Semantics for Programming Languages (INFR11114),"Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.","
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",
Edinburgh_UK,cxinfr11158,"<h2>title</h2>Undergraduate Course: Usable Security and Privacy (INFR11158)<h2>summary</h2>Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.<h2>content</h2>
    
    Introduction: History and overview of the Usable Security and Privacy research area.<br>
Study design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyze usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.<br>
Privacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.<br>
Security: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.<br>
Ethics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable.
    
    
",Undergraduate Course: Usable Security and Privacy (INFR11158),"Humans are a vital component of secure and private systems, they are also one of the most expensive components and the most challenging to reason about. In this course, students will learn about how to create systems that are usable while still fulfilling their primary security or privacy mission. Students will also learn about research topics such as designing user studies to critically evaluate interfaces and reading academic papers to create an academically-informed view of the topic.","
    
    Introduction: History and overview of the Usable Security and Privacy research area.<br>
Study design: Security and privacy activities tend to be secondary tasks. Students will learn how to design and analyze usability studies that are common in security and privacy such as targeting secondary tasks or ethically using some deception.<br>
Privacy: Basic overview of the definitions of privacy as well as some of the legal and social aspects of it. Analysis of common privacy issues and how they are expressed through user interaction with systems.<br>
Security: Overview of common security technologies and how they are impacted by usability. In- depth look at select topics such as password construction and management.<br>
Ethics: Discussion of ethics, particularly around research in topics in security and privacy where participants can be particularly vulnerable.
    
    
",
Edinburgh_UK,cxinfr11083,<h2>title</h2><h2>summary</h2><h2>content</h2>,,,,
