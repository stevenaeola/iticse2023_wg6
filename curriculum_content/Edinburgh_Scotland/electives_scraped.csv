institution,elective,overview,title,summary,content,ilo
Edinburgh_Scotland,cxinfr08020,"<h2>Edinburgh_Scotland cxinfr08020</h2><h2>title</h2>Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020)<h2>summary</h2>This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.<h2>content</h2>
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",Undergraduate Course: Informatics 1 - Cognitive Science (INFR08020),"This course is designed as a first introduction to Cognitive Science. It will provide a selective but representative overview of the subject, suitable for all interested students, including students on the Cognitive Science degrees and external students.<br>
<br>
The aim of the lecturing team is to present a unified view of the field, based on a computational approach to analysing cognition. The material is organized by cognitive function (e.g., language, vision), rather than by subdiscipline (e.g., psychology, neuroscience).<br>
<br>
The course covers language, vision, memory, control and action, and reasoning and generalization. All topics will be presented from a computational point of view, and this perspective will be reinforced by lab sessions in which students implement simple cognitive models.","
    
    The syllabus covers the following topics. <br>
They are listed separately here, but in some cases they will be presented in an interleaved fashion: <br>
 <br>
1. Language <br>
- cognitive instinct or cognitive technology?<br>
- linguistic representations: productivity and reuse<br>
- Connectionist and Bayesian models of language <br>
- language acquisition: speech segmentation and word learning<br>
- categorization and models of word meaning <br>
<br>
 2. Reasoning and generalization <br>
- inductive reasoning <br>
- fallacies and (ir)rationality <br>
- models of abstraction and generalisation <br>
- theory formation and the origins of knowledge <br>
<br>
3. Fundamentals of cognitive neuroscience <br>
- basic brain anatomy and function <br>
- experimental techniques to record brain activity <br>
- simple models of neurons <br>
<br>
4. Vision <br>
- the anatomy of vision, neural correlates of visual perception <br>
- comparison of biological and artificial visual systems <br>
 <br>
5. Memory and Attention <br>
- types of memory, memory impairments <br>
- computational models of memory <br>
 <br>
6. Actions and behaviour <br>
- reinforcement learning <br>
 <br>
Note that this course is intended to give a high-level introduction to the topics listed; subsequent courses (e.g., Computational Cognitive Science) will then provide a more detailed coverage.
    
    
",
Edinburgh_Scotland,cxinfr08010,"<h2>Edinburgh_Scotland cxinfr08010</h2><h2>title</h2>Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)<h2>summary</h2>This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.<h2>content</h2>
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010),"This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.","
    
    1.  Intelligent Agents: Introduction<br>
* Nature of agents, performance measures and environments<br>
* Wumpus World Problem : An example thread (Programming environment) setup <br>
<br>
2. Search based Planning<br>
* Planning as a Search Problem: In deterministic, observable, static and known environments<br>
* Smart Searching 1: Using constraints<br>
* Smart Searching 2: Exploiting subproblems/Memoisation<br>
* Informed Search and Exploration for agents <br>
<br>
3. Logical Representation and Planning<br>
* Propositional Logic Revisited (Shortcomings)<br>
* First Order Logic &amp; Encoding facts/rules in FOL<br>
* Inference Rules for Propositional &amp; FOL Calculus<br>
* Unification and Generalized Modus Ponens<br>
* Resolution based Inference and directing search with it<br>
* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>
* Situation Calculus: Representing time in plans <br>
<br>
4. Scaling Planning for Complex Tasks<br>
* Representing States, Goals and Actions in STRIPS<br>
* Partial Order Planning<br>
* Planning and Acting in the Real World <br>
<br>
5. Acting in Uncertain (real world) Environments<br>
* Representation with Bayes Net<br>
* Probabilistic Reasoning in Bayes Net<br>
* Planning under Uncertainity : Wumpus world revisited<br>
* Probabilistic Reasoning over Time I: hidden markov models<br>
* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>
* Markov Decision Processes <br>
<br>
Relevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling
    
    
",
Edinburgh_Scotland,cxinfr08033,"<h2>Edinburgh_Scotland cxinfr08033</h2><h2>title</h2>Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033)<h2>summary</h2><h2>content</h2>Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",Undergraduate Course: Informatics Experiential Learning (Level 8) (INFR08033),,"Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>
<br>
This course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>
<br>
This level 8 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.",
Edinburgh_Scotland,cxinfr10052,"<h2>Edinburgh_Scotland cxinfr10052</h2><h2>title</h2>Undergraduate Course: Algorithms and Data Structures (INFR10052)<h2>summary</h2>The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.<h2>content</h2>
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",Undergraduate Course: Algorithms and Data Structures (INFR10052),"The course aims to provide general techniques for the design of efficient algorithms and, in parallel, develop appropriate mathematical tools for analysing their performance. In this, it broadens and deepens the study of algorithms and data structures initiated in INF2. The focus is on algorithms, more than data structures. Along the way, problem solving skills are exercised and developed.","
    
    Introductory concepts<br>
Review of CS2. Models of computation; time and space complexity; upper and lower bounds, big-O and big-Omega notation; average and worst case analysis.<br>
<br>
Divide and conquer<br>
Matrix multiplication: Strassen's algorithm; the discrete Fourier transform (DFT), the fast Fourier transform (FFT). Expressing the runtime of a recursive algorithm as a recurrence relation; solving recurrence relations.<br>
<br>
Sorting<br>
Quicksort and its analysis; worst-case, best-case and average-case.<br>
<br>
Data structures: Disjoint sets<br>
The ""disjoint sets'' (union-find) abstract data type: specification and implementations as lists and trees. Union-by-rank, path-compression, etc., ""heuristics''. Applications to finding minimum spanning trees.<br>
<br>
Dynamic programming<br>
Introduction to the technique; examples: Matrix-chain multiplication, Longest common subsequences.<br>
<br>
Graph/Network algorithms<br>
Network flow, Max-flow/min-cut theorem, Ford-Fulkerson algorithm.<br>
<br>
Geometric algorithms<br>
Convex hull of a set of points (in 2-d).<br>
<br>
Relevant QAA Computing Curriculum Sections: Data Structures and Algorithms
    
    
",
Edinburgh_Scotland,cxinfr10057,"<h2>Edinburgh_Scotland cxinfr10057</h2><h2>title</h2>Undergraduate Course: Software Testing (INFR10057)<h2>summary</h2>This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.<h2>content</h2>
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",Undergraduate Course: Software Testing (INFR10057),"This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.","
    
    Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>
<br>
The course includes the following topics:<br>
<br>
Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>
Types of defects.<br>
Black-box vs. Structural testing.<br>
Testing strategies: Unit testing, integration testing, profiling, test driven development.<br>
State based testing; configuration testing; compatibility testing; web site testing.<br>
Alpha, beta, and acceptance testing.<br>
Coverage criteria.<br>
Test instrumentation and tools.<br>
Developing test plans.<br>
Managing the testing process: Development Lifecycles<br>
Problem reporting, tracking, and analysis. <br>
Relevant QAA Computing Curriculum Sections: Software Engineering<br>
<br>
Class members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>
 <br>
Class members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>
<br>
Each class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three ""standard"" portfolio<br>
designs but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>
<br>
Each week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.
    
    
",
Edinburgh_Scotland,cxinfr10059,"<h2>Edinburgh_Scotland cxinfr10059</h2><h2>title</h2>Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)<h2>summary</h2>This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
<h2>content</h2>
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059),"This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>
The course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.<br>
<br>
","
    
    The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is ""no"", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS). We then explore some different, but always equivalent, ways of defining ""a computer"". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of ""reduction"" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>
<br>
The second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are ""hardest"" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>
<br>
The third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.<br>

    
    
",
Edinburgh_Scotland,cxinfr10061,"<h2>Edinburgh_Scotland cxinfr10061</h2><h2>title</h2>Undergraduate Course: Elements of Programming Languages (INFR10061)<h2>summary</h2>Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.<h2>content</h2>
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",Undergraduate Course: Elements of Programming Languages (INFR10061),"Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>
<br>
Although few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>
<br>
This course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.","
    
    * Abstract syntax and name-binding; Lexical vs. dynamic scope<br>
* Modelling programming language features using inference rules<br>
* Interpreters as a way of defining and exploring language features<br>
* Domain specific languages, translators, and pragmatics of language processing<br>
* A selection of topics illustrated by case studies from current or historically important language designs:<br>
  - data structures: pairs/record types; variant/union types; recursion<br>
  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>
  - control structures: goto, loops, case/switch, exceptions<br>
  - abstracting control: procedure call/return; function types; continuations<br>
  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>
  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>
* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)<br>

    
    
",
Edinburgh_Scotland,cxinfr10064,"<h2>Edinburgh_Scotland cxinfr10064</h2><h2>title</h2>Undergraduate Course: Software Design and Modelling (INFR10064)<h2>summary</h2>This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.<h2>content</h2>
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",Undergraduate Course: Software Design and Modelling (INFR10064),"This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.","
    
    The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>
<br>
The second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>
 <br>
Finally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.
    
    
",
Edinburgh_Scotland,cxinfr10065,"<h2>Edinburgh_Scotland cxinfr10065</h2><h2>title</h2>Undergraduate Course: Compiling Techniques (INFR10065)<h2>summary</h2>This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.<h2>content</h2>
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",Undergraduate Course: Compiling Techniques (INFR10065),"This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>
<br>
Students will also learn about implementing a compiler pass in a real compiler framework.","
    
    * Introduction: structure of a compiler <br>
* Lexical analysis: tokens, regular expressions, Lex <br>
* Parsing: context-free grammars, predictive and LR parsing <br>
* Abstract syntax: semantic actions, abstract parse trees <br>
* Semantic analysis: symbol tables, bindings, type-checking <br>
* Stack frames: representation and abstraction <br>
* Intermediate code: representation trees, translation <br>
* Basic blocks and traces: canonical trees and conditional branches <br>
* Instruction selection: algorithms for selection, RISC and CISC <br>
* Liveness analysis: solution of dataflow equations <br>
* Register allocation: colouring by simplification, coalescing <br>
* Real assembly language: ARM, MIPS, or RISC-V <br>
* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR
    
    
",
Edinburgh_Scotland,cxinfr10074,"<h2>Edinburgh_Scotland cxinfr10074</h2><h2>title</h2>Undergraduate Course: Computer Communications and Networks (INFR10074)<h2>summary</h2>This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.<h2>content</h2>
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",Undergraduate Course: Computer Communications and Networks (INFR10074),"This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>
<br>
Topics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>
<br>
Students taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.","
    
    * Introduction to Computer Networking and the Internet<br>
* Digital Communication Basics<br>
* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>
* The Transport Layer<br>
* The Network Layer<br>
* The Data Link Layer<br>
* The Medium Access Control Sub-Layer<br>
* The Physical Layer<br>
* Software-defined networking (SDN)<br>
* Network virtualisation and network function virtualisation (NFV)<br>
* Network management<br>
* Introduction to data centre and wireless networks<br>
* Overview and selected aspects of network security
    
    
",
Edinburgh_Scotland,cxinfr10076,"<h2>Edinburgh_Scotland cxinfr10076</h2><h2>title</h2>Undergraduate Course: Computer Architecture and Design (INFR10076)<h2>summary</h2>In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.<h2>content</h2>
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",Undergraduate Course: Computer Architecture and Design (INFR10076),"In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.","
    
    This new course presents a logical re-factoring of a sub-set of the material previously contained in the UG3 Computer Architecture and Computer Design courses. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>
<br>
The philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>
<br>
Outline Contents<br>
<br>
Fundamentals<br>
Review of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>
Register Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>
Quantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>
<br>
Processor Architecture<br>
Instruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>
Pipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>
Out-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>
<br>
Computer Arithmetic and ALU Design<br>
Introduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>
Advanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>
Floating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>
<br>
Memory System Design<br>
Memory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>
Cache coherence in multi-core architectures; protocols and implementation techniques.<br>
Main memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>
Error detection and correction schemes; parity, Hamming codes, SECDED.<br>
<br>
***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***
    
    
",
Edinburgh_Scotland,cxinfr10079,"<h2>Edinburgh_Scotland cxinfr10079</h2><h2>title</h2>Undergraduate Course: Operating Systems (INFR10079)<h2>summary</h2>This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
<h2>content</h2>
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",Undergraduate Course: Operating Systems (INFR10079),"This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.<br>
<br>
This course is a required pre-requisite for the optional fourth-year course Internet of Things: Systems, Security, and the Cloud.<br>
<br>
* Please note this Level 10 course replaces the Level 9 course ""Operating Systems"" (INFR09047).*<br>
<br>
<br>
","
    
    The OS Kernel<br>
*Micro and Monolithic kernels<br>
*Multi-tasking, multi-user<br>
*Interrupt handling, system calls<br>
<br>
Process Management<br>
*The process concept<br>
*The thread concept<br>
*Inter-process communication<br>
<br>
Time Management<br>
*CPU scheduling algorithms<br>
<br>
Resource Management<br>
*Synchronisation, mutual exclusion<br>
*Semaphores, and monitors<br>
*Deadlock prevention, avoidance, and detection<br>
<br>
Memory Management<br>
*The problem of allocation, protection, and sharing<br>
*Physical and virtual memory<br>
*Paged virtual memory<br>
<br>
Storage Management<br>
*Storage technologies<br>
*File Systems<br>
<br>
Virtualization <br>
*Virtual Machines<br>
*Containers<br>
<br>
Relevant QAA Computing Curriculum Sections: Operating Systems<br>

    
    
",
Edinburgh_Scotland,cxinfr10080,"<h2>Edinburgh_Scotland cxinfr10080</h2><h2>title</h2>Undergraduate Course: Introduction to Databases (INFR10080)<h2>summary</h2>Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *<h2>content</h2>
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",Undergraduate Course: Introduction to Databases (INFR10080),"Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>
<br>
* This course replaces ""Database Systems"" (INFR10070) from academic year 2020/21. *","
    
    Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>
<br>
Syllabus (core topics)<br>
- The relational model and rudiments of SQL<br>
- Query languages: relational algebra and calculus<br>
- Multisets, grouping and aggregation<br>
- Database design: constraints and normal forms<br>
- Advanced SQL: nested queries, triggers, null values<br>
- Transaction management: concurrent schedules, conflict-serializability, locking<br>
- Database access from applications: using SQL in a host programming language<br>
- Basics of indexing, query evaluation and optimisation <br>
<br>
Syllabus (advanced topics, if time allows)<br>
- Datalog and recursive queries<br>
- Incomplete data and certain answers<br>

    
    
",
Edinburgh_Scotland,cxinfr10085,"<h2>Edinburgh_Scotland cxinfr10085</h2><h2>title</h2>Undergraduate Course: Introduction to Mobile Robotics (INFR10085)<h2>summary</h2>A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.<h2>content</h2>
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",Undergraduate Course: Introduction to Mobile Robotics (INFR10085),"A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behavior strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. More course information can be found on its corresponding LEARN page here: https://www.learn.ed.ac.uk/ultra/courses/_99697_1/cl/outline<br>
<br>
At the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.","
    
    Delivery Method:<br>
<br>
The course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>
<br>
Content/Syllabus:<br>
The exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>
but will include many of the following topics:<br>
<br>
-	Introduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>
-	Math refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>
-	Robot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>
-	Sensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>
-	Recursive State Estimation: Kalman filters, EKF etc. <br>
-	Localization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>
-	Mapping: environment model, grid map.<br>
-	Robot Operating System: basic principles, use cases, and examples.<br>
-	SLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>
-	Planning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>
-	Self-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>
-	Basic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.
    
    
",
Edinburgh_Scotland,cxinfr10086,"<h2>Edinburgh_Scotland cxinfr10086</h2><h2>title</h2>Undergraduate Course: Machine Learning (INFR10086)<h2>summary</h2>***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",Undergraduate Course: Machine Learning (INFR10086),"***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>
<br>
Since the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output ""teacher signal"".<br>
<br>
The aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
-	 Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>
-	 Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>
-	 Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>
-	 Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>
-	 Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>
-	 Representation learning: Dimensionality reduction, clustering, feature learning <br>
-	 More advanced methods<br>
<br>
To support these topics we will also cover: <br>
-	Optimization and Stochastic gradient descent <br>
-	Practical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.
    
    
",
Edinburgh_Scotland,cxinfr10054,"<h2>Edinburgh_Scotland cxinfr10054</h2><h2>title</h2>Undergraduate Course: Computational Cognitive Science (INFR10054)<h2>summary</h2>This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.<h2>content</h2>
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",Undergraduate Course: Computational Cognitive Science (INFR10054),"This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>
<br>
The course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.","
    
    - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>
<br>
- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>
<br>
- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>
<br>
- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>
<br>
- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>
<br>
- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>
<br>
- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>
<br>
- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.
    
    
",
Edinburgh_Scotland,cxinfr10078,"<h2>Edinburgh_Scotland cxinfr10078</h2><h2>title</h2>Undergraduate Course: Foundations of Natural Language Processing (INFR10078)<h2>summary</h2>***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
<h2>content</h2>
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",Undergraduate Course: Foundations of Natural Language Processing (INFR10078),"***This course replaces Foundations of Natural Language Processing (INFR09028).***<br>
<br>
This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modeling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.<br>
","
    
    An indicative list of topics to be covered include:<br>
<br>
1. Lexicon and lexical processing:<br>
* morphology<br>
* language modeling<br>
* hidden Markov Models and associated algorithms<br>
* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>
* smoothing<br>
* text classification<br>
<br>
2. Syntax and syntactic processing:<br>
* the Chomsky hierarchy<br>
* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>
* context-free grammars <br>
* lexicalized grammar formalisms (e.g., dependency grammar)<br>
* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>
* treebanks: lexicalized grammars and corpus annotation <br>
* statistical parsing<br>
<br>
3. Semantics and semantic processing:<br>
* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>
* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>
* predicate argument structure<br>
* word sense disambiguation<br>
* semantic role labelling<br>
* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>
* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>
<br>
4. Data and evaluation (interspersed throughout other topics):<br>
* cross-linguistic similarities and differences<br>
* commonly used datasets <br>
* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>
* evaluation methods and issues (e.g., standard metrics, baselines)<br>
* effects of biases in data<br>
<br>

    
    
",
Edinburgh_Scotland,cxinfr10087,"<h2>Edinburgh_Scotland cxinfr10087</h2><h2>title</h2>Undergraduate Course: Automated Reasoning (INFR10087)<h2>summary</h2>**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.<h2>content</h2>
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",Undergraduate Course: Automated Reasoning (INFR10087),"**This course replaces the Level 9 Automated Reasoning INFR09042 10 credit course from 2022-23**<br>
<br>
Automated Reasoning covers the theory, implementation and applications of logic-based reasoning via computers. It is one of the oldest subfields of Artificial Intelligence, originating in the mid-1950s when it was first used to reason about propositional logic. Since then, it has been applied to domains ranging from the formalisation of advanced mathematics to the formal verification of software and hardware systems.<br>
<br>
In this course, we take an interactive approach to automated reasoning and explore how the proof assistant Isabelle can work with the user to establish mathematical correctness via a formal but human-friendly proof language. This provides a way of turning logicbased reasoning into a form of programming that can then be used (among other things) to reason about problems in mathematics, e.g. probability theory and multivariate analysis, and industrially-relevant areas e.g. the safety of autonomous systems.","
    
    The course starts with an introduction to higher order logic, theorem provers and, more specifically, Isabelle/HOL. This will set the context for the rest of the course in which Isabelle will be the framework for getting hands-on experience about the application of various theoretical concepts.<br>
<br>
Through the lectures and weekly exercises that incorporate practical aspects the students will gain the skills needed to get started with Isabelle and progress to more complex concepts involving both representation and reasoning.<br>
<br>
The second part will look at representation/modelling of concepts in (higher order) logic in details. Axiomatic versus conservative extensions of theories will be covered and mechanisms such as Isabelle locales will be introduced and used. Recursive definitions and inductive notions will be covered too.<br>
<br>
The third part of the course will focus on fundamental notions such as unification and rewriting, within both a first and higher order context. It will look at notions such as termination and use Isabelle's simplifier as the tool for understanding many of the concepts. It will also look at the interplay between (fully) automatic and interactive proofs.<br>
<br>
The fourth part will introduce declarative/structured proofs and using the Isar language of Isabelle show how proofs resembling pencil and paper ones can be formalized.<br>
<br>
Finally the various strands will be brought together through the discussion of a non-trivial case study. This may involve either formalized mathematics (e.g. looking at a geometric theory) or a formal verification example.<br>
<br>
The assignment will be a combination of basic to intermediate representation and reasoning in Isabelle (up to 40%), more advanced proof tackling one particular domain or example (up to 40%) and a final part which, if completed successfully, will clearly demonstrate that the student has a good grasp of the challenges that advanced interactive theorem proving entails.
    
    
",
Edinburgh_Scotland,cxinfr11017,"<h2>Edinburgh_Scotland cxinfr11017</h2><h2>title</h2>Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)<h2>summary</h2>The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.<h2>content</h2>
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017),"The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.","
    
    * Background -- the development and scope of HCI. Practical goals. <br>
* HCI relevant issues in human perception, memory and thinking processes. <br>
* Approaches to designing information appliances -- software objects and physical things. <br>
* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>
* Techniques and technologies -- dialogue styles, information presentation. <br>
* The design process -- user involvement, iterative design, prototyping.  <br>
* Evaluation -- methodologies, formative and summative. Performance analysis. <br>
* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>
<br>
Relevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.
    
    
",
Edinburgh_Scotland,cxinfr11088,"<h2>Edinburgh_Scotland cxinfr11088</h2><h2>title</h2>Postgraduate Course: Extreme Computing (INFR11088)<h2>summary</h2>Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).<h2>content</h2>
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",Postgraduate Course: Extreme Computing (INFR11088),"Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).","
    
    The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>
 <br>
* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>
 <br>
* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>
 <br>
* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>
<br>
The course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems
    
    
",
Edinburgh_Scotland,cxinfr11098,"<h2>Edinburgh_Scotland cxinfr11098</h2><h2>title</h2>Postgraduate Course: Secure Programming (INFR11098)<h2>summary</h2>This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).<h2>content</h2>
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",Postgraduate Course: Secure Programming (INFR11098),"This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).","
    
    - Security maintainance of deployed software systems, including ""penetrate-and-patch"", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>
- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>
- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>
- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>
- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>
- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>
- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>
- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>
- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>
- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.
    
    
",
Edinburgh_Scotland,cxinfr11114,"<h2>Edinburgh_Scotland cxinfr11114</h2><h2>title</h2>Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)<h2>summary</h2>Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.<h2>content</h2>
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",Undergraduate Course: Types and Semantics for Programming Languages (INFR11114),"Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.","
    
    -	Inductive definitions and proof by induction<br>
-	Products, sums, unit, empty, and implication.<br>
-	Intuitionistic and classical logic.<br>
-	Universals and existentials.<br>
-	Lists and higher-order types.<br>
-	Simply-typed lambda calculus. Variable binding.<br>
-	Call-by-value and call-by-name.<br>
-	Small-step operational semantics.<br>
-	Progress and preservation.<br>
-	Type inference.<br>
-	Untyped lambda calculus.<br>
<br>
Relevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing
    
    
",
Edinburgh_Scotland,cxinfr11130,"<h2>Edinburgh_Scotland cxinfr11130</h2><h2>title</h2>Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)<h2>summary</h2>Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).<h2>content</h2>
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130),"Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>
<br>
This is an advanced course. Students should not choose this class without the required background (see ""Other Requirements"" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).","
    
    The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>
<br>
- Classification and Regression:<br>
                  Linear Regression, logistic regression, Bayes classifiers<br>
- Expanded feature representations: <br>
                  Basis functions, neural networks, kernel methods<br>
- Generalization, regularization and inference: <br>
                  Penalised cost functions, Bayesian prediction, learning theory<br>
- Model selection, pruning and combination: <br>
                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>
- Representation and metric learning: <br>
                  Dimensionality reduction, clustering, feature learning<br>
<br>
To support these topics we will also cover:<br>
- Optimization and Inference algorithms: <br>
                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>
- Practical issues: <br>
                   Formulating problems as machine learning, adapting methods to fit problems. <br>
                   Numerical and programming issues important for machine learning.<br>
                   Ethical issues, such as responsible application of methods and privacy concerns.
    
    
",
Edinburgh_Scotland,cxinfr11161,"<h2>Edinburgh_Scotland cxinfr11161</h2><h2>title</h2>Undergraduate Course: Natural Computing (INFR11161)<h2>summary</h2>This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.<h2>content</h2>
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",Undergraduate Course: Natural Computing (INFR11161),"This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>
<br>
In this module, students will learn about<br>
<br>
- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>
<br>
- Some of the underlying theory: How such algorithms work and what is provable about them. <br>
<br>
- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>
<br>
- Current commercial applications. <br>
<br>
- Current research directions.","
    
    The lectures will cover the following subjects:<br>
<br>
- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>
- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>
- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>
- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>
- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>
- Hybrid, hyperheuristic, and memetic algorithms<br>
- Multi-objective optimisation<br>
- Genetic programming<br>
- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>
- Experimental issues: Design and analysis of sets of experiments<br>
<br>
Relevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling
    
    
",
Edinburgh_Scotland,cxinfr11201,"<h2>Edinburgh_Scotland cxinfr11201</h2><h2>title</h2>Undergraduate Course: Randomized Algorithms (INFR11201)<h2>summary</h2>This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.<h2>content</h2>
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",Undergraduate Course: Randomized Algorithms (INFR11201),This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.,"
    
    1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>
<br>
2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>
<br>
3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>
<br>
4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>
<br>
5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>
<br>
6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>
<br>
7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.
    
    
",
Edinburgh_Scotland,cxinfr11213,"<h2>Edinburgh_Scotland cxinfr11213</h2><h2>title</h2>Postgraduate Course: Advanced Robotics (INFR11213)<h2>summary</h2>***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
<h2>content</h2>
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",Postgraduate Course: Advanced Robotics (INFR11213),"***This course replaces Robotics: Science and Systems (INFR11092)***<br>
<br>
Robotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, stu-dents will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot as-sembly in automobile and manufacturing. <br>
<br>
The course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>
<br>
Building on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.<br>
","
    
    This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>
<br>
The aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>
<br>
Lectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.
    
    
",
Edinburgh_Scotland,cxinfr11217,"<h2>Edinburgh_Scotland cxinfr11217</h2><h2>title</h2>Undergraduate Course: Advanced Database Systems (UG) (INFR11217)<h2>summary</h2>This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",Undergraduate Course: Advanced Database Systems (UG) (INFR11217),"This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.","
    
    This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.
    
    
",
Edinburgh_Scotland,cxinfr11218,"<h2>Edinburgh_Scotland cxinfr11218</h2><h2>title</h2>Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)<h2>summary</h2>This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218),"This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.","
    
    This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.
    
    
",
Edinburgh_Scotland,cxinfr11220,"<h2>Edinburgh_Scotland cxinfr11220</h2><h2>title</h2>Undergraduate Course: Computer Graphics (Level 11) (UG) (INFR11220)<h2>summary</h2>This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.
    
    
",Undergraduate Course: Computer Graphics (Level 11) (UG) (INFR11220),"This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.","
    
    This course follows the delivery and assessment of Computer Graphics (Level 11) (INFR11021) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11021 instead.
    
    
",
Edinburgh_Scotland,cxinfr11221,"<h2>Edinburgh_Scotland cxinfr11221</h2><h2>title</h2>Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221)<h2>summary</h2>This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.
    
    
",Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221),"This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.","
    
    This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.
    
    
",
Edinburgh_Scotland,cxinfr11222,"<h2>Edinburgh_Scotland cxinfr11222</h2><h2>title</h2>Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222)<h2>summary</h2>This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.
    
    
",Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222),"This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.","
    
    This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.
    
    
",
Edinburgh_Scotland,cxinfr11223,"<h2>Edinburgh_Scotland cxinfr11223</h2><h2>title</h2>Undergraduate Course: Machine Learning Practical (UG) (INFR11223)<h2>summary</h2>This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.
    
    
",Undergraduate Course: Machine Learning Practical (UG) (INFR11223),"This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.","
    
    This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.
    
    
",
Edinburgh_Scotland,cxinfr11224,"<h2>Edinburgh_Scotland cxinfr11224</h2><h2>title</h2>Undergraduate Course: Machine Learning Theory (UG) (INFR11224)<h2>summary</h2>This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.
    
    
",Undergraduate Course: Machine Learning Theory (UG) (INFR11224),"This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.","
    
    This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.
    
    
",
Edinburgh_Scotland,cxinfr11226,"<h2>Edinburgh_Scotland cxinfr11226</h2><h2>title</h2>Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)<h2>summary</h2>This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.
    
    
",Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226),"This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.","
    
    This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.
    
    
",
Edinburgh_Scotland,cxinfr11227,"<h2>Edinburgh_Scotland cxinfr11227</h2><h2>title</h2>Undergraduate Course: Quantum Cyber Security (UG) (INFR11227)<h2>summary</h2>This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.
    
    
",Undergraduate Course: Quantum Cyber Security (UG) (INFR11227),"This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.","
    
    This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.
    
    
",
Edinburgh_Scotland,cxinfr11228,"<h2>Edinburgh_Scotland cxinfr11228</h2><h2>title</h2>Undergraduate Course: Security Engineering (UG) (INFR11228)<h2>summary</h2>This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.
    
    
",Undergraduate Course: Security Engineering (UG) (INFR11228),"This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.","
    
    This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.
    
    
",
Edinburgh_Scotland,cxinfr11229,"<h2>Edinburgh_Scotland cxinfr11229</h2><h2>title</h2>Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229)<h2>summary</h2>This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.
    
    
",Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229),"This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.","
    
    This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.
    
    
",
Edinburgh_Scotland,cxinfr11235,"<h2>Edinburgh_Scotland cxinfr11235</h2><h2>title</h2>Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235)<h2>summary</h2>This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.
    
    
",Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235),"This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.","
    
    This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.
    
    
",
Edinburgh_Scotland,cxinfr11238,"<h2>Edinburgh_Scotland cxinfr11238</h2><h2>title</h2>Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238)<h2>summary</h2>This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.
    
    
",Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238),"This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.","
    
    This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.
    
    
",
Edinburgh_Scotland,cxinfr11239,"<h2>Edinburgh_Scotland cxinfr11239</h2><h2>title</h2>Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239)<h2>summary</h2>This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.
    
    
",Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239),"This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.","
    
    This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.
    
    
",
Edinburgh_Scotland,cxinfr10077,"<h2>Edinburgh_Scotland cxinfr10077</h2><h2>title</h2>Undergraduate Course: Computing in the Classroom (INFR10077)<h2>summary</h2>This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.<h2>content</h2>
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",Undergraduate Course: Computing in the Classroom (INFR10077),"This course will give fourth year students to opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. The course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.","
    
    Students will contribute to the teaching of computer science and data science in primary/secondary/special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>
 <br>
The aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>
 <br>
Course topics include:<br>
* Computer science in schools curricula in Scotland and other countries<br>
* Good practice in computer science pedagogy research evidence<br>
* Effective teaching techniques<br>
* Giving and receiving feedback<br>
* Lesson planning<br>
* Child protection and appropriate measures for risk management (e.g. infection control)<br>
<br>
<br>
Assessment: Students will be formally assessed on two written reports and an oral presentation.<br>
 <br>
Report 1 ( (to be submitted at the end of semester 1) (50%): A reflective account of their experiences of teaching so far, how they relate to the educational theory and research papers they have read and plans for the teaching materials they will develop.<br>
 <br>
Report 2 (to be submitted at the end of semester 2) (30%): A summary of the teaching materials which they developed with an explanation of how the materials map to the curriculum and an evaluation of how effective the materials were from the points of view of both learners and class teachers (where appropriate).  <br>
<br>
Oral Presentation (to be assessed at the end of semester 2) (20%): The student will prepare a presentation which reflects on their experiences of working in schools and the extent to which they achieved their personal learning goals during the course.
    
    
",
Edinburgh_Scotland,cxinfr11160,"<h2>Edinburgh_Scotland cxinfr11160</h2><h2>title</h2>Undergraduate Course: Bioinformatics 1 (INFR11160)<h2>summary</h2>**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.<h2>content</h2>
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",Undergraduate Course: Bioinformatics 1 (INFR11160),"**This course replaces Bioinformatics 1 (INFR11016)**<br>
<br>
This course introduces the discipline of Bioinformatics to students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex as a result of significant technological developments and their application at scale in biological and biomedical application areas.<br>
<br>
In this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong practical and theoretical emphasis to increase understanding. No previous knowledge of Bioinformatics or programming is required.","
    
    In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) as well as the cell biological processes involved in their regulation and function in biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse biological sequences through biological sequence databases, process automation, algorithms and tools to allow pairwise and multiple sequence alignment, as well as approaches using high-throughput next-generation sequence data. <br>
<br>
This course will involve practical work both in workshop/tutorial sessions and in coursework with real biological case-studies and using the Python scripting language. No previous knowledge of Biology or Python scripting is required.
    
    
",
Edinburgh_Scotland,cxinfr11209,"<h2>Edinburgh_Scotland cxinfr11209</h2><h2>title</h2>Undergraduate Course: Computational Neuroscience (INFR11209)<h2>summary</h2>In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.<h2>content</h2>
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",Undergraduate Course: Computational Neuroscience (INFR11209),"In this course we study computation in neural systems. We will consider problems such as: <br>
 <br>
How do neurons work and how do they communicate with one another? <br>
 <br>
How do groups of neurons work together to form representations of the external world? <br>
 <br>
How are memories stored and retrieved in the brain? <br>
  <br>
We will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.","
    
    This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>
<br>
Course Content:<br>
<br>
1. Introduction to basic neuroscience concepts<br>
2. Models of neurons<br>
3. Neural encoding<br>
4. Neural decoding<br>
5. Information theory<br>
6. Network Models<br>
7. Plasticity/learning<br>
<br>
The course will be delivered through lectures and computer labs.
    
    
",
Edinburgh_Scotland,cxinfr11219,"<h2>Edinburgh_Scotland cxinfr11219</h2><h2>title</h2>Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219)<h2>summary</h2>This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.
    
    
",Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219),"This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.","
    
    This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.
    
    
",
Edinburgh_Scotland,cxinfr11225,"<h2>Edinburgh_Scotland cxinfr11225</h2><h2>title</h2>Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)<h2>summary</h2>This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.<h2>content</h2>
    
    This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.
    
    
","Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)","This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.","
    
    This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.
    
    
",
